<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='CCPVRMipmap' type='{CCPVRMipmap=&quot;address&quot;*&quot;len&quot;I}'>
<field name='address' declared_type='unsigned char*' type='*'/>
<field name='len' declared_type='unsigned int' type='I'/>
</struct>
<struct name='CCZHeader' type='{CCZHeader=&quot;sig&quot;[4C]&quot;compression_type&quot;S&quot;version&quot;S&quot;reserved&quot;I&quot;len&quot;I}'>
<field name='sig' declared_type='uint8_t*' type='[4C]'/>
<field name='compression_type' declared_type='uint16_t' type='S'/>
<field name='version' declared_type='uint16_t' type='S'/>
<field name='reserved' declared_type='uint32_t' type='I'/>
<field name='len' declared_type='uint32_t' type='I'/>
</struct>
<struct name='UT_hash_bucket' type='{UT_hash_bucket=&quot;hh_head&quot;^{UT_hash_handle}&quot;count&quot;I&quot;expand_mult&quot;I}'>
<field name='hh_head' declared_type='struct UT_hash_handle*' type='^{UT_hash_handle=^{UT_hash_table}^v^v^{UT_hash_handle}^{UT_hash_handle}^vII}'/>
<field name='count' declared_type='unsigned int' type='I'/>
<field name='expand_mult' declared_type='unsigned int' type='I'/>
</struct>
<struct name='UT_hash_handle' type='{UT_hash_handle=&quot;tbl&quot;^{UT_hash_table}&quot;prev&quot;^v&quot;next&quot;^v&quot;hh_prev&quot;^{UT_hash_handle}&quot;hh_next&quot;^{UT_hash_handle}&quot;key&quot;^v&quot;keylen&quot;I&quot;hashv&quot;I}'>
<field type64='^{UT_hash_table=^{UT_hash_bucket}III^{UT_hash_handle}qIIIII}' name='tbl' declared_type='struct UT_hash_table*' type='^{UT_hash_table=^{UT_hash_bucket}III^{UT_hash_handle}iIIIII}'/>
<field name='prev' declared_type='void*' type='^v'/>
<field name='next' declared_type='void*' type='^v'/>
<field name='hh_prev' declared_type='struct UT_hash_handle*' type='^{UT_hash_handle=^{UT_hash_table}^v^v^{UT_hash_handle}^{UT_hash_handle}^vII}'/>
<field name='hh_next' declared_type='struct UT_hash_handle*' type='^{UT_hash_handle=^{UT_hash_table}^v^v^{UT_hash_handle}^{UT_hash_handle}^vII}'/>
<field name='key' declared_type='void*' type='^v'/>
<field name='keylen' declared_type='unsigned int' type='I'/>
<field name='hashv' declared_type='unsigned int' type='I'/>
</struct>
<struct type64='{UT_hash_table=&quot;buckets&quot;^{UT_hash_bucket}&quot;num_buckets&quot;I&quot;log2_num_buckets&quot;I&quot;num_items&quot;I&quot;tail&quot;^{UT_hash_handle}&quot;hho&quot;q&quot;ideal_chain_maxlen&quot;I&quot;nonideal_items&quot;I&quot;ineff_expands&quot;I&quot;noexpand&quot;I&quot;signature&quot;I}' name='UT_hash_table' type='{UT_hash_table=&quot;buckets&quot;^{UT_hash_bucket}&quot;num_buckets&quot;I&quot;log2_num_buckets&quot;I&quot;num_items&quot;I&quot;tail&quot;^{UT_hash_handle}&quot;hho&quot;i&quot;ideal_chain_maxlen&quot;I&quot;nonideal_items&quot;I&quot;ineff_expands&quot;I&quot;noexpand&quot;I&quot;signature&quot;I}'>
<field name='buckets' declared_type='UT_hash_bucket*' type='^{UT_hash_bucket=^{UT_hash_handle}II}'/>
<field name='num_buckets' declared_type='unsigned int' type='I'/>
<field name='log2_num_buckets' declared_type='unsigned int' type='I'/>
<field name='num_items' declared_type='unsigned int' type='I'/>
<field name='tail' declared_type='struct UT_hash_handle*' type='^{UT_hash_handle=^{UT_hash_table}^v^v^{UT_hash_handle}^{UT_hash_handle}^vII}'/>
<field type64='q' name='hho' declared_type='ptrdiff_t' type='i'/>
<field name='ideal_chain_maxlen' declared_type='unsigned int' type='I'/>
<field name='nonideal_items' declared_type='unsigned int' type='I'/>
<field name='ineff_expands' declared_type='unsigned int' type='I'/>
<field name='noexpand' declared_type='unsigned int' type='I'/>
<field name='signature' declared_type='uint32_t' type='I'/>
</struct>
<struct name='bufferInfo' type='{_bufferInfo=&quot;bufferId&quot;I&quot;bufferState&quot;i&quot;bufferData&quot;^v&quot;format&quot;i&quot;sizeInBytes&quot;i&quot;frequencyInHertz&quot;i}'>
<field name='bufferId' declared_type='ALuint' type='I'/>
<field name='bufferState' declared_type='int' type='i'/>
<field name='bufferData' declared_type='void*' type='^v'/>
<field name='format' declared_type='ALenum' type='i'/>
<field name='sizeInBytes' declared_type='ALsizei' type='i'/>
<field name='frequencyInHertz' declared_type='ALsizei' type='i'/>
</struct>
<struct type64='{ccArray=&quot;num&quot;Q&quot;max&quot;Q&quot;arr&quot;^@}' name='ccArray' type='{ccArray=&quot;num&quot;I&quot;max&quot;I&quot;arr&quot;^@}'>
<field type64='Q' name='num' declared_type='NSUInteger' type='I'/>
<field type64='Q' name='max' declared_type='NSUInteger' type='I'/>
<field name='arr' declared_type='CCARRAY_ID*' type='^@'/>
</struct>
<struct type64='{_BMFontDef=&quot;charID&quot;S&quot;rect&quot;{CGRect=&quot;origin&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;size&quot;{CGSize=&quot;width&quot;d&quot;height&quot;d}}&quot;xOffset&quot;s&quot;yOffset&quot;s&quot;xAdvance&quot;s}' name='ccBMFontDef' type='{_BMFontDef=&quot;charID&quot;S&quot;rect&quot;{CGRect=&quot;origin&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;size&quot;{CGSize=&quot;width&quot;f&quot;height&quot;f}}&quot;xOffset&quot;s&quot;yOffset&quot;s&quot;xAdvance&quot;s}'>
<field name='charID' declared_type='unichar' type='S'/>
<field type64='{CGRect=&quot;origin&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;size&quot;{CGSize=&quot;width&quot;d&quot;height&quot;d}}' name='rect' declared_type='CGRect' type='{CGRect=&quot;origin&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;size&quot;{CGSize=&quot;width&quot;f&quot;height&quot;f}}'/>
<field name='xOffset' declared_type='short' type='s'/>
<field name='yOffset' declared_type='short' type='s'/>
<field name='xAdvance' declared_type='short' type='s'/>
</struct>
<struct name='ccBMFontPadding' type='{_BMFontPadding=&quot;left&quot;i&quot;top&quot;i&quot;right&quot;i&quot;bottom&quot;i}'>
<field name='left' declared_type='int' type='i'/>
<field name='top' declared_type='int' type='i'/>
<field name='right' declared_type='int' type='i'/>
<field name='bottom' declared_type='int' type='i'/>
</struct>
<struct type64='{_ccBezierConfig=&quot;endPosition&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;controlPoint_1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;controlPoint_2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}}' name='ccBezierConfig' type='{_ccBezierConfig=&quot;endPosition&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;controlPoint_1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;controlPoint_2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}'>
<field type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='endPosition' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='controlPoint_1' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='controlPoint_2' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='ccBlendFunc' type='{_ccBlendFunc=&quot;src&quot;I&quot;dst&quot;I}'>
<field name='src' declared_type='GLenum' type='I'/>
<field name='dst' declared_type='GLenum' type='I'/>
</struct>
<struct type64='{ccArray=&quot;num&quot;Q&quot;max&quot;Q&quot;arr&quot;^@}' name='ccCArray' type='{ccArray=&quot;num&quot;I&quot;max&quot;I&quot;arr&quot;^@}'>
<field type64='Q' name='num' declared_type='NSUInteger' type='I'/>
<field type64='Q' name='max' declared_type='NSUInteger' type='I'/>
<field name='arr' declared_type='CCARRAY_ID*' type='^@'/>
</struct>
<struct name='ccColor3B' type='{_ccColor3B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C}'>
<field name='r' declared_type='GLubyte' type='C'/>
<field name='g' declared_type='GLubyte' type='C'/>
<field name='b' declared_type='GLubyte' type='C'/>
</struct>
<struct name='ccColor4B' type='{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}'>
<field name='r' declared_type='GLubyte' type='C'/>
<field name='g' declared_type='GLubyte' type='C'/>
<field name='b' declared_type='GLubyte' type='C'/>
<field name='a' declared_type='GLubyte' type='C'/>
</struct>
<struct name='ccColor4F' type='{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}'>
<field name='r' declared_type='GLfloat' type='f'/>
<field name='g' declared_type='GLfloat' type='f'/>
<field name='b' declared_type='GLfloat' type='f'/>
<field name='a' declared_type='GLfloat' type='f'/>
</struct>
<struct type64='{_ccGridSize=&quot;x&quot;q&quot;y&quot;q}' name='ccGridSize' type='{_ccGridSize=&quot;x&quot;i&quot;y&quot;i}'>
<field type64='q' name='x' declared_type='NSInteger' type='i'/>
<field type64='q' name='y' declared_type='NSInteger' type='i'/>
</struct>
<struct name='ccPVRTexturePixelFormatInfo' type='{_ccPVRTexturePixelFormatInfo=&quot;internalFormat&quot;I&quot;format&quot;I&quot;type&quot;I&quot;bpp&quot;I&quot;compressed&quot;B&quot;alpha&quot;B&quot;ccPixelFormat&quot;i}'>
<field name='internalFormat' declared_type='GLenum' type='I'/>
<field name='format' declared_type='GLenum' type='I'/>
<field name='type' declared_type='GLenum' type='I'/>
<field name='bpp' declared_type='uint32_t' type='I'/>
<field name='compressed' declared_type='BOOL' type='B'/>
<field name='alpha' declared_type='BOOL' type='B'/>
<field name='ccPixelFormat' declared_type='CCTexture2DPixelFormat' type='i'/>
</struct>
<struct name='ccPointSprite' type='{_ccPointSprite=&quot;pos&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;color&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;size&quot;f}'>
<field name='pos' declared_type='ccVertex2F' type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='color' declared_type='ccColor4B' type='{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}'/>
<field name='size' declared_type='GLfloat' type='f'/>
</struct>
<struct name='ccQuad2' type='{_ccQuad2=&quot;tl&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;tr&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;bl&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;br&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}}'>
<field name='tl' declared_type='ccVertex2F' type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='tr' declared_type='ccVertex2F' type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='bl' declared_type='ccVertex2F' type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='br' declared_type='ccVertex2F' type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='ccQuad3' type='{_ccQuad3=&quot;bl&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;br&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;tl&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;tr&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}}'>
<field name='bl' declared_type='ccVertex3F' type='{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}'/>
<field name='br' declared_type='ccVertex3F' type='{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}'/>
<field name='tl' declared_type='ccVertex3F' type='{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}'/>
<field name='tr' declared_type='ccVertex3F' type='{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}'/>
</struct>
<struct name='ccTex2F' type='{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}'>
<field name='u' declared_type='GLfloat' type='f'/>
<field name='v' declared_type='GLfloat' type='f'/>
</struct>
<struct name='ccTexParams' type='{_ccTexParams=&quot;minFilter&quot;I&quot;magFilter&quot;I&quot;wrapS&quot;I&quot;wrapT&quot;I}'>
<field name='minFilter' declared_type='GLuint' type='I'/>
<field name='magFilter' declared_type='GLuint' type='I'/>
<field name='wrapS' declared_type='GLuint' type='I'/>
<field name='wrapT' declared_type='GLuint' type='I'/>
</struct>
<struct name='ccTouchHandlerHelperData' type='{ccTouchHandlerHelperData=&quot;touchesSel&quot;:&quot;touchSel&quot;:&quot;type&quot;i}'>
<field name='touchesSel' declared_type='SEL' type=':'/>
<field name='touchSel' declared_type='SEL' type=':'/>
<field name='type' declared_type='ccTouchSelectorFlag' type='i'/>
</struct>
<struct name='ccV2F_C4B_T2F' type='{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'>
<field name='vertices' declared_type='ccVertex2F' type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='colors' declared_type='ccColor4B' type='{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}'/>
<field name='texCoords' declared_type='ccTex2F' type='{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}'/>
</struct>
<struct name='ccV2F_C4B_T2F_Quad' type='{_ccV2F_C4B_T2F_Quad=&quot;bl&quot;{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;br&quot;{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;tl&quot;{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;tr&quot;{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}}'>
<field name='bl' declared_type='ccV2F_C4B_T2F' type='{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
<field name='br' declared_type='ccV2F_C4B_T2F' type='{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
<field name='tl' declared_type='ccV2F_C4B_T2F' type='{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
<field name='tr' declared_type='ccV2F_C4B_T2F' type='{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
</struct>
<struct name='ccV2F_C4B_T2F_Triangle' type='{_ccV2F_C4B_T2F_Triangle=&quot;a&quot;{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;b&quot;{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;c&quot;{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}}'>
<field name='a' declared_type='ccV2F_C4B_T2F' type='{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
<field name='b' declared_type='ccV2F_C4B_T2F' type='{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
<field name='c' declared_type='ccV2F_C4B_T2F' type='{_ccV2F_C4B_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
</struct>
<struct name='ccV2F_C4F_T2F' type='{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'>
<field name='vertices' declared_type='ccVertex2F' type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='colors' declared_type='ccColor4F' type='{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}'/>
<field name='texCoords' declared_type='ccTex2F' type='{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}'/>
</struct>
<struct name='ccV2F_C4F_T2F_Quad' type='{_ccV2F_C4F_T2F_Quad=&quot;bl&quot;{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;br&quot;{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;tl&quot;{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;tr&quot;{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}}'>
<field name='bl' declared_type='ccV2F_C4F_T2F' type='{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
<field name='br' declared_type='ccV2F_C4F_T2F' type='{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
<field name='tl' declared_type='ccV2F_C4F_T2F' type='{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
<field name='tr' declared_type='ccV2F_C4F_T2F' type='{_ccV2F_C4F_T2F=&quot;vertices&quot;{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
</struct>
<struct name='ccV3F_C4B_T2F' type='{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'>
<field name='vertices' declared_type='ccVertex3F' type='{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}'/>
<field name='colors' declared_type='ccColor4B' type='{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}'/>
<field name='texCoords' declared_type='ccTex2F' type='{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}'/>
</struct>
<struct name='ccV3F_C4B_T2F_Quad' type='{_ccV3F_C4B_T2F_Quad=&quot;tl&quot;{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;bl&quot;{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;tr&quot;{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;br&quot;{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}}'>
<field name='tl' declared_type='ccV3F_C4B_T2F' type='{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
<field name='bl' declared_type='ccV3F_C4B_T2F' type='{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
<field name='tr' declared_type='ccV3F_C4B_T2F' type='{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
<field name='br' declared_type='ccV3F_C4B_T2F' type='{_ccV3F_C4B_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4B=&quot;r&quot;C&quot;g&quot;C&quot;b&quot;C&quot;a&quot;C}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
</struct>
<struct name='ccV3F_C4F_T2F' type='{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'>
<field name='vertices' declared_type='ccVertex3F' type='{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}'/>
<field name='colors' declared_type='ccColor4F' type='{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}'/>
<field name='texCoords' declared_type='ccTex2F' type='{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}'/>
</struct>
<struct name='ccV3F_C4F_T2F_Quad' type='{_ccV3F_C4F_T2F_Quad=&quot;tl&quot;{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;bl&quot;{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;tr&quot;{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}&quot;br&quot;{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}}'>
<field name='tl' declared_type='ccV3F_C4F_T2F' type='{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
<field name='bl' declared_type='ccV3F_C4F_T2F' type='{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
<field name='tr' declared_type='ccV3F_C4F_T2F' type='{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
<field name='br' declared_type='ccV3F_C4F_T2F' type='{_ccV3F_C4F_T2F=&quot;vertices&quot;{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;colors&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;texCoords&quot;{_ccTex2F=&quot;u&quot;f&quot;v&quot;f}}'/>
</struct>
<struct name='ccVertex2F' type='{_ccVertex2F=&quot;x&quot;f&quot;y&quot;f}'>
<field name='x' declared_type='GLfloat' type='f'/>
<field name='y' declared_type='GLfloat' type='f'/>
</struct>
<struct name='ccVertex3F' type='{_ccVertex3F=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}'>
<field name='x' declared_type='GLfloat' type='f'/>
<field name='y' declared_type='GLfloat' type='f'/>
<field name='z' declared_type='GLfloat' type='f'/>
</struct>
<struct name='kmAABB' type='{kmAABB=&quot;min&quot;{kmVec3=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;max&quot;{kmVec3=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}}'>
<field name='min' declared_type='kmVec3' type='{kmVec3=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}'/>
<field name='max' declared_type='kmVec3' type='{kmVec3=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}'/>
</struct>
<struct name='kmMat3' type='{kmMat3=&quot;mat&quot;[9f]}'>
<field name='mat' declared_type='float*' type='[9f]'/>
</struct>
<struct name='kmMat4' type='{kmMat4=&quot;mat&quot;[16f]}'>
<field name='mat' declared_type='float*' type='[16f]'/>
</struct>
<struct name='kmPlane' type='{kmPlane=&quot;a&quot;f&quot;b&quot;f&quot;c&quot;f&quot;d&quot;f}'>
<field name='a' declared_type='float' type='f'/>
<field name='b' declared_type='float' type='f'/>
<field name='c' declared_type='float' type='f'/>
<field name='d' declared_type='float' type='f'/>
</struct>
<struct name='kmQuaternion' type='{kmQuaternion=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f&quot;w&quot;f}'>
<field name='x' declared_type='float' type='f'/>
<field name='y' declared_type='float' type='f'/>
<field name='z' declared_type='float' type='f'/>
<field name='w' declared_type='float' type='f'/>
</struct>
<struct name='kmRay2' type='{kmRay2=&quot;start&quot;{kmVec2=&quot;x&quot;f&quot;y&quot;f}&quot;dir&quot;{kmVec2=&quot;x&quot;f&quot;y&quot;f}}'>
<field name='start' declared_type='kmVec2' type='{kmVec2=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='dir' declared_type='kmVec2' type='{kmVec2=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='kmVec2' type='{kmVec2=&quot;x&quot;f&quot;y&quot;f}'>
<field name='x' declared_type='float' type='f'/>
<field name='y' declared_type='float' type='f'/>
</struct>
<struct name='kmVec3' type='{kmVec3=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}'>
<field name='x' declared_type='float' type='f'/>
<field name='y' declared_type='float' type='f'/>
<field name='z' declared_type='float' type='f'/>
</struct>
<struct name='kmVec4' type='{kmVec4=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f&quot;w&quot;f}'>
<field name='x' declared_type='float' type='f'/>
<field name='y' declared_type='float' type='f'/>
<field name='z' declared_type='float' type='f'/>
<field name='w' declared_type='float' type='f'/>
</struct>
<struct name='km_mat4_stack' type='{km_mat4_stack=&quot;capacity&quot;i&quot;item_count&quot;i&quot;top&quot;^{kmMat4}&quot;stack&quot;^{kmMat4}}'>
<field name='capacity' declared_type='int' type='i'/>
<field name='item_count' declared_type='int' type='i'/>
<field name='top' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<field name='stack' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
</struct>
<struct type64='{sCCParticle=&quot;pos&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;startPos&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;color&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;deltaColor&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;size&quot;f&quot;deltaSize&quot;f&quot;rotation&quot;f&quot;deltaRotation&quot;f&quot;timeToLive&quot;f&quot;atlasIndex&quot;Q&quot;mode&quot;(?=&quot;A&quot;{?=&quot;dir&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;radialAccel&quot;f&quot;tangentialAccel&quot;f}&quot;B&quot;{?=&quot;angle&quot;f&quot;degreesPerSecond&quot;f&quot;radius&quot;f&quot;deltaRadius&quot;f})}' name='sCCParticle' type='{sCCParticle=&quot;pos&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;startPos&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;color&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;deltaColor&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;size&quot;f&quot;deltaSize&quot;f&quot;rotation&quot;f&quot;deltaRotation&quot;f&quot;timeToLive&quot;f&quot;atlasIndex&quot;I&quot;mode&quot;(?=&quot;A&quot;{?=&quot;dir&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;radialAccel&quot;f&quot;tangentialAccel&quot;f}&quot;B&quot;{?=&quot;angle&quot;f&quot;degreesPerSecond&quot;f&quot;radius&quot;f&quot;deltaRadius&quot;f})}'>
<field type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='pos' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='startPos' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='color' declared_type='ccColor4F' type='{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}'/>
<field name='deltaColor' declared_type='ccColor4F' type='{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}'/>
<field name='size' declared_type='float' type='f'/>
<field name='deltaSize' declared_type='float' type='f'/>
<field name='rotation' declared_type='float' type='f'/>
<field name='deltaRotation' declared_type='float' type='f'/>
<field name='timeToLive' declared_type='ccTime' type='f'/>
<field type64='Q' name='atlasIndex' declared_type='NSUInteger' type='I'/>
<field type64='(?=&quot;A&quot;{?=&quot;dir&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;radialAccel&quot;f&quot;tangentialAccel&quot;f}&quot;B&quot;{?=&quot;angle&quot;f&quot;degreesPerSecond&quot;f&quot;radius&quot;f&quot;deltaRadius&quot;f})' name='mode' declared_type='union sCCParticle::' type='(?=&quot;A&quot;{?=&quot;dir&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;radialAccel&quot;f&quot;tangentialAccel&quot;f}&quot;B&quot;{?=&quot;angle&quot;f&quot;degreesPerSecond&quot;f&quot;radius&quot;f&quot;deltaRadius&quot;f})'/>
</struct>
<struct name='sImageTGA' type='{sImageTGA=&quot;status&quot;i&quot;type&quot;C&quot;pixelDepth&quot;C&quot;width&quot;s&quot;height&quot;s&quot;imageData&quot;*&quot;flipped&quot;i}'>
<field name='status' declared_type='int' type='i'/>
<field name='type' declared_type='unsigned char' type='C'/>
<field name='pixelDepth' declared_type='unsigned char' type='C'/>
<field name='width' declared_type='short' type='s'/>
<field name='height' declared_type='short' type='s'/>
<field name='imageData' declared_type='unsigned char*' type='*'/>
<field name='flipped' declared_type='int' type='i'/>
</struct>
<struct name='sourceGroup' type='{_sourceGroup=&quot;startIndex&quot;i&quot;currentIndex&quot;i&quot;totalSources&quot;i&quot;enabled&quot;B&quot;nonInterruptible&quot;B&quot;sourceStatuses&quot;^i}'>
<field name='startIndex' declared_type='int' type='i'/>
<field name='currentIndex' declared_type='int' type='i'/>
<field name='totalSources' declared_type='int' type='i'/>
<field name='enabled' declared_type='_Bool' type='B'/>
<field name='nonInterruptible' declared_type='_Bool' type='B'/>
<field name='sourceStatuses' declared_type='int*' type='^i'/>
</struct>
<struct name='sourceInfo' type='{_sourceInfo=&quot;usable&quot;B&quot;sourceId&quot;I&quot;attachedBufferId&quot;I}'>
<field name='usable' declared_type='_Bool' type='B'/>
<field name='sourceId' declared_type='ALuint' type='I'/>
<field name='attachedBufferId' declared_type='ALuint' type='I'/>
</struct>
<struct type64='{_FontDefHashElement=&quot;key&quot;Q&quot;fontDef&quot;{_BMFontDef=&quot;charID&quot;S&quot;rect&quot;{CGRect=&quot;origin&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;size&quot;{CGSize=&quot;width&quot;d&quot;height&quot;d}}&quot;xOffset&quot;s&quot;yOffset&quot;s&quot;xAdvance&quot;s}&quot;hh&quot;{UT_hash_handle=&quot;tbl&quot;^{UT_hash_table}&quot;prev&quot;^v&quot;next&quot;^v&quot;hh_prev&quot;^{UT_hash_handle}&quot;hh_next&quot;^{UT_hash_handle}&quot;key&quot;^v&quot;keylen&quot;I&quot;hashv&quot;I}}' name='tCCFontDefHashElement' type='{_FontDefHashElement=&quot;key&quot;I&quot;fontDef&quot;{_BMFontDef=&quot;charID&quot;S&quot;rect&quot;{CGRect=&quot;origin&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;size&quot;{CGSize=&quot;width&quot;f&quot;height&quot;f}}&quot;xOffset&quot;s&quot;yOffset&quot;s&quot;xAdvance&quot;s}&quot;hh&quot;{UT_hash_handle=&quot;tbl&quot;^{UT_hash_table}&quot;prev&quot;^v&quot;next&quot;^v&quot;hh_prev&quot;^{UT_hash_handle}&quot;hh_next&quot;^{UT_hash_handle}&quot;key&quot;^v&quot;keylen&quot;I&quot;hashv&quot;I}}'>
<field type64='Q' name='key' declared_type='NSUInteger' type='I'/>
<field type64='{_BMFontDef=&quot;charID&quot;S&quot;rect&quot;{CGRect=&quot;origin&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;size&quot;{CGSize=&quot;width&quot;d&quot;height&quot;d}}&quot;xOffset&quot;s&quot;yOffset&quot;s&quot;xAdvance&quot;s}' name='fontDef' declared_type='ccBMFontDef' type='{_BMFontDef=&quot;charID&quot;S&quot;rect&quot;{CGRect=&quot;origin&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;size&quot;{CGSize=&quot;width&quot;f&quot;height&quot;f}}&quot;xOffset&quot;s&quot;yOffset&quot;s&quot;xAdvance&quot;s}'/>
<field name='hh' declared_type='UT_hash_handle' type='{UT_hash_handle=&quot;tbl&quot;^{UT_hash_table}&quot;prev&quot;^v&quot;next&quot;^v&quot;hh_prev&quot;^{UT_hash_handle}&quot;hh_next&quot;^{UT_hash_handle}&quot;key&quot;^v&quot;keylen&quot;I&quot;hashv&quot;I}'/>
</struct>
<struct name='tCCKerningHashElement' type='{_KerningHashElement=&quot;key&quot;i&quot;amount&quot;i&quot;hh&quot;{UT_hash_handle=&quot;tbl&quot;^{UT_hash_table}&quot;prev&quot;^v&quot;next&quot;^v&quot;hh_prev&quot;^{UT_hash_handle}&quot;hh_next&quot;^{UT_hash_handle}&quot;key&quot;^v&quot;keylen&quot;I&quot;hashv&quot;I}}'>
<field name='key' declared_type='int' type='i'/>
<field name='amount' declared_type='int' type='i'/>
<field name='hh' declared_type='UT_hash_handle' type='{UT_hash_handle=&quot;tbl&quot;^{UT_hash_table}&quot;prev&quot;^v&quot;next&quot;^v&quot;hh_prev&quot;^{UT_hash_handle}&quot;hh_next&quot;^{UT_hash_handle}&quot;key&quot;^v&quot;keylen&quot;I&quot;hashv&quot;I}'/>
</struct>
<struct type64='{sCCParticle=&quot;pos&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;startPos&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;color&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;deltaColor&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;size&quot;f&quot;deltaSize&quot;f&quot;rotation&quot;f&quot;deltaRotation&quot;f&quot;timeToLive&quot;f&quot;atlasIndex&quot;Q&quot;mode&quot;(?=&quot;A&quot;{?=&quot;dir&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;radialAccel&quot;f&quot;tangentialAccel&quot;f}&quot;B&quot;{?=&quot;angle&quot;f&quot;degreesPerSecond&quot;f&quot;radius&quot;f&quot;deltaRadius&quot;f})}' name='tCCParticle' type='{sCCParticle=&quot;pos&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;startPos&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;color&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;deltaColor&quot;{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}&quot;size&quot;f&quot;deltaSize&quot;f&quot;rotation&quot;f&quot;deltaRotation&quot;f&quot;timeToLive&quot;f&quot;atlasIndex&quot;I&quot;mode&quot;(?=&quot;A&quot;{?=&quot;dir&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;radialAccel&quot;f&quot;tangentialAccel&quot;f}&quot;B&quot;{?=&quot;angle&quot;f&quot;degreesPerSecond&quot;f&quot;radius&quot;f&quot;deltaRadius&quot;f})}'>
<field type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='pos' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' name='startPos' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='color' declared_type='ccColor4F' type='{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}'/>
<field name='deltaColor' declared_type='ccColor4F' type='{_ccColor4F=&quot;r&quot;f&quot;g&quot;f&quot;b&quot;f&quot;a&quot;f}'/>
<field name='size' declared_type='float' type='f'/>
<field name='deltaSize' declared_type='float' type='f'/>
<field name='rotation' declared_type='float' type='f'/>
<field name='deltaRotation' declared_type='float' type='f'/>
<field name='timeToLive' declared_type='ccTime' type='f'/>
<field type64='Q' name='atlasIndex' declared_type='NSUInteger' type='I'/>
<field type64='(?=&quot;A&quot;{?=&quot;dir&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;radialAccel&quot;f&quot;tangentialAccel&quot;f}&quot;B&quot;{?=&quot;angle&quot;f&quot;degreesPerSecond&quot;f&quot;radius&quot;f&quot;deltaRadius&quot;f})' name='mode' declared_type='union sCCParticle::' type='(?=&quot;A&quot;{?=&quot;dir&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;radialAccel&quot;f&quot;tangentialAccel&quot;f}&quot;B&quot;{?=&quot;angle&quot;f&quot;degreesPerSecond&quot;f&quot;radius&quot;f&quot;deltaRadius&quot;f})'/>
</struct>
<struct type64='{_hashElement=&quot;actions&quot;^{ccArray}&quot;actionIndex&quot;Q&quot;currentActionSalvaged&quot;B&quot;paused&quot;B&quot;hh&quot;{UT_hash_handle=&quot;tbl&quot;^{UT_hash_table}&quot;prev&quot;^v&quot;next&quot;^v&quot;hh_prev&quot;^{UT_hash_handle}&quot;hh_next&quot;^{UT_hash_handle}&quot;key&quot;^v&quot;keylen&quot;I&quot;hashv&quot;I}&quot;target&quot;@&quot;currentAction&quot;@&quot;CCAction&quot;}' name='tHashElement' type='{_hashElement=&quot;actions&quot;^{ccArray}&quot;actionIndex&quot;I&quot;currentActionSalvaged&quot;B&quot;paused&quot;B&quot;hh&quot;{UT_hash_handle=&quot;tbl&quot;^{UT_hash_table}&quot;prev&quot;^v&quot;next&quot;^v&quot;hh_prev&quot;^{UT_hash_handle}&quot;hh_next&quot;^{UT_hash_handle}&quot;key&quot;^v&quot;keylen&quot;I&quot;hashv&quot;I}&quot;target&quot;@&quot;currentAction&quot;@&quot;CCAction&quot;}'>
<field type64='^{ccArray=QQ^@}' name='actions' declared_type='struct ccArray*' type='^{ccArray=II^@}'/>
<field type64='Q' name='actionIndex' declared_type='NSUInteger' type='I'/>
<field name='currentActionSalvaged' declared_type='BOOL' type='B'/>
<field name='paused' declared_type='BOOL' type='B'/>
<field name='hh' declared_type='UT_hash_handle' type='{UT_hash_handle=&quot;tbl&quot;^{UT_hash_table}&quot;prev&quot;^v&quot;next&quot;^v&quot;hh_prev&quot;^{UT_hash_handle}&quot;hh_next&quot;^{UT_hash_handle}&quot;key&quot;^v&quot;keylen&quot;I&quot;hashv&quot;I}'/>
<field name='target' declared_type='id' type='@'/>
<field name='currentAction' declared_type='CCAction*' type='@&quot;CCAction&quot;'/>
</struct>
<struct name='tImageTGA' type='{sImageTGA=&quot;status&quot;i&quot;type&quot;C&quot;pixelDepth&quot;C&quot;width&quot;s&quot;height&quot;s&quot;imageData&quot;*&quot;flipped&quot;i}'>
<field name='status' declared_type='int' type='i'/>
<field name='type' declared_type='unsigned char' type='C'/>
<field name='pixelDepth' declared_type='unsigned char' type='C'/>
<field name='width' declared_type='short' type='s'/>
<field name='height' declared_type='short' type='s'/>
<field name='imageData' declared_type='unsigned char*' type='*'/>
<field name='flipped' declared_type='int' type='i'/>
</struct>
<constant name='ccBLACK' declared_type='ccColor3B' type='{_ccColor3B=CCC}' const='true'/>
<constant name='ccBLUE' declared_type='ccColor3B' type='{_ccColor3B=CCC}' const='true'/>
<constant name='ccGRAY' declared_type='ccColor3B' type='{_ccColor3B=CCC}' const='true'/>
<constant name='ccGREEN' declared_type='ccColor3B' type='{_ccColor3B=CCC}' const='true'/>
<constant name='ccMAGENTA' declared_type='ccColor3B' type='{_ccColor3B=CCC}' const='true'/>
<constant name='ccORANGE' declared_type='ccColor3B' type='{_ccColor3B=CCC}' const='true'/>
<constant name='ccPositionColorLengthTexture_frag' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccPositionColorLengthTexture_vert' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccPositionColor_frag' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccPositionColor_vert' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccPositionTextureA8Color_frag' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccPositionTextureA8Color_vert' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccPositionTextureColorAlphaTest_frag' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccPositionTextureColor_frag' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccPositionTextureColor_vert' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccPositionTexture_frag' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccPositionTexture_uColor_frag' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccPositionTexture_uColor_vert' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccPositionTexture_vert' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccPosition_uColor_frag' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccPosition_uColor_vert' declared_type='GLchar*' type='*' const='true'/>
<constant name='ccRED' declared_type='ccColor3B' type='{_ccColor3B=CCC}' const='true'/>
<constant name='ccWHITE' declared_type='ccColor3B' type='{_ccColor3B=CCC}' const='true'/>
<constant name='ccYELLOW' declared_type='ccColor3B' type='{_ccColor3B=CCC}' const='true'/>
<constant name='kCCBlendFuncDisable' declared_type='ccBlendFunc' type='{_ccBlendFunc=II}' const='true'/>
<constant name='kCCProfilerCategoryBatchSprite' declared_type='BOOL' type='B'/>
<constant name='kCCProfilerCategoryParticles' declared_type='BOOL' type='B'/>
<constant name='kCCProfilerCategorySprite' declared_type='BOOL' type='B'/>
<constant name='kCDN_AsynchLoadComplete' declared_type='NSString*' type='@' const='true'/>
<constant name='kCDN_AudioManagerInitialised' declared_type='NSString*' type='@' const='true'/>
<constant name='kCDN_BadAlContext' declared_type='NSString*' type='@' const='true'/>
<constant name='kCDNoBuffer' declared_type='int' type='i' const='true'/>
<constant name='kCD_GainDefault' declared_type='float' type='f' const='true'/>
<constant name='kCD_PanDefault' declared_type='float' type='f' const='true'/>
<constant name='kCD_PanFullLeft' declared_type='float' type='f' const='true'/>
<constant name='kCD_PanFullRight' declared_type='float' type='f' const='true'/>
<constant name='kCD_PitchDefault' declared_type='float' type='f' const='true'/>
<constant name='kCD_PitchHigherOneOctave' declared_type='float' type='f' const='true'/>
<constant name='kCD_PitchLowerOneOctave' declared_type='float' type='f' const='true'/>
<string_constant nsstring='true' name='CCAnimationFrameDisplayedNotification' value='CCAnimationFrameDisplayedNotification'/>
<string_constant name='COCOSDENSHION_VERSION' value='Aphex.rc'/>
<string_constant nsstring='true' name='kCCAttributeNameColor' value='a_color'/>
<string_constant nsstring='true' name='kCCAttributeNamePosition' value='a_position'/>
<string_constant nsstring='true' name='kCCAttributeNameTexCoord' value='a_texCoord'/>
<string_constant nsstring='true' name='kCCShader_PositionColor' value='ShaderPositionColor'/>
<string_constant nsstring='true' name='kCCShader_PositionLengthTexureColor' value='ShaderPositionLengthTextureColor'/>
<string_constant nsstring='true' name='kCCShader_PositionTexture' value='ShaderPositionTexture'/>
<string_constant nsstring='true' name='kCCShader_PositionTextureA8Color' value='ShaderPositionTextureA8Color'/>
<string_constant nsstring='true' name='kCCShader_PositionTextureColor' value='ShaderPositionTextureColor'/>
<string_constant nsstring='true' name='kCCShader_PositionTextureColorAlphaTest' value='ShaderPositionTextureColorAlphaTest'/>
<string_constant nsstring='true' name='kCCShader_PositionTexture_uColor' value='ShaderPositionTexture_uColor'/>
<string_constant nsstring='true' name='kCCShader_Position_uColor' value='ShaderPosition_uColor'/>
<string_constant name='kCCUniformAlphaTestValue' value='CC_alpha_value'/>
<string_constant name='kCCUniformCosTime_s' value='CC_CosTime'/>
<string_constant name='kCCUniformMVMatrix_s' value='CC_MVMatrix'/>
<string_constant name='kCCUniformMVPMatrix_s' value='CC_MVPMatrix'/>
<string_constant name='kCCUniformPMatrix_s' value='CC_PMatrix'/>
<string_constant name='kCCUniformRandom01_s' value='CC_Random01'/>
<string_constant name='kCCUniformSampler_s' value='CC_Texture0'/>
<string_constant name='kCCUniformSinTime_s' value='CC_SinTime'/>
<string_constant name='kCCUniformTime_s' value='CC_Time'/>
<enum name='CCSpriteIndexNotInitialized' value='4294967295'/>
<enum name='CCTMXOrientationHex' value='1'/>
<enum name='CCTMXOrientationIso' value='2'/>
<enum name='CCTMXOrientationOrtho' value='0'/>
<enum name='CCTextAlignmentLeft' value='0'/>
<enum name='CCZ_COMPRESSION_BZIP2' value='1'/>
<enum name='CCZ_COMPRESSION_GZIP' value='2'/>
<enum name='CCZ_COMPRESSION_NONE' value='3'/>
<enum name='CCZ_COMPRESSION_ZLIB' value='0'/>
<enum name='CC_BLEND_DST' value='771'/>
<enum name='CC_BLEND_SRC' value='1'/>
<enum name='CC_DIRECTOR_IOS_USE_BACKGROUND_THREAD' value='0'/>
<enum name='CC_DIRECTOR_MAC_THREAD' value='0'/>
<enum name='CC_DIRECTOR_STATS_INTERVAL' value='0.1f'/>
<enum name='CC_ENABLE_DEPRECATED' value='1'/>
<enum name='CC_ENABLE_GL_STATE_CACHE' value='0'/>
<enum name='CC_ENABLE_PROFILERS' value='0'/>
<enum name='CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL' value='0'/>
<enum name='CC_GL_ALL' value='0'/>
<enum name='CC_GL_DEPTH24_STENCIL8' value='35056'/>
<enum name='CC_LABELATLAS_DEBUG_DRAW' value='0'/>
<enum name='CC_LABELBMFONT_DEBUG_DRAW' value='0'/>
<enum name='CC_MAC_USE_DISPLAY_LINK_THREAD' value='0'/>
<enum name='CC_MAC_USE_MAIN_THREAD' value='2'/>
<enum name='CC_MAC_USE_OWN_THREAD' value='1'/>
<enum name='CC_NODE_RENDER_SUBPIXEL' value='1'/>
<enum name='CC_PVRMIPMAP_MAX' value='16'/>
<enum name='CC_SPRITEBATCHNODE_RENDER_SUBPIXEL' value='1'/>
<enum name='CC_SPRITE_DEBUG_DRAW' value='0'/>
<enum name='CC_TEXTURE_ATLAS_USE_TRIANGLE_STRIP' value='0'/>
<enum name='CC_TEXTURE_ATLAS_USE_VAO' value='1'/>
<enum name='CC_USE_LA88_LABELS' value='1'/>
<enum name='CD_BS_EMPTY' value='0'/>
<enum name='CD_BS_FAILED' value='2'/>
<enum name='CD_BS_LOADED' value='1'/>
<enum name='CD_BUFFERS_INCREMENT' value='16'/>
<enum name='CD_BUFFERS_START' value='64'/>
<enum name='CD_IGNORE_AUDIO_SESSION' value='200211438'/>
<enum name='CD_MUTE' value='267312043'/>
<enum name='CD_NO_SOURCE' value='267313068'/>
<enum name='CD_SAMPLE_RATE_BASIC' value='8000'/>
<enum name='CD_SAMPLE_RATE_DEFAULT' value='44100'/>
<enum name='CD_SAMPLE_RATE_HIGH' value='44100'/>
<enum name='CD_SAMPLE_RATE_LOW' value='16000'/>
<enum name='CD_SAMPLE_RATE_MID' value='22050'/>
<enum name='CD_SOURCE_LIMIT' value='32'/>
<enum name='COCOS2D_VERSION' value='131328'/>
<enum name='HASH_BKT_CAPACITY_THRESH' value='10'/>
<enum name='HASH_BLOOM_SIGNATURE' value='2971803890'/>
<enum name='HASH_INITIAL_NUM_BUCKETS' value='32'/>
<enum name='HASH_INITIAL_NUM_BUCKETS_LOG2' value='5'/>
<enum name='HASH_SIGNATURE' value='2685476833'/>
<enum name='KM_FALSE' value='0'/>
<enum name='KM_GL_MODELVIEW' value='5888'/>
<enum name='KM_GL_PROJECTION' value='5889'/>
<enum name='KM_GL_TEXTURE' value='5890'/>
<enum name='KM_PLANE_BOTTOM' value='2'/>
<enum name='KM_PLANE_FAR' value='5'/>
<enum name='KM_PLANE_LEFT' value='0'/>
<enum name='KM_PLANE_NEAR' value='4'/>
<enum name='KM_PLANE_RIGHT' value='1'/>
<enum name='KM_PLANE_TOP' value='3'/>
<enum name='KM_TRUE' value='1'/>
<enum name='POINT_BEHIND_PLANE' value='1'/>
<enum name='POINT_INFRONT_OF_PLANE' value='0'/>
<enum name='POINT_ON_PLANE' value='2'/>
<enum name='TGA_ERROR_COMPRESSED_FILE' value='5'/>
<enum name='TGA_ERROR_FILE_OPEN' value='1'/>
<enum name='TGA_ERROR_INDEXED_COLOR' value='3'/>
<enum name='TGA_ERROR_MEMORY' value='4'/>
<enum name='TGA_ERROR_READING_FILE' value='2'/>
<enum name='TGA_OK' value='0'/>
<enum name='TMXLayerAttribBase64' value='2'/>
<enum name='TMXLayerAttribGzip' value='4'/>
<enum name='TMXLayerAttribNone' value='1'/>
<enum name='TMXLayerAttribZlib' value='8'/>
<enum name='TMXPropertyLayer' value='2'/>
<enum name='TMXPropertyMap' value='1'/>
<enum name='TMXPropertyNone' value='0'/>
<enum name='TMXPropertyObject' value='4'/>
<enum name='TMXPropertyObjectGroup' value='3'/>
<enum name='TMXPropertyTile' value='5'/>
<enum name='kAMM_FxOnly' value='0'/>
<enum name='kAMM_FxPlusMusic' value='1'/>
<enum name='kAMM_FxPlusMusicIfNoOtherAudio' value='2'/>
<enum name='kAMM_MediaPlayback' value='3'/>
<enum name='kAMM_PlayAndRecord' value='4'/>
<enum name='kAMRBDoNothing' value='0'/>
<enum name='kAMRBStop' value='2'/>
<enum name='kAMRBStopPlay' value='1'/>
<enum name='kAMStateInitialised' value='2'/>
<enum name='kAMStateInitialising' value='1'/>
<enum name='kAMStateUninitialised' value='0'/>
<enum name='kASC_Left' value='0'/>
<enum name='kASC_Right' value='1'/>
<enum name='kCCActionTagInvalid' value='-1'/>
<enum name='kCCDirectorProjection2D' value='0'/>
<enum name='kCCDirectorProjection3D' value='1'/>
<enum name='kCCDirectorProjectionCustom' value='2'/>
<enum name='kCCDirectorProjectionDefault' value='1'/>
<enum name='kCCFlipedAll' value='3758096384'/>
<enum name='kCCFlippedMask' value='536870911'/>
<enum name='kCCImageFormatJPEG' value='0'/>
<enum name='kCCImageFormatJPG' value='0'/>
<enum name='kCCImageFormatPNG' value='1'/>
<enum name='kCCItemSize' value='32'/>
<enum name='kCCLabelAutomaticWidth' value='-1'/>
<enum name='kCCLineBreakModeCharacterWrap' value='1'/>
<enum name='kCCLineBreakModeClip' value='2'/>
<enum name='kCCLineBreakModeHeadTruncation' value='3'/>
<enum name='kCCLineBreakModeMiddleTruncation' value='5'/>
<enum name='kCCLineBreakModeTailTruncation' value='4'/>
<enum name='kCCLineBreakModeWordWrap' value='0'/>
<enum name='kCCMacVersion_10_6' value='168165376'/>
<enum name='kCCMacVersion_10_7' value='168230912'/>
<enum name='kCCMacVersion_10_8' value='168296448'/>
<enum name='kCCMenuHandlerPriority' value='-128'/>
<enum name='kCCMenuStateTrackingTouch' value='1'/>
<enum name='kCCMenuStateWaiting' value='0'/>
<enum name='kCCNodeTagInvalid' value='-1'/>
<enum name='kCCParticleDurationInfinity' value='-1'/>
<enum name='kCCParticleModeGravity' value='0'/>
<enum name='kCCParticleModeRadius' value='1'/>
<enum name='kCCParticleStartRadiusEqualToEndRadius' value='-1'/>
<enum name='kCCParticleStartSizeEqualToEndSize' value='-1'/>
<enum name='kCCPositionTypeFree' value='0'/>
<enum name='kCCPositionTypeGrouped' value='2'/>
<enum name='kCCPositionTypeRelative' value='1'/>
<enum name='kCCPriorityNonSystemMin' value='-2147483647'/>
<enum name='kCCPrioritySystem' value='-2147483648'/>
<enum name='kCCProgressTimerTypeBar' value='1'/>
<enum name='kCCProgressTimerTypeRadial' value='0'/>
<enum name='kCCRepeatForever' value='4294967294'/>
<enum name='kCCResolutionStandard' value='0'/>
<enum name='kCCResolutionUnknown' value='0'/>
<enum name='kCCResolutioniPad' value='3'/>
<enum name='kCCResolutioniPadRetinaDisplay' value='4'/>
<enum name='kCCResolutioniPhone' value='1'/>
<enum name='kCCResolutioniPhoneRetinaDisplay' value='2'/>
<enum name='kCCTMXTileDiagonalFlag' value='536870912'/>
<enum name='kCCTMXTileHorizontalFlag' value='2147483648'/>
<enum name='kCCTMXTileVerticalFlag' value='1073741824'/>
<enum name='kCCTextAlignmentCenter' value='1'/>
<enum name='kCCTextAlignmentLeft' value='0'/>
<enum name='kCCTextAlignmentRight' value='2'/>
<enum name='kCCTexture2DPixelFormat_A8' value='3'/>
<enum name='kCCTexture2DPixelFormat_AI88' value='5'/>
<enum name='kCCTexture2DPixelFormat_Default' value='0'/>
<enum name='kCCTexture2DPixelFormat_I8' value='4'/>
<enum name='kCCTexture2DPixelFormat_PVRTC2' value='9'/>
<enum name='kCCTexture2DPixelFormat_PVRTC4' value='8'/>
<enum name='kCCTexture2DPixelFormat_RGB565' value='2'/>
<enum name='kCCTexture2DPixelFormat_RGB5A1' value='7'/>
<enum name='kCCTexture2DPixelFormat_RGB888' value='1'/>
<enum name='kCCTexture2DPixelFormat_RGBA4444' value='6'/>
<enum name='kCCTexture2DPixelFormat_RGBA8888' value='0'/>
<enum name='kCCTouchBegan' value='0'/>
<enum name='kCCTouchCancelled' value='3'/>
<enum name='kCCTouchEnded' value='2'/>
<enum name='kCCTouchMax' value='4'/>
<enum name='kCCTouchMoved' value='1'/>
<enum name='kCCTouchSelectorAllBits' value='15'/>
<enum name='kCCTouchSelectorBeganBit' value='1'/>
<enum name='kCCTouchSelectorCancelledBit' value='8'/>
<enum name='kCCTouchSelectorEndedBit' value='4'/>
<enum name='kCCTouchSelectorMovedBit' value='2'/>
<enum name='kCCUniformCosTime' value='5'/>
<enum name='kCCUniformMVMatrix' value='1'/>
<enum name='kCCUniformMVPMatrix' value='2'/>
<enum name='kCCUniformPMatrix' value='0'/>
<enum name='kCCUniformRandom01' value='6'/>
<enum name='kCCUniformSampler' value='7'/>
<enum name='kCCUniformSinTime' value='4'/>
<enum name='kCCUniformTime' value='3'/>
<enum name='kCCUniform_MAX' value='8'/>
<enum name='kCCVertexAttribFlag_Color' value='2'/>
<enum name='kCCVertexAttribFlag_None' value='0'/>
<enum name='kCCVertexAttribFlag_PosColorTex' value='7'/>
<enum name='kCCVertexAttribFlag_Position' value='1'/>
<enum name='kCCVertexAttribFlag_TexCoords' value='4'/>
<enum name='kCCVertexAttrib_Color' value='1'/>
<enum name='kCCVertexAttrib_MAX' value='3'/>
<enum name='kCCVertexAttrib_Position' value='0'/>
<enum name='kCCVertexAttrib_TexCoords' value='2'/>
<enum name='kCCVerticalTextAlignmentBottom' value='2'/>
<enum name='kCCVerticalTextAlignmentCenter' value='1'/>
<enum name='kCCVerticalTextAlignmentTop' value='0'/>
<enum name='kCCiOSVersion_4_0' value='67108864'/>
<enum name='kCCiOSVersion_4_0_1' value='67109120'/>
<enum name='kCCiOSVersion_4_1' value='67174400'/>
<enum name='kCCiOSVersion_4_2' value='67239936'/>
<enum name='kCCiOSVersion_4_2_1' value='67240192'/>
<enum name='kCCiOSVersion_4_3' value='67305472'/>
<enum name='kCCiOSVersion_4_3_1' value='67305728'/>
<enum name='kCCiOSVersion_4_3_2' value='67305984'/>
<enum name='kCCiOSVersion_4_3_3' value='67306240'/>
<enum name='kCCiOSVersion_4_3_4' value='67306496'/>
<enum name='kCCiOSVersion_4_3_5' value='67306752'/>
<enum name='kCCiOSVersion_5_0' value='83886080'/>
<enum name='kCCiOSVersion_5_0_1' value='83886336'/>
<enum name='kCCiOSVersion_5_1_0' value='83951616'/>
<enum name='kCCiOSVersion_6_0_0' value='100663296'/>
<enum name='kIT_Exponential' value='2'/>
<enum name='kIT_Linear' value='0'/>
<enum name='kIT_SCurve' value='1'/>
<enum name='kLAS_Init' value='0'/>
<enum name='kLAS_Loaded' value='1'/>
<enum name='kLAS_Paused' value='3'/>
<enum name='kLAS_Playing' value='2'/>
<enum name='kLAS_Stopped' value='4'/>
<enum name='kOrientationDownOver' value='1'/>
<enum name='kOrientationLeftOver' value='0'/>
<enum name='kOrientationRightOver' value='1'/>
<enum name='kOrientationUpOver' value='0'/>
<enum name='kParticleDurationInfinity' value='-1'/>
<enum name='kParticleStartSizeEqualToEndSize' value='-1'/>
<enum name='kPositionTypeFree' value='0'/>
<enum name='kPositionTypeGrouped' value='2'/>
<enum name='kmEpsilon' value='0.015625'/>
<enum name='kmPI' value='3.141592f'/>
<enum name='kmPIOver180' value='0.017453f'/>
<enum name='kmPIUnder180' value='57.295779f'/>
<function name='CCProfilingBeginTimingBlock'>
<arg name='timerName' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CCProfilingEndTimingBlock'>
<arg name='timerName' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CCProfilingResetTimingBlock'>
<arg name='timerName' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CDGetOpenALAudioData'>
<arg name='inFileURL' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='outDataSize' declared_type='ALsizei*' type='^i'/>
<arg name='outDataFormat' declared_type='ALenum*' type='^i'/>
<arg name='outSampleRate' declared_type='ALsizei*' type='^i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='CDloadCafAudioData'>
<arg name='inFileURL' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='outDataSize' declared_type='ALsizei*' type='^i'/>
<arg name='outDataFormat' declared_type='ALenum*' type='^i'/>
<arg name='outSampleRate' declared_type='ALsizei*' type='^i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='CDloadWaveAudioData'>
<arg name='inFileURL' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='outDataSize' declared_type='ALsizei*' type='^i'/>
<arg name='outDataFormat' declared_type='ALenum*' type='^i'/>
<arg name='outSampleRate' declared_type='ALsizei*' type='^i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='CGAffineToGL'>
<arg type64='^{CGAffineTransform=dddddd}' name='t' declared_type='CGAffineTransform*' type='^{CGAffineTransform=ffffff}' const='true'/>
<arg name='m' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='FNTConfigLoadFile'>
<arg name='file' declared_type='NSString*' type='@'/>
<retval declared_type='CCBMFontConfiguration*' type='@'/>
</function>
<function name='FNTConfigRemoveCache'>
<retval declared_type='void' type='v'/>
</function>
<function name='GLToCGAffine'>
<arg name='m' declared_type='GLfloat*' type='^f' const='true'/>
<arg type64='^{CGAffineTransform=dddddd}' name='t' declared_type='CGAffineTransform*' type='^{CGAffineTransform=ffffff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NEON_Matrix4Mul'>
<arg name='a' declared_type='float*' type='^f' const='true'/>
<arg name='b' declared_type='float*' type='^f' const='true'/>
<arg name='output' declared_type='float*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NEON_Matrix4Vector4Mul'>
<arg name='m' declared_type='float*' type='^f' const='true'/>
<arg name='v' declared_type='float*' type='^f' const='true'/>
<arg name='output' declared_type='float*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='base64Decode'>
<arg name='in' declared_type='unsigned char*' type='*'/>
<arg name='inLength' declared_type='unsigned int' type='I'/>
<arg name='out' declared_type='unsigned char**' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='ccArrayAppendArray'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg type64='^{ccArray=QQ^@}' name='plusArr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayAppendArrayWithResize'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg type64='^{ccArray=QQ^@}' name='plusArr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayAppendObject'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg name='object' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayAppendObjectWithResize'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg name='object' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayContainsObject'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg name='object' declared_type='id' type='@'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='ccArrayDoubleCapacity'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayEnsureExtraCapacity'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg type64='Q' name='extra' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayFastRemoveObject'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg name='object' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayFastRemoveObjectAtIndex'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg type64='Q' name='index' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayFree'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayFullRemoveArray'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg type64='^{ccArray=QQ^@}' name='minusArr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayGetIndexOfObject'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg name='object' declared_type='id' type='@'/>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</function>
<function name='ccArrayInsertObjectAtIndex'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg name='object' declared_type='id' type='@'/>
<arg type64='Q' name='index' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayMakeObjectPerformSelectorWithArrayObjects'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg name='sel' declared_type='SEL' type=':'/>
<arg name='object' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayMakeObjectsPerformSelector'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg name='sel' declared_type='SEL' type=':'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayMakeObjectsPerformSelectorWithObject'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg name='sel' declared_type='SEL' type=':'/>
<arg name='object' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayNew'>
<arg type64='Q' name='capacity' declared_type='NSUInteger' type='I'/>
<retval type64='^{ccArray=QQ^@}' declared_type='ccArray*' type='^{ccArray=II^@}'/>
</function>
<function name='ccArrayRemoveAllObjects'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayRemoveArray'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg type64='^{ccArray=QQ^@}' name='minusArr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayRemoveObject'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg name='object' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayRemoveObjectAtIndex'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg type64='Q' name='index' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArrayShrink'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccArraySwapObjectsAtIndexes'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<arg type64='Q' name='index1' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='index2' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCArrayAppendArray'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg type64='^{ccArray=QQ^@}' name='plusArr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCArrayAppendArrayWithResize'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg type64='^{ccArray=QQ^@}' name='plusArr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCArrayAppendValue'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg name='value' declared_type='CCARRAY_ID' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCArrayAppendValueWithResize'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg name='value' declared_type='CCARRAY_ID' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCArrayContainsValue'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg name='value' declared_type='CCARRAY_ID' type='@'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='ccCArrayDoubleCapacity'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCArrayEnsureExtraCapacity'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg type64='Q' name='extra' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCArrayFastRemoveValueAtIndex'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg type64='Q' name='index' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCArrayFree'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCArrayFullRemoveArray'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg type64='^{ccArray=QQ^@}' name='minusArr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCArrayGetIndexOfValue'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg name='value' declared_type='CCARRAY_ID' type='@'/>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</function>
<function name='ccCArrayInsertValueAtIndex'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg name='value' declared_type='CCARRAY_ID' type='@'/>
<arg type64='Q' name='index' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCArrayNew'>
<arg type64='Q' name='capacity' declared_type='NSUInteger' type='I'/>
<retval type64='^{ccArray=QQ^@}' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
</function>
<function name='ccCArrayRemoveAllValues'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCArrayRemoveArray'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg type64='^{ccArray=QQ^@}' name='minusArr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCArrayRemoveValue'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg name='value' declared_type='CCARRAY_ID' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCArrayRemoveValueAtIndex'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg type64='Q' name='index' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccCardinalSplineAt'>
<arg type64='{CGPoint=dd}' name='p0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='p1' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='p2' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='p3' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='d' name='tension' declared_type='CGFloat' type='f'/>
<arg name='t' declared_type='ccTime' type='f'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='ccDrawCardinalSpline'>
<arg name='config' declared_type='CCPointArray*' type='@'/>
<arg type64='d' name='tension' declared_type='CGFloat' type='f'/>
<arg type64='Q' name='segments' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccDrawCatmullRom'>
<arg name='arrayOfControlPoints' declared_type='CCPointArray*' type='@'/>
<arg type64='Q' name='segments' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccDrawCircle'>
<arg type64='{CGPoint=dd}' name='center' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='radius' declared_type='float' type='f'/>
<arg name='angle' declared_type='float' type='f'/>
<arg type64='Q' name='segments' declared_type='NSUInteger' type='I'/>
<arg name='drawLineToCenter' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccDrawColor4B'>
<arg name='r' declared_type='GLubyte' type='C'/>
<arg name='g' declared_type='GLubyte' type='C'/>
<arg name='b' declared_type='GLubyte' type='C'/>
<arg name='a' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccDrawColor4F'>
<arg name='r' declared_type='GLfloat' type='f'/>
<arg name='g' declared_type='GLfloat' type='f'/>
<arg name='b' declared_type='GLfloat' type='f'/>
<arg name='a' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccDrawCubicBezier'>
<arg type64='{CGPoint=dd}' name='origin' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='control1' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='control2' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='destination' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='Q' name='segments' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccDrawLine'>
<arg type64='{CGPoint=dd}' name='origin' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='destination' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccDrawPoint'>
<arg type64='{CGPoint=dd}' name='point' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccDrawPoints'>
<arg type64='^{CGPoint=dd}' name='points' declared_type='CGPoint*' type='^{CGPoint=ff}' const='true'/>
<arg type64='Q' name='numberOfPoints' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccDrawPoly'>
<arg type64='^{CGPoint=dd}' name='vertices' declared_type='CGPoint*' type='^{CGPoint=ff}' const='true'/>
<arg type64='Q' name='numOfVertices' declared_type='NSUInteger' type='I'/>
<arg name='closePolygon' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccDrawQuadBezier'>
<arg type64='{CGPoint=dd}' name='origin' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='control' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='destination' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='Q' name='segments' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccDrawRect'>
<arg type64='{CGPoint=dd}' name='origin' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='destination' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccDrawSolidPoly'>
<arg type64='^{CGPoint=dd}' name='poli' declared_type='CGPoint*' type='^{CGPoint=ff}' const='true'/>
<arg type64='Q' name='numberOfPoints' declared_type='NSUInteger' type='I'/>
<arg name='color' declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccDrawSolidRect'>
<arg type64='{CGPoint=dd}' name='origin' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='destination' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='color' declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccGLBindTexture2D'>
<arg name='textureId' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccGLBindTexture2DN'>
<arg name='textureUnit' declared_type='GLuint' type='I'/>
<arg name='textureId' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccGLBindVAO'>
<arg name='vaoId' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccGLBlendFunc'>
<arg name='sfactor' declared_type='GLenum' type='I'/>
<arg name='dfactor' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccGLBlendResetToCache'>
<retval declared_type='void' type='v'/>
</function>
<function name='ccGLDeleteProgram'>
<arg name='program' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccGLDeleteTexture'>
<arg name='textureId' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccGLEnable'>
<arg name='flags' declared_type='ccGLServerState' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccGLEnableVertexAttribs'>
<arg name='flags' declared_type='unsigned int' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccGLInvalidateStateCache'>
<retval declared_type='void' type='v'/>
</function>
<function name='ccGLUniformModelViewProjectionMatrix'>
<arg name='program' declared_type='CCGLProgram*' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccGLUseProgram'>
<arg name='program' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccInflateCCZFile'>
<arg name='filename' declared_type='char*' type='*' const='true'/>
<arg name='out' declared_type='unsigned char**' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='ccInflateGZipFile'>
<arg name='filename' declared_type='char*' type='*' const='true'/>
<arg name='out' declared_type='unsigned char**' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='ccInflateMemory'>
<arg name='in' declared_type='unsigned char*' type='*'/>
<arg name='inLength' declared_type='unsigned int' type='I'/>
<arg name='out' declared_type='unsigned char**' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='ccInflateMemoryWithHint'>
<arg name='in' declared_type='unsigned char*' type='*'/>
<arg name='inLength' declared_type='unsigned int' type='I'/>
<arg name='out' declared_type='unsigned char**' type='^*'/>
<arg name='outLenghtHint' declared_type='unsigned int' type='I'/>
<retval declared_type='int' type='i'/>
</function>
<function name='ccLoadFileIntoMemory'>
<arg name='filename' declared_type='char*' type='*' const='true'/>
<arg name='out' declared_type='unsigned char**' type='^*'/>
<retval type64='q' declared_type='NSInteger' type='i'/>
</function>
<function name='ccNextPOT'>
<arg type64='Q' name='value' declared_type='unsigned long' type='L'/>
<retval type64='Q' declared_type='unsigned long' type='L'/>
</function>
<function name='ccPointSize'>
<arg name='pointSize' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccSetProjectionMatrixDirty'>
<retval declared_type='void' type='v'/>
</function>
<function name='ccVertexLineIntersect'>
<arg name='Ax' declared_type='float' type='f'/>
<arg name='Ay' declared_type='float' type='f'/>
<arg name='Bx' declared_type='float' type='f'/>
<arg name='By' declared_type='float' type='f'/>
<arg name='Cx' declared_type='float' type='f'/>
<arg name='Cy' declared_type='float' type='f'/>
<arg name='Dx' declared_type='float' type='f'/>
<arg name='Dy' declared_type='float' type='f'/>
<arg name='T' declared_type='float*' type='^f'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='ccVertexLineToPolygon'>
<arg type64='^{CGPoint=dd}' name='points' declared_type='CGPoint*' type='^{CGPoint=ff}'/>
<arg name='stroke' declared_type='float' type='f'/>
<arg name='vertices' declared_type='ccVertex2F*' type='^{_ccVertex2F=ff}'/>
<arg type64='Q' name='offset' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='nuPoints' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cc_insertionSort'>
<arg type64='^{ccArray=QQ^@}' name='arr' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg name='comparator' declared_type='cc_comparator' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cc_mergesortL'>
<arg type64='^{ccArray=QQ^@}' name='array' declared_type='ccCArray*' type='^{ccArray=II^@}'/>
<arg type64='Q' name='width' declared_type='size_t' type='L'/>
<arg name='comparator' declared_type='cc_comparator' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='int' type='i'/>
</function>
<function name='cc_pointerswap'>
<arg name='a' declared_type='void*' type='^v'/>
<arg name='b' declared_type='void*' type='^v'/>
<arg type64='Q' name='width' declared_type='size_t' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='ccc3'>
<arg name='r' declared_type='GLubyte' type='C' const='true'/>
<arg name='g' declared_type='GLubyte' type='C' const='true'/>
<arg name='b' declared_type='GLubyte' type='C' const='true'/>
<retval declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
</function>
<function inline='true' name='ccc4'>
<arg name='r' declared_type='GLubyte' type='C' const='true'/>
<arg name='g' declared_type='GLubyte' type='C' const='true'/>
<arg name='b' declared_type='GLubyte' type='C' const='true'/>
<arg name='o' declared_type='GLubyte' type='C' const='true'/>
<retval declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
</function>
<function inline='true' name='ccc4BFromccc4F'>
<arg name='c' declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
<retval declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
</function>
<function inline='true' name='ccc4FEqual'>
<arg name='a' declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
<arg name='b' declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function inline='true' name='ccc4FFromccc3B'>
<arg name='c' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<retval declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
</function>
<function inline='true' name='ccc4FFromccc4B'>
<arg name='c' declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
<retval declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
</function>
<function inline='true' name='ccc4f'>
<arg name='r' declared_type='GLfloat' type='f' const='true'/>
<arg name='g' declared_type='GLfloat' type='f' const='true'/>
<arg name='b' declared_type='GLfloat' type='f' const='true'/>
<arg name='a' declared_type='GLfloat' type='f' const='true'/>
<retval declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
</function>
<function inline='true' name='ccg'>
<arg type64='q' name='x' declared_type='NSInteger' type='i' const='true'/>
<arg type64='q' name='y' declared_type='NSInteger' type='i' const='true'/>
<retval type64='{_ccGridSize=qq}' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
</function>
<function inline='true' name='ccp'>
<arg type64='d' name='x' declared_type='CGFloat' type='f'/>
<arg type64='d' name='y' declared_type='CGFloat' type='f'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='ccpAdd'>
<arg type64='{CGPoint=dd}' name='v1' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<arg type64='{CGPoint=dd}' name='v2' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='ccpAngle'>
<arg type64='{CGPoint=dd}' name='a' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='b' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='float' type='f'/>
</function>
<function name='ccpAngleSigned'>
<arg type64='{CGPoint=dd}' name='a' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='b' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='float' type='f'/>
</function>
<function name='ccpClamp'>
<arg type64='{CGPoint=dd}' name='p' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='from' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='to' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='ccpCompMult'>
<arg type64='{CGPoint=dd}' name='a' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='b' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='ccpCompOp'>
<arg type64='{CGPoint=dd}' name='p' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='opFunc' declared_type='float (*)(float)' function_pointer='true' type='^?'>
<arg declared_type='float' type='f'/>
<retval declared_type='float' type='f'/>
</arg>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='ccpCross'>
<arg type64='{CGPoint=dd}' name='v1' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<arg type64='{CGPoint=dd}' name='v2' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='d' declared_type='CGFloat' type='f'/>
</function>
<function name='ccpDistance'>
<arg type64='{CGPoint=dd}' name='v1' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<arg type64='{CGPoint=dd}' name='v2' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='d' declared_type='CGFloat' type='f'/>
</function>
<function inline='true' name='ccpDistanceSQ'>
<arg type64='{CGPoint=dd}' name='p1' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<arg type64='{CGPoint=dd}' name='p2' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='d' declared_type='CGFloat' type='f'/>
</function>
<function inline='true' name='ccpDot'>
<arg type64='{CGPoint=dd}' name='v1' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<arg type64='{CGPoint=dd}' name='v2' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='d' declared_type='CGFloat' type='f'/>
</function>
<function name='ccpForAngle'>
<arg type64='d' name='a' declared_type='CGFloat' type='f' const='true'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='ccpFromSize'>
<arg type64='{CGSize=dd}' name='s' declared_type='CGSize' type='{CGSize=ff}'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='ccpFuzzyEqual'>
<arg type64='{CGPoint=dd}' name='a' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='b' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='variance' declared_type='float' type='f'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='ccpIntersectPoint'>
<arg type64='{CGPoint=dd}' name='A' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='B' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='C' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='D' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='ccpLength'>
<arg type64='{CGPoint=dd}' name='v' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='d' declared_type='CGFloat' type='f'/>
</function>
<function inline='true' name='ccpLengthSQ'>
<arg type64='{CGPoint=dd}' name='v' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='d' declared_type='CGFloat' type='f'/>
</function>
<function name='ccpLerp'>
<arg type64='{CGPoint=dd}' name='a' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='b' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='alpha' declared_type='float' type='f'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='ccpLineIntersect'>
<arg type64='{CGPoint=dd}' name='p1' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='p2' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='p3' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='p4' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='s' declared_type='float*' type='^f'/>
<arg name='t' declared_type='float*' type='^f'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function inline='true' name='ccpMidpoint'>
<arg type64='{CGPoint=dd}' name='v1' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<arg type64='{CGPoint=dd}' name='v2' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='ccpMult'>
<arg type64='{CGPoint=dd}' name='v' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<arg type64='d' name='s' declared_type='CGFloat' type='f' const='true'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='ccpNeg'>
<arg type64='{CGPoint=dd}' name='v' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='ccpNormalize'>
<arg type64='{CGPoint=dd}' name='v' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='ccpPerp'>
<arg type64='{CGPoint=dd}' name='v' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='ccpProject'>
<arg type64='{CGPoint=dd}' name='v1' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<arg type64='{CGPoint=dd}' name='v2' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='ccpRPerp'>
<arg type64='{CGPoint=dd}' name='v' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='ccpRotate'>
<arg type64='{CGPoint=dd}' name='v1' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<arg type64='{CGPoint=dd}' name='v2' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='ccpRotateByAngle'>
<arg type64='{CGPoint=dd}' name='v' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='pivot' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='angle' declared_type='float' type='f'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='ccpSegmentIntersect'>
<arg type64='{CGPoint=dd}' name='A' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='B' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='C' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='D' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function inline='true' name='ccpSub'>
<arg type64='{CGPoint=dd}' name='v1' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<arg type64='{CGPoint=dd}' name='v2' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='ccpToAngle'>
<arg type64='{CGPoint=dd}' name='v' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='d' declared_type='CGFloat' type='f'/>
</function>
<function inline='true' name='ccpUnrotate'>
<arg type64='{CGPoint=dd}' name='v1' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<arg type64='{CGPoint=dd}' name='v2' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='clampf'>
<arg name='value' declared_type='float' type='f'/>
<arg name='min_inclusive' declared_type='float' type='f'/>
<arg name='max_inclusive' declared_type='float' type='f'/>
<retval declared_type='float' type='f'/>
</function>
<function name='cocos2dVersion'>
<retval declared_type='NSString*' type='@'/>
</function>
<function name='kmAABBAssign'>
<arg name='pOut' declared_type='kmAABB*' type='^{kmAABB={kmVec3=fff}{kmVec3=fff}}'/>
<arg name='pIn' declared_type='kmAABB*' type='^{kmAABB={kmVec3=fff}{kmVec3=fff}}' const='true'/>
<retval declared_type='kmAABB*' type='^{kmAABB={kmVec3=fff}{kmVec3=fff}}' const='true'/>
</function>
<function name='kmAABBContainsPoint'>
<arg name='pPoint' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='pBox' declared_type='kmAABB*' type='^{kmAABB={kmVec3=fff}{kmVec3=fff}}' const='true'/>
<retval declared_type='int' type='i' const='true'/>
</function>
<function name='kmAABBScale'>
<arg name='pOut' declared_type='kmAABB*' type='^{kmAABB={kmVec3=fff}{kmVec3=fff}}'/>
<arg name='pIn' declared_type='kmAABB*' type='^{kmAABB={kmVec3=fff}{kmVec3=fff}}' const='true'/>
<arg name='s' declared_type='float' type='f'/>
<retval declared_type='kmAABB*' type='^{kmAABB={kmVec3=fff}{kmVec3=fff}}' const='true'/>
</function>
<function name='kmAlmostEqual'>
<arg name='lhs' declared_type='float' type='f'/>
<arg name='rhs' declared_type='float' type='f'/>
<retval declared_type='unsigned char' type='C'/>
</function>
<function name='kmDegreesToRadians'>
<arg name='degrees' declared_type='float' type='f'/>
<retval declared_type='float' type='f'/>
</function>
<function name='kmGLFreeAll'>
<retval declared_type='void' type='v'/>
</function>
<function name='kmGLGetMatrix'>
<arg name='mode' declared_type='kmGLEnum' type='I'/>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='kmGLLoadIdentity'>
<retval declared_type='void' type='v'/>
</function>
<function name='kmGLLoadMatrix'>
<arg name='pIn' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='kmGLMatrixMode'>
<arg name='mode' declared_type='kmGLEnum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='kmGLMultMatrix'>
<arg name='pIn' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='kmGLPopMatrix'>
<retval declared_type='void' type='v'/>
</function>
<function name='kmGLPushMatrix'>
<retval declared_type='void' type='v'/>
</function>
<function name='kmGLRotatef'>
<arg name='angle' declared_type='float' type='f'/>
<arg name='x' declared_type='float' type='f'/>
<arg name='y' declared_type='float' type='f'/>
<arg name='z' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='kmGLScalef'>
<arg name='x' declared_type='float' type='f'/>
<arg name='y' declared_type='float' type='f'/>
<arg name='z' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='kmGLTranslatef'>
<arg name='x' declared_type='float' type='f'/>
<arg name='y' declared_type='float' type='f'/>
<arg name='z' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='kmMat3Adjugate'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='pIn' declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3AreEqual'>
<arg name='pM1' declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<arg name='pM2' declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<retval declared_type='int' type='i' const='true'/>
</function>
<function name='kmMat3Assign'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='pIn' declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3Determinant'>
<arg name='pIn' declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<retval declared_type='float' type='f' const='true'/>
</function>
<function name='kmMat3Fill'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='pMat' declared_type='float*' type='^f' const='true'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3Identity'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3Inverse'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='pDeterminate' declared_type='float' type='f' const='true'/>
<arg name='pM' declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3IsIdentity'>
<arg name='pIn' declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<retval declared_type='int' type='i' const='true'/>
</function>
<function name='kmMat3Multiply'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='pM1' declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<arg name='pM2' declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3Rotation'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='radians' declared_type='float' type='f' const='true'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3RotationAxisAngle'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='axis' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='radians' declared_type='float' type='f'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3RotationQuaternion'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='pIn' declared_type='struct kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3RotationToAxisAngle'>
<arg name='pAxis' declared_type='struct kmVec3*' type='^{kmVec3=fff}'/>
<arg name='radians' declared_type='float*' type='^f'/>
<arg name='pIn' declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<retval declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
</function>
<function name='kmMat3RotationX'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='radians' declared_type='float' type='f' const='true'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3RotationY'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='radians' declared_type='float' type='f' const='true'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3RotationZ'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='radians' declared_type='float' type='f' const='true'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3ScalarMultiply'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='pM' declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<arg name='pFactor' declared_type='float' type='f' const='true'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3Scaling'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='x' declared_type='float' type='f' const='true'/>
<arg name='y' declared_type='float' type='f' const='true'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3Translation'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='x' declared_type='float' type='f' const='true'/>
<arg name='y' declared_type='float' type='f' const='true'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat3Transpose'>
<arg name='pOut' declared_type='kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='pIn' declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<retval declared_type='kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat4AreEqual'>
<arg name='pM1' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<arg name='pM2' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='int' type='i' const='true'/>
</function>
<function name='kmMat4Assign'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='pIn' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4ExtractPlane'>
<arg name='pOut' declared_type='struct kmPlane*' type='^{kmPlane=ffff}'/>
<arg name='pIn' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<arg name='plane' declared_type='unsigned int' type='I' const='true'/>
<retval declared_type='struct kmPlane*' type='^{kmPlane=ffff}' const='true'/>
</function>
<function name='kmMat4ExtractRotation'>
<arg name='pOut' declared_type='struct kmMat3*' type='^{kmMat3=[9f]}'/>
<arg name='pIn' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='struct kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
</function>
<function name='kmMat4Fill'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='pMat' declared_type='float*' type='^f' const='true'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4GetForwardVec3'>
<arg name='pOut' declared_type='struct kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pIn' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
</function>
<function name='kmMat4GetRightVec3'>
<arg name='pOut' declared_type='struct kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pIn' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
</function>
<function name='kmMat4GetUpVec3'>
<arg name='pOut' declared_type='struct kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pIn' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
</function>
<function name='kmMat4Identity'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4Inverse'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='pM' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4IsIdentity'>
<arg name='pIn' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='int' type='i' const='true'/>
</function>
<function name='kmMat4LookAt'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='pEye' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='pCenter' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='pUp' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4Multiply'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='pM1' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<arg name='pM2' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4OrthographicProjection'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='left' declared_type='float' type='f'/>
<arg name='right' declared_type='float' type='f'/>
<arg name='bottom' declared_type='float' type='f'/>
<arg name='top' declared_type='float' type='f'/>
<arg name='nearVal' declared_type='float' type='f'/>
<arg name='farVal' declared_type='float' type='f'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4PerspectiveProjection'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='fovY' declared_type='float' type='f'/>
<arg name='aspect' declared_type='float' type='f'/>
<arg name='zNear' declared_type='float' type='f'/>
<arg name='zFar' declared_type='float' type='f'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4RotationAxisAngle'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='axis' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='radians' declared_type='float' type='f'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4RotationPitchYawRoll'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='pitch' declared_type='float' type='f' const='true'/>
<arg name='yaw' declared_type='float' type='f' const='true'/>
<arg name='roll' declared_type='float' type='f' const='true'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4RotationQuaternion'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='pQ' declared_type='struct kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4RotationToAxisAngle'>
<arg name='pAxis' declared_type='struct kmVec3*' type='^{kmVec3=fff}'/>
<arg name='radians' declared_type='float*' type='^f'/>
<arg name='pIn' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
</function>
<function name='kmMat4RotationTranslation'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='rotation' declared_type='struct kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<arg name='translation' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4RotationX'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='radians' declared_type='float' type='f' const='true'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4RotationY'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='radians' declared_type='float' type='f' const='true'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4RotationZ'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='radians' declared_type='float' type='f' const='true'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4Scaling'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='x' declared_type='float' type='f' const='true'/>
<arg name='y' declared_type='float' type='f' const='true'/>
<arg name='z' declared_type='float' type='f' const='true'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4Translation'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='x' declared_type='float' type='f' const='true'/>
<arg name='y' declared_type='float' type='f' const='true'/>
<arg name='z' declared_type='float' type='f' const='true'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmMat4Transpose'>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<arg name='pIn' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
</function>
<function name='kmPlaneClassifyPoint'>
<arg name='pIn' declared_type='kmPlane*' type='^{kmPlane=ffff}' const='true'/>
<arg name='pP' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='POINT_CLASSIFICATION' type='i' const='true'/>
</function>
<function name='kmPlaneDot'>
<arg name='pP' declared_type='kmPlane*' type='^{kmPlane=ffff}' const='true'/>
<arg name='pV' declared_type='struct kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<retval declared_type='float' type='f' const='true'/>
</function>
<function name='kmPlaneDotCoord'>
<arg name='pP' declared_type='kmPlane*' type='^{kmPlane=ffff}' const='true'/>
<arg name='pV' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='float' type='f' const='true'/>
</function>
<function name='kmPlaneDotNormal'>
<arg name='pP' declared_type='kmPlane*' type='^{kmPlane=ffff}' const='true'/>
<arg name='pV' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='float' type='f' const='true'/>
</function>
<function name='kmPlaneFromPointNormal'>
<arg name='pOut' declared_type='kmPlane*' type='^{kmPlane=ffff}'/>
<arg name='pPoint' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='pNormal' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='kmPlane*' type='^{kmPlane=ffff}' const='true'/>
</function>
<function name='kmPlaneFromPoints'>
<arg name='pOut' declared_type='kmPlane*' type='^{kmPlane=ffff}'/>
<arg name='p1' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='p2' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='p3' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='kmPlane*' type='^{kmPlane=ffff}' const='true'/>
</function>
<function name='kmPlaneIntersectLine'>
<arg name='pOut' declared_type='struct kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pP' declared_type='kmPlane*' type='^{kmPlane=ffff}' const='true'/>
<arg name='pV1' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='pV2' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
</function>
<function name='kmPlaneNormalize'>
<arg name='pOut' declared_type='kmPlane*' type='^{kmPlane=ffff}'/>
<arg name='pP' declared_type='kmPlane*' type='^{kmPlane=ffff}' const='true'/>
<retval declared_type='kmPlane*' type='^{kmPlane=ffff}' const='true'/>
</function>
<function name='kmPlaneScale'>
<arg name='pOut' declared_type='kmPlane*' type='^{kmPlane=ffff}'/>
<arg name='pP' declared_type='kmPlane*' type='^{kmPlane=ffff}' const='true'/>
<arg name='s' declared_type='float' type='f'/>
<retval declared_type='kmPlane*' type='^{kmPlane=ffff}' const='true'/>
</function>
<function name='kmQuaternionAdd'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<arg name='pQ1' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<arg name='pQ2' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
</function>
<function name='kmQuaternionAssign'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<arg name='pIn' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
</function>
<function name='kmQuaternionConjugate'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<arg name='pIn' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
</function>
<function name='kmQuaternionDot'>
<arg name='q1' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<arg name='q2' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<retval declared_type='float' type='f' const='true'/>
</function>
<function name='kmQuaternionExp'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<arg name='pIn' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
</function>
<function name='kmQuaternionIdentity'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
</function>
<function name='kmQuaternionInverse'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<arg name='pIn' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
</function>
<function name='kmQuaternionIsIdentity'>
<arg name='pIn' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<retval declared_type='int' type='i'/>
</function>
<function name='kmQuaternionLength'>
<arg name='pIn' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<retval declared_type='float' type='f'/>
</function>
<function name='kmQuaternionLengthSq'>
<arg name='pIn' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<retval declared_type='float' type='f'/>
</function>
<function name='kmQuaternionLn'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<arg name='pIn' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
</function>
<function name='kmQuaternionMultiply'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<arg name='q1' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<arg name='q2' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
</function>
<function name='kmQuaternionMultiplyVec3'>
<arg name='pOut' declared_type='struct kmVec3*' type='^{kmVec3=fff}'/>
<arg name='q' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<arg name='v' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='struct kmVec3*' type='^{kmVec3=fff}'/>
</function>
<function name='kmQuaternionNormalize'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<arg name='pIn' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
</function>
<function name='kmQuaternionRotationAxis'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<arg name='pV' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='angle' declared_type='float' type='f'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
</function>
<function name='kmQuaternionRotationBetweenVec3'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<arg name='vec1' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='vec2' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='fallback' declared_type='struct kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
</function>
<function name='kmQuaternionRotationMatrix'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<arg name='pIn' declared_type='struct kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
</function>
<function name='kmQuaternionRotationYawPitchRoll'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<arg name='yaw' declared_type='float' type='f'/>
<arg name='pitch' declared_type='float' type='f'/>
<arg name='roll' declared_type='float' type='f'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
</function>
<function name='kmQuaternionScale'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<arg name='pIn' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<arg name='s' declared_type='float' type='f'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
</function>
<function name='kmQuaternionSlerp'>
<arg name='pOut' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
<arg name='q1' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<arg name='q2' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<arg name='t' declared_type='float' type='f'/>
<retval declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}'/>
</function>
<function name='kmQuaternionToAxisAngle'>
<arg name='pIn' declared_type='kmQuaternion*' type='^{kmQuaternion=ffff}' const='true'/>
<arg name='pVector' declared_type='struct kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pAngle' declared_type='float*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='kmRadiansToDegrees'>
<arg name='radians' declared_type='float' type='f'/>
<retval declared_type='float' type='f'/>
</function>
<function name='kmRay2Fill'>
<arg name='ray' declared_type='kmRay2*' type='^{kmRay2={kmVec2=ff}{kmVec2=ff}}'/>
<arg name='px' declared_type='float' type='f'/>
<arg name='py' declared_type='float' type='f'/>
<arg name='vx' declared_type='float' type='f'/>
<arg name='vy' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='kmRay2IntersectCircle'>
<arg name='ray' declared_type='kmRay2*' type='^{kmRay2={kmVec2=ff}{kmVec2=ff}}' const='true'/>
<arg name='centre' declared_type='kmVec2' type='{kmVec2=ff}' const='true'/>
<arg name='radius' declared_type='float' type='f' const='true'/>
<arg name='intersection' declared_type='kmVec2*' type='^{kmVec2=ff}'/>
<retval declared_type='unsigned char' type='C'/>
</function>
<function name='kmRay2IntersectLineSegment'>
<arg name='ray' declared_type='kmRay2*' type='^{kmRay2={kmVec2=ff}{kmVec2=ff}}' const='true'/>
<arg name='p1' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<arg name='p2' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<arg name='intersection' declared_type='kmVec2*' type='^{kmVec2=ff}'/>
<retval declared_type='unsigned char' type='C'/>
</function>
<function name='kmRay2IntersectTriangle'>
<arg name='ray' declared_type='kmRay2*' type='^{kmRay2={kmVec2=ff}{kmVec2=ff}}' const='true'/>
<arg name='p1' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<arg name='p2' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<arg name='p3' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<arg name='intersection' declared_type='kmVec2*' type='^{kmVec2=ff}'/>
<arg name='normal_out' declared_type='kmVec2*' type='^{kmVec2=ff}'/>
<retval declared_type='unsigned char' type='C'/>
</function>
<function name='kmSQR'>
<arg name='s' declared_type='float' type='f'/>
<retval declared_type='float' type='f'/>
</function>
<function name='kmVec2Add'>
<arg name='pOut' declared_type='kmVec2*' type='^{kmVec2=ff}'/>
<arg name='pV1' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<arg name='pV2' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<retval declared_type='kmVec2*' type='^{kmVec2=ff}'/>
</function>
<function name='kmVec2AreEqual'>
<arg name='p1' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<arg name='p2' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<retval declared_type='int' type='i'/>
</function>
<function name='kmVec2Dot'>
<arg name='pV1' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<arg name='pV2' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<retval declared_type='float' type='f'/>
</function>
<function name='kmVec2Fill'>
<arg name='pOut' declared_type='kmVec2*' type='^{kmVec2=ff}'/>
<arg name='x' declared_type='float' type='f'/>
<arg name='y' declared_type='float' type='f'/>
<retval declared_type='kmVec2*' type='^{kmVec2=ff}'/>
</function>
<function name='kmVec2Length'>
<arg name='pIn' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<retval declared_type='float' type='f'/>
</function>
<function name='kmVec2LengthSq'>
<arg name='pIn' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<retval declared_type='float' type='f'/>
</function>
<function name='kmVec2Normalize'>
<arg name='pOut' declared_type='kmVec2*' type='^{kmVec2=ff}'/>
<arg name='pIn' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<retval declared_type='kmVec2*' type='^{kmVec2=ff}'/>
</function>
<function name='kmVec2Scale'>
<arg name='pOut' declared_type='kmVec2*' type='^{kmVec2=ff}'/>
<arg name='pIn' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<arg name='s' declared_type='float' type='f' const='true'/>
<retval declared_type='kmVec2*' type='^{kmVec2=ff}'/>
</function>
<function name='kmVec2Subtract'>
<arg name='pOut' declared_type='kmVec2*' type='^{kmVec2=ff}'/>
<arg name='pV1' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<arg name='pV2' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<retval declared_type='kmVec2*' type='^{kmVec2=ff}'/>
</function>
<function name='kmVec2Transform'>
<arg name='pOut' declared_type='kmVec2*' type='^{kmVec2=ff}'/>
<arg name='pV1' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<arg name='pM' declared_type='struct kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<retval declared_type='kmVec2*' type='^{kmVec2=ff}'/>
</function>
<function name='kmVec2TransformCoord'>
<arg name='pOut' declared_type='kmVec2*' type='^{kmVec2=ff}'/>
<arg name='pV' declared_type='kmVec2*' type='^{kmVec2=ff}' const='true'/>
<arg name='pM' declared_type='struct kmMat3*' type='^{kmMat3=[9f]}' const='true'/>
<retval declared_type='kmVec2*' type='^{kmVec2=ff}'/>
</function>
<function name='kmVec3Add'>
<arg name='pOut' declared_type='kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pV1' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='pV2' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='kmVec3*' type='^{kmVec3=fff}'/>
</function>
<function name='kmVec3AreEqual'>
<arg name='p1' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='p2' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='int' type='i'/>
</function>
<function name='kmVec3Assign'>
<arg name='pOut' declared_type='kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pIn' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='kmVec3*' type='^{kmVec3=fff}'/>
</function>
<function name='kmVec3Cross'>
<arg name='pOut' declared_type='kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pV1' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='pV2' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='kmVec3*' type='^{kmVec3=fff}'/>
</function>
<function name='kmVec3Dot'>
<arg name='pV1' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='pV2' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='float' type='f'/>
</function>
<function name='kmVec3Fill'>
<arg name='pOut' declared_type='kmVec3*' type='^{kmVec3=fff}'/>
<arg name='x' declared_type='float' type='f'/>
<arg name='y' declared_type='float' type='f'/>
<arg name='z' declared_type='float' type='f'/>
<retval declared_type='kmVec3*' type='^{kmVec3=fff}'/>
</function>
<function name='kmVec3InverseTransform'>
<arg name='pOut' declared_type='kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pV' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='pM' declared_type='struct kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='kmVec3*' type='^{kmVec3=fff}'/>
</function>
<function name='kmVec3InverseTransformNormal'>
<arg name='pOut' declared_type='kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pVect' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='pM' declared_type='struct kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='kmVec3*' type='^{kmVec3=fff}'/>
</function>
<function name='kmVec3Length'>
<arg name='pIn' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='float' type='f'/>
</function>
<function name='kmVec3LengthSq'>
<arg name='pIn' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='float' type='f'/>
</function>
<function name='kmVec3Normalize'>
<arg name='pOut' declared_type='kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pIn' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='kmVec3*' type='^{kmVec3=fff}'/>
</function>
<function name='kmVec3Scale'>
<arg name='pOut' declared_type='kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pIn' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='s' declared_type='float' type='f' const='true'/>
<retval declared_type='kmVec3*' type='^{kmVec3=fff}'/>
</function>
<function name='kmVec3Subtract'>
<arg name='pOut' declared_type='kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pV1' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='pV2' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<retval declared_type='kmVec3*' type='^{kmVec3=fff}'/>
</function>
<function name='kmVec3Transform'>
<arg name='pOut' declared_type='kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pV1' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='pM' declared_type='struct kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='kmVec3*' type='^{kmVec3=fff}'/>
</function>
<function name='kmVec3TransformCoord'>
<arg name='pOut' declared_type='kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pV' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='pM' declared_type='struct kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='kmVec3*' type='^{kmVec3=fff}'/>
</function>
<function name='kmVec3TransformNormal'>
<arg name='pOut' declared_type='kmVec3*' type='^{kmVec3=fff}'/>
<arg name='pV' declared_type='kmVec3*' type='^{kmVec3=fff}' const='true'/>
<arg name='pM' declared_type='struct kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='kmVec3*' type='^{kmVec3=fff}'/>
</function>
<function name='kmVec3Zero'>
<arg name='pOut' declared_type='kmVec3*' type='^{kmVec3=fff}'/>
<retval declared_type='kmVec3*' type='^{kmVec3=fff}'/>
</function>
<function name='kmVec4Add'>
<arg name='pOut' declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
<arg name='pV1' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<arg name='pV2' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<retval declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
</function>
<function name='kmVec4AreEqual'>
<arg name='p1' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<arg name='p2' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<retval declared_type='int' type='i'/>
</function>
<function name='kmVec4Assign'>
<arg name='pOut' declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
<arg name='pIn' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<retval declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
</function>
<function name='kmVec4Dot'>
<arg name='pV1' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<arg name='pV2' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<retval declared_type='float' type='f'/>
</function>
<function name='kmVec4Fill'>
<arg name='pOut' declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
<arg name='x' declared_type='float' type='f'/>
<arg name='y' declared_type='float' type='f'/>
<arg name='z' declared_type='float' type='f'/>
<arg name='w' declared_type='float' type='f'/>
<retval declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
</function>
<function name='kmVec4Length'>
<arg name='pIn' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<retval declared_type='float' type='f'/>
</function>
<function name='kmVec4LengthSq'>
<arg name='pIn' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<retval declared_type='float' type='f'/>
</function>
<function name='kmVec4Lerp'>
<arg name='pOut' declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
<arg name='pV1' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<arg name='pV2' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<arg name='t' declared_type='float' type='f'/>
<retval declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
</function>
<function name='kmVec4Normalize'>
<arg name='pOut' declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
<arg name='pIn' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<retval declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
</function>
<function name='kmVec4Scale'>
<arg name='pOut' declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
<arg name='pIn' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<arg name='s' declared_type='float' type='f' const='true'/>
<retval declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
</function>
<function name='kmVec4Subtract'>
<arg name='pOut' declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
<arg name='pV1' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<arg name='pV2' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<retval declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
</function>
<function name='kmVec4Transform'>
<arg name='pOut' declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
<arg name='pV' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<arg name='pM' declared_type='struct kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
</function>
<function name='kmVec4TransformArray'>
<arg name='pOut' declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
<arg name='outStride' declared_type='unsigned int' type='I'/>
<arg name='pV' declared_type='kmVec4*' type='^{kmVec4=ffff}' const='true'/>
<arg name='vStride' declared_type='unsigned int' type='I'/>
<arg name='pM' declared_type='struct kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<arg name='count' declared_type='unsigned int' type='I'/>
<retval declared_type='kmVec4*' type='^{kmVec4=ffff}'/>
</function>
<function name='km_mat4_stack_initialize'>
<arg name='stack' declared_type='km_mat4_stack*' type='^{km_mat4_stack=ii^{kmMat4}^{kmMat4}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='km_mat4_stack_pop'>
<arg name='stack' declared_type='km_mat4_stack*' type='^{km_mat4_stack=ii^{kmMat4}^{kmMat4}}'/>
<arg name='pOut' declared_type='kmMat4*' type='^{kmMat4=[16f]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='km_mat4_stack_push'>
<arg name='stack' declared_type='km_mat4_stack*' type='^{km_mat4_stack=ii^{kmMat4}^{kmMat4}}'/>
<arg name='item' declared_type='kmMat4*' type='^{kmMat4=[16f]}' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='km_mat4_stack_release'>
<arg name='stack' declared_type='km_mat4_stack*' type='^{km_mat4_stack=ii^{kmMat4}^{kmMat4}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='max'>
<arg name='lhs' declared_type='float' type='f'/>
<arg name='rhs' declared_type='float' type='f'/>
<retval declared_type='float' type='f'/>
</function>
<function name='min'>
<arg name='lhs' declared_type='float' type='f'/>
<arg name='rhs' declared_type='float' type='f'/>
<retval declared_type='float' type='f'/>
</function>
<function name='sortByPriority'>
<arg name='first' declared_type='id' type='@'/>
<arg name='second' declared_type='id' type='@'/>
<arg name='context' declared_type='void*' type='^v'/>
<retval type64='q' declared_type='NSComparisonResult' type='i'/>
</function>
<function name='tgaDestroy'>
<arg name='info' declared_type='tImageTGA*' type='^{sImageTGA=iCCss*i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='tgaLoad'>
<arg name='filename' declared_type='char*' type='*' const='true'/>
<retval declared_type='tImageTGA*' type='^{sImageTGA=iCCss*i}'/>
</function>
<function name='tgaLoadHeader'>
<arg name='file' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='info' declared_type='tImageTGA*' type='^{sImageTGA=iCCss*i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='tgaLoadImageData'>
<arg name='file' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='info' declared_type='tImageTGA*' type='^{sImageTGA=iCCss*i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='tgaRGBtogreyscale'>
<arg name='info' declared_type='tImageTGA*' type='^{sImageTGA=iCCss*i}'/>
<retval declared_type='void' type='v'/>
</function>
<function_alias original='glBindVertexArrayOES' name='glBindVertexArray'/>
<function_alias original='glClearDepthf' name='glClearDepth'/>
<function_alias original='glDeleteVertexArraysOES' name='glDeleteVertexArrays'/>
<function_alias original='glGenVertexArraysOES' name='glGenVertexArrays'/>
<class name='CCAccelAmplitude'>
<method class_method='true' selector='actionWithAction:duration:'>
<arg name='action' index='0' declared_type='CCAction*' type='@'/>
<arg name='d' index='1' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithAction:duration:'>
<arg name='action' index='0' declared_type='CCAction*' type='@'/>
<arg name='d' index='1' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='rate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='setRate:'>
<arg name='rate' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCAccelDeccelAmplitude'>
<method class_method='true' selector='actionWithAction:duration:'>
<arg name='action' index='0' declared_type='CCAction*' type='@'/>
<arg name='d' index='1' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithAction:duration:'>
<arg name='action' index='0' declared_type='CCAction*' type='@'/>
<arg name='d' index='1' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='rate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='setRate:'>
<arg name='rate' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCAction'>
<method class_method='true' selector='action'>
<retval declared_type='id' type='@'/>
</method>
<method selector='copyWithZone:'>
<arg name='zone' index='0' declared_type='NSZone*' type='^{_NSZone=}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
<method selector='isDone'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='originalTarget'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setTag:'>
<arg type64='q' name='tag' index='0' declared_type='NSInteger' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='startWithTarget:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='step:'>
<arg name='dt' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stop'>
<retval declared_type='void' type='v'/>
</method>
<method selector='tag'>
<retval type64='q' declared_type='NSInteger' type='i'/>
</method>
<method selector='target'>
<retval declared_type='id' type='@'/>
</method>
<method selector='update:'>
<arg name='time' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCActionCamera'>
<method selector='startWithTarget:'>
<arg name='aTarget' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCActionEase'>
<method class_method='true' selector='actionWithAction:'>
<arg name='action' index='0' declared_type='CCActionInterval*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithAction:'>
<arg name='action' index='0' declared_type='CCActionInterval*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCActionInstant'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCActionInterval'>
<method class_method='true' selector='actionWithDuration:'>
<arg name='d' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='elapsed'>
<retval declared_type='ccTime' type='f'/>
</method>
<method selector='initWithDuration:'>
<arg name='d' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isDone'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='reverse'>
<retval declared_type='CCActionInterval*' type='@'/>
</method>
</class>
<class name='CCActionManager'>
<method selector='addAction:target:paused:'>
<arg name='action' index='0' declared_type='CCAction*' type='@'/>
<arg name='target' index='1' declared_type='id' type='@'/>
<arg name='paused' index='2' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getActionByTag:target:'>
<arg type64='q' name='tag' index='0' declared_type='NSInteger' type='i'/>
<arg name='target' index='1' declared_type='id' type='@'/>
<retval declared_type='CCAction*' type='@'/>
</method>
<method selector='numberOfRunningActionsInTarget:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='pauseAllRunningActions'>
<retval declared_type='NSSet*' type='@'/>
</method>
<method selector='pauseTarget:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAction:'>
<arg name='action' index='0' declared_type='CCAction*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeActionByTag:target:'>
<arg type64='q' name='tag' index='0' declared_type='NSInteger' type='i'/>
<arg name='target' index='1' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAllActions'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAllActionsFromTarget:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='resumeTarget:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='resumeTargets:'>
<arg name='targetsToResume' index='0' declared_type='NSSet*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='sharedManager'>
<retval declared_type='CCActionManager*' type='@'/>
</method>
</class>
<class name='CCActionTween'>
<method class_method='true' selector='actionWithDuration:key:from:to:'>
<arg name='aDuration' index='0' declared_type='ccTime' type='f'/>
<arg name='key' index='1' declared_type='NSString*' type='@'/>
<arg name='from' index='2' declared_type='float' type='f'/>
<arg name='to' index='3' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:key:from:to:'>
<arg name='aDuration' index='0' declared_type='ccTime' type='f'/>
<arg name='key' index='1' declared_type='NSString*' type='@'/>
<arg name='from' index='2' declared_type='float' type='f'/>
<arg name='to' index='3' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCAnimate'>
<method class_method='true' selector='actionWithAnimation:'>
<arg name='animation' index='0' declared_type='CCAnimation*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='actionWithAnimation:restoreOriginalFrame:'>
<arg name='animation' index='0' declared_type='CCAnimation*' type='@'/>
<arg name='restoreOriginalFrame' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='actionWithDuration:animation:restoreOriginalFrame:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='animation' index='1' declared_type='CCAnimation*' type='@'/>
<arg name='restoreOriginalFrame' index='2' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='animation'>
<retval declared_type='CCAnimation*' type='@'/>
</method>
<method selector='initWithAnimation:'>
<arg name='animation' index='0' declared_type='CCAnimation*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithAnimation:restoreOriginalFrame:'>
<arg name='a' index='0' declared_type='CCAnimation*' type='@'/>
<arg name='restoreOriginalFrame' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:animation:restoreOriginalFrame:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='animation' index='1' declared_type='CCAnimation*' type='@'/>
<arg name='restoreOriginalFrame' index='2' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setAnimation:'>
<arg name='animation' index='0' declared_type='CCAnimation*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCAnimation'>
<method selector='addFrame:'>
<arg name='frame' index='0' declared_type='CCSpriteFrame*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addFrameWithFilename:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addFrameWithTexture:rect:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addSpriteFrame:'>
<arg name='frame' index='0' declared_type='CCSpriteFrame*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addSpriteFrameWithFilename:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addSpriteFrameWithTexture:rect:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='animation'>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='animationWithAnimationFrames:delayPerUnit:loops:'>
<arg name='arrayOfAnimationFrames' index='0' declared_type='NSArray*' type='@'/>
<arg name='delayPerUnit' index='1' declared_type='float' type='f'/>
<arg type64='Q' name='loops' index='2' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='animationWithFrames:'>
<arg name='arrayOfSpriteFrameNames' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='animationWithFrames:delay:'>
<arg name='arrayOfSpriteFrameNames' index='0' declared_type='NSArray*' type='@'/>
<arg name='delay' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='animationWithSpriteFrames:'>
<arg name='arrayOfSpriteFrameNames' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='animationWithSpriteFrames:delay:'>
<arg name='arrayOfSpriteFrameNames' index='0' declared_type='NSArray*' type='@'/>
<arg name='delay' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='delayPerUnit'>
<retval declared_type='float' type='f'/>
</method>
<method selector='duration'>
<retval declared_type='float' type='f'/>
</method>
<method selector='frames'>
<retval declared_type='NSMutableArray*' type='@'/>
</method>
<method selector='initWithAnimationFrames:delayPerUnit:loops:'>
<arg name='arrayOfAnimationFrames' index='0' declared_type='NSArray*' type='@'/>
<arg name='delayPerUnit' index='1' declared_type='float' type='f'/>
<arg type64='Q' name='loops' index='2' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFrames:'>
<arg name='arrayOfSpriteFrameNames' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFrames:delay:'>
<arg name='arrayOfSpriteFrameNames' index='0' declared_type='NSArray*' type='@'/>
<arg name='delay' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithSpriteFrames:'>
<arg name='arrayOfSpriteFrameNames' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithSpriteFrames:delay:'>
<arg name='arrayOfSpriteFrameNames' index='0' declared_type='NSArray*' type='@'/>
<arg name='delay' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='loops'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='restoreOriginalFrame'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setDelayPerUnit:'>
<arg name='delayPerUnit' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrames:'>
<arg name='frames' index='0' declared_type='NSMutableArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLoops:'>
<arg type64='Q' name='loops' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRestoreOriginalFrame:'>
<arg name='restoreOriginalFrame' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='totalDelayUnits'>
<retval declared_type='float' type='f'/>
</method>
</class>
<class name='CCAnimationCache'>
<method selector='addAnimation:name:'>
<arg name='animation' index='0' declared_type='CCAnimation*' type='@'/>
<arg name='name' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addAnimationsWithDictionary:'>
<arg name='dictionary' index='0' declared_type='NSDictionary*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addAnimationsWithFile:'>
<arg name='plist' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='animationByName:'>
<arg name='name' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='CCAnimation*' type='@'/>
</method>
<method class_method='true' selector='purgeSharedAnimationCache'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAnimationByName:'>
<arg name='name' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='sharedAnimationCache'>
<retval declared_type='CCAnimationCache*' type='@'/>
</method>
</class>
<class name='CCAnimationFrame'>
<method selector='delayUnits'>
<retval declared_type='float' type='f'/>
</method>
<method selector='initWithSpriteFrame:delayUnits:userInfo:'>
<arg name='spriteFrame' index='0' declared_type='CCSpriteFrame*' type='@'/>
<arg name='delayUnits' index='1' declared_type='float' type='f'/>
<arg name='userInfo' index='2' declared_type='NSDictionary*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setDelayUnits:'>
<arg name='delayUnits' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSpriteFrame:'>
<arg name='spriteFrame' index='0' declared_type='CCSpriteFrame*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUserInfo:'>
<arg name='userInfo' index='0' declared_type='NSDictionary*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='spriteFrame'>
<retval declared_type='CCSpriteFrame*' type='@'/>
</method>
<method selector='userInfo'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
</class>
<class name='CCArray'>
<method selector='addObject:'>
<arg name='object' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addObjectsFromArray:'>
<arg name='otherArray' index='0' declared_type='CCArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addObjectsFromNSArray:'>
<arg name='otherArray' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='array'>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='arrayWithArray:'>
<arg name='otherArray' index='0' declared_type='CCArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='arrayWithCapacity:'>
<arg type64='Q' name='capacity' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='arrayWithNSArray:'>
<arg name='otherArray' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='capacity'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='containsObject:'>
<arg name='object' index='0' declared_type='id' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='count'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='exchangeObject:withObject:'>
<arg name='object1' index='0' declared_type='id' type='@'/>
<arg name='object2' index='1' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='exchangeObjectAtIndex:withObjectAtIndex:'>
<arg type64='Q' name='index1' index='0' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='index2' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fastRemoveObject:'>
<arg name='object' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fastRemoveObjectAtIndex:'>
<arg type64='Q' name='index' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getNSArray'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='indexOfObject:'>
<arg name='object' index='0' declared_type='id' type='@'/>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='initWithArray:'>
<arg name='otherArray' index='0' declared_type='CCArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithCapacity:'>
<arg type64='Q' name='capacity' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithNSArray:'>
<arg name='otherArray' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertObject:atIndex:'>
<arg name='object' index='0' declared_type='id' type='@'/>
<arg type64='Q' name='index' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertionSort:'>
<arg name='selector' index='0' declared_type='SEL' type=':'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertionSortUsingCFuncComparator:'>
<arg name='comparator' index='0' declared_type='int (*)(void *, void *)' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='isEqualToArray:'>
<arg name='otherArray' index='0' declared_type='CCArray*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='lastObject'>
<retval declared_type='id' type='@'/>
</method>
<method selector='makeObjectPerformSelectorWithArrayObjects:selector:'>
<arg name='object' index='0' declared_type='id' type='@'/>
<arg name='aSelector' index='1' declared_type='SEL' type=':'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='makeObjectsPerformSelector:'>
<arg name='aSelector' index='0' declared_type='SEL' type=':'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='makeObjectsPerformSelector:withObject:'>
<arg name='aSelector' index='0' declared_type='SEL' type=':'/>
<arg name='object' index='1' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mergesortLUsingCFuncComparator:'>
<arg name='comparator' index='0' declared_type='int (*)(void *, void *)' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='objectAtIndex:'>
<arg type64='Q' name='index' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='qsortUsingCFuncComparator:'>
<arg name='comparator' index='0' declared_type='int (*)(void *, void *)' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='randomObject'>
<retval declared_type='id' type='@'/>
</method>
<method selector='reduceMemoryFootprint'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAllObjects'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeLastObject'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeObject:'>
<arg name='object' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeObjectAtIndex:'>
<arg type64='Q' name='index' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeObjectsInArray:'>
<arg name='otherArray' index='0' declared_type='CCArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='replaceObjectAtIndex:withObject:'>
<arg type64='Q' name='index' index='0' declared_type='NSUInteger' type='I'/>
<arg name='anObject' index='1' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='reverseObjects'>
<retval declared_type='void' type='v'/>
</method>
<method selector='sortUsingFunction:context:'>
<arg name='compare' index='0' declared_type='NSInteger (*)(id, id, void *)' function_pointer='true' type='^?'>
<arg declared_type='id' type='@'/>
<arg declared_type='id' type='@'/>
<arg declared_type='void*' type='^v'/>
<retval type64='q' declared_type='NSInteger' type='i'/>
</arg>
<arg name='context' index='1' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCAtlasNode'>
<method class_method='true' selector='atlasWithTileFile:tileWidth:tileHeight:itemsToRender:'>
<arg name='tile' index='0' declared_type='NSString*' type='@'/>
<arg type64='Q' name='w' index='1' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='h' index='2' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='c' index='3' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='blendFunc'>
<retval declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
</method>
<method selector='color'>
<retval declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
</method>
<method selector='initWithTileFile:tileWidth:tileHeight:itemsToRender:'>
<arg name='tile' index='0' declared_type='NSString*' type='@'/>
<arg type64='Q' name='w' index='1' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='h' index='2' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='c' index='3' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='opacity'>
<retval declared_type='GLubyte' type='C'/>
</method>
<method selector='quadsToDraw'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='setBlendFunc:'>
<arg name='blendFunc' index='0' declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColor:'>
<arg name='color' index='0' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOpacity:'>
<arg name='opacity' index='0' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setQuadsToDraw:'>
<arg type64='Q' name='quadsToDraw' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextureAtlas:'>
<arg name='textureAtlas' index='0' declared_type='CCTextureAtlas*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textureAtlas'>
<retval declared_type='CCTextureAtlas*' type='@'/>
</method>
<method selector='updateAtlasValues'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCBMFontConfiguration'>
<method selector='atlasName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method class_method='true' selector='configurationWithFNTFile:'>
<arg name='FNTfile' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFNTfile:'>
<arg name='FNTfile' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setAtlasName:'>
<arg name='atlasName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCBezierBy'>
<method class_method='true' selector='actionWithDuration:bezier:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg type64='{_ccBezierConfig={CGPoint=dd}{CGPoint=dd}{CGPoint=dd}}' name='c' index='1' declared_type='ccBezierConfig' type='{_ccBezierConfig={CGPoint=ff}{CGPoint=ff}{CGPoint=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:bezier:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg type64='{_ccBezierConfig={CGPoint=dd}{CGPoint=dd}{CGPoint=dd}}' name='c' index='1' declared_type='ccBezierConfig' type='{_ccBezierConfig={CGPoint=ff}{CGPoint=ff}{CGPoint=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCBezierTo'>
<method selector='startWithTarget:'>
<arg name='aTarget' index='0' declared_type='CCNode*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCBlink'>
<method class_method='true' selector='actionWithDuration:blinks:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg type64='Q' name='blinks' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:blinks:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg type64='Q' name='blinks' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCCallBlock'>
<method class_method='true' selector='actionWithBlock:'>
<arg name='block' index='0' declared_type='void (^)()' function_pointer='true' type='@?'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='execute'>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithBlock:'>
<arg name='block' index='0' declared_type='void (^)()' function_pointer='true' type='@?'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCCallBlockN'>
<method class_method='true' selector='actionWithBlock:'>
<arg name='block' index='0' declared_type='void (^)(CCNode *)' function_pointer='true' type='@?'>
<arg declared_type='CCNode*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='execute'>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithBlock:'>
<arg name='block' index='0' declared_type='void (^)(CCNode *)' function_pointer='true' type='@?'>
<arg declared_type='CCNode*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCCallBlockO'>
<method class_method='true' selector='actionWithBlock:object:'>
<arg name='block' index='0' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='object' index='1' declared_type='id' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='execute'>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithBlock:object:'>
<arg name='block' index='0' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='object' index='1' declared_type='id' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='object'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setObject:'>
<arg name='object' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCCallFunc'>
<method class_method='true' selector='actionWithTarget:selector:'>
<arg name='t' index='0' declared_type='id' type='@'/>
<arg name='s' index='1' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='execute'>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithTarget:selector:'>
<arg name='t' index='0' declared_type='id' type='@'/>
<arg name='s' index='1' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setTargetCallback:'>
<arg name='targetCallback' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='targetCallback'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCCallFuncN'>
<method selector='execute'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCCallFuncND'>
<method class_method='true' selector='actionWithTarget:selector:data:'>
<arg name='t' index='0' declared_type='id' type='@'/>
<arg name='s' index='1' declared_type='SEL' type=':'/>
<arg name='d' index='2' declared_type='void*' type='^v'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='callbackMethod'>
<retval declared_type='CC_CALLBACK_ND' function_pointer='true' type='^?'>
<arg declared_type='id' type='@'/>
<arg declared_type='SEL' type=':'/>
<arg declared_type='id' type='@'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</method>
<method selector='initWithTarget:selector:data:'>
<arg name='t' index='0' declared_type='id' type='@'/>
<arg name='s' index='1' declared_type='SEL' type=':'/>
<arg name='d' index='2' declared_type='void*' type='^v'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setCallbackMethod:'>
<arg name='callbackMethod' index='0' declared_type='CC_CALLBACK_ND' function_pointer='true' type='^?'>
<arg declared_type='id' type='@'/>
<arg declared_type='SEL' type=':'/>
<arg declared_type='id' type='@'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCCallFuncO'>
<method class_method='true' selector='actionWithTarget:selector:object:'>
<arg name='t' index='0' declared_type='id' type='@'/>
<arg name='s' index='1' declared_type='SEL' type=':'/>
<arg name='object' index='2' declared_type='id' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTarget:selector:object:'>
<arg name='t' index='0' declared_type='id' type='@'/>
<arg name='s' index='1' declared_type='SEL' type=':'/>
<arg name='object' index='2' declared_type='id' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='object'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setObject:'>
<arg name='object' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCCamera'>
<method selector='centerX:centerY:centerZ:'>
<arg name='x' index='0' declared_type='float*' type='^f'/>
<arg name='y' index='1' declared_type='float*' type='^f'/>
<arg name='z' index='2' declared_type='float*' type='^f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='dirty'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='eyeX:eyeY:eyeZ:'>
<arg name='x' index='0' declared_type='float*' type='^f'/>
<arg name='y' index='1' declared_type='float*' type='^f'/>
<arg name='z' index='2' declared_type='float*' type='^f'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='getZEye'>
<retval declared_type='float' type='f'/>
</method>
<method selector='locate'>
<retval declared_type='void' type='v'/>
</method>
<method selector='restore'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCenterX:centerY:centerZ:'>
<arg name='x' index='0' declared_type='float' type='f'/>
<arg name='y' index='1' declared_type='float' type='f'/>
<arg name='z' index='2' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDirty:'>
<arg name='dirty' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEyeX:eyeY:eyeZ:'>
<arg name='x' index='0' declared_type='float' type='f'/>
<arg name='y' index='1' declared_type='float' type='f'/>
<arg name='z' index='2' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUpX:upY:upZ:'>
<arg name='x' index='0' declared_type='float' type='f'/>
<arg name='y' index='1' declared_type='float' type='f'/>
<arg name='z' index='2' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='upX:upY:upZ:'>
<arg name='x' index='0' declared_type='float*' type='^f'/>
<arg name='y' index='1' declared_type='float*' type='^f'/>
<arg name='z' index='2' declared_type='float*' type='^f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCCardinalSplineBy'>
<method selector='startWithTarget:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCCardinalSplineTo'>
<method class_method='true' selector='actionWithDuration:points:tension:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='points' index='1' declared_type='CCPointArray*' type='@'/>
<arg type64='d' name='tension' index='2' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:points:tension:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='points' index='1' declared_type='CCPointArray*' type='@'/>
<arg type64='d' name='tension' index='2' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='points'>
<retval declared_type='CCPointArray*' type='@'/>
</method>
<method selector='setPoints:'>
<arg name='points' index='0' declared_type='CCPointArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCCatmullRomBy'>
<method class_method='true' selector='actionWithDuration:points:'>
<arg name='dt' index='0' declared_type='ccTime' type='f'/>
<arg name='points' index='1' declared_type='CCPointArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:points:'>
<arg name='dt' index='0' declared_type='ccTime' type='f'/>
<arg name='points' index='1' declared_type='CCPointArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCCatmullRomTo'>
<method class_method='true' selector='actionWithDuration:points:'>
<arg name='dt' index='0' declared_type='ccTime' type='f'/>
<arg name='points' index='1' declared_type='CCPointArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:points:'>
<arg name='dt' index='0' declared_type='ccTime' type='f'/>
<arg name='points' index='1' declared_type='CCPointArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCConfiguration'>
<method selector='OSVersion'>
<retval declared_type='unsigned int' type='I'/>
</method>
<method selector='checkForGLExtension:'>
<arg name='searchName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='maxModelviewStackDepth'>
<retval declared_type='GLint' type='i'/>
</method>
<method selector='maxTextureSize'>
<retval declared_type='GLint' type='i'/>
</method>
<method selector='maxTextureUnits'>
<retval declared_type='GLint' type='i'/>
</method>
<method class_method='true' selector='sharedConfiguration'>
<retval declared_type='CCConfiguration*' type='@'/>
</method>
<method selector='supportsBGRA8888'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='supportsDiscardFramebuffer'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='supportsNPOT'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='supportsPVRTC'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='supportsShareableVAO'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='CCDeccelAmplitude'>
<method class_method='true' selector='actionWithAction:duration:'>
<arg name='action' index='0' declared_type='CCAction*' type='@'/>
<arg name='d' index='1' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithAction:duration:'>
<arg name='action' index='0' declared_type='CCAction*' type='@'/>
<arg name='d' index='1' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='rate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='setRate:'>
<arg name='rate' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCDelayTime'>
<method selector='update:'>
<arg name='dt' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCDirector'>
<method selector='actionManager'>
<retval declared_type='CCActionManager*' type='@'/>
</method>
<method selector='animationInterval'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='contentScaleFactor'>
<retval type64='d' declared_type='CGFloat' type='f'/>
</method>
<method selector='convertToGL:'>
<arg type64='{CGPoint=dd}' name='p' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='convertToUI:'>
<arg type64='{CGPoint=dd}' name='p' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='convertTouchToGL:'>
<arg name='touch' index='0' declared_type='UITouch*' type='@'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='createStatsLabel'>
<retval declared_type='void' type='v'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='displayStats'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='drawScene'>
<retval declared_type='void' type='v'/>
</method>
<method selector='enableRetinaDisplay:'>
<arg name='enableRetina' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='end'>
<retval declared_type='void' type='v'/>
</method>
<method selector='getZEye'>
<retval declared_type='float' type='f'/>
</method>
<method selector='isAnimating'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isPaused'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='nextDeltaTimeZero'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='notificationNode'>
<retval declared_type='id' type='@'/>
</method>
<method selector='openGLView'>
<retval declared_type='CCGLView*' type='@'/>
</method>
<method selector='pause'>
<retval declared_type='void' type='v'/>
</method>
<method selector='popScene'>
<retval declared_type='void' type='v'/>
</method>
<method selector='popToRootScene'>
<retval declared_type='void' type='v'/>
</method>
<method selector='projection'>
<retval declared_type='ccDirectorProjection' type='i'/>
</method>
<method selector='purgeCachedData'>
<retval declared_type='void' type='v'/>
</method>
<method selector='pushScene:'>
<arg name='scene' index='0' declared_type='CCScene*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='replaceScene:'>
<arg name='scene' index='0' declared_type='CCScene*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='reshapeProjection:'>
<arg type64='{CGSize=dd}' name='newWindowSize' index='0' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='resume'>
<retval declared_type='void' type='v'/>
</method>
<method selector='runWithScene:'>
<arg name='scene' index='0' declared_type='CCScene*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='runningScene'>
<retval declared_type='CCScene*' type='@'/>
</method>
<method selector='runningThread'>
<retval declared_type='NSThread*' type='@'/>
</method>
<method selector='scheduler'>
<retval declared_type='CCScheduler*' type='@'/>
</method>
<method selector='secondsPerFrame'>
<retval declared_type='ccTime' type='f'/>
</method>
<method selector='sendCleanupToScene'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setActionManager:'>
<arg name='actionManager' index='0' declared_type='CCActionManager*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlphaBlending:'>
<arg name='on' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAnimationInterval:'>
<arg name='animationInterval' index='0' declared_type='NSTimeInterval' type='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentScaleFactor:'>
<arg type64='d' name='scaleFactor' index='0' declared_type='CGFloat' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDepthTest:'>
<arg name='on' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDisplayFPS:'>
<arg name='display' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDisplayStats:'>
<arg name='displayStats' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGLDefaultValues'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNextDeltaTimeZero:'>
<arg name='nextDeltaTimeZero' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNotificationNode:'>
<arg name='notificationNode' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOpenGLView:'>
<arg name='view' index='0' declared_type='CCGLView*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setProjection:'>
<arg name='projection' index='0' declared_type='ccDirectorProjection' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScheduler:'>
<arg name='scheduler' index='0' declared_type='CCScheduler*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTouchDispatcher:'>
<arg name='touchDispatcher' index='0' declared_type='CCTouchDispatcher*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='sharedDirector'>
<retval declared_type='CCDirector*' type='@'/>
</method>
<method selector='startAnimation'>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopAnimation'>
<retval declared_type='void' type='v'/>
</method>
<method selector='totalFrames'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='touchDispatcher'>
<retval declared_type='CCTouchDispatcher*' type='@'/>
</method>
<method selector='winSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='winSizeInPixels'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
</class>
<class name='CCDirectorDisplayLink'>
<method selector='mainLoop:'>
<arg name='sender' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCDirectorIOS'>
<method selector='drawScene'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCDrawNode'>
<method selector='blendFunc'>
<retval declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
</method>
<method selector='clear'>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawDot:radius:color:'>
<arg type64='{CGPoint=dd}' name='pos' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='d' name='radius' index='1' declared_type='CGFloat' type='f'/>
<arg name='color' index='2' declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawPolyWithVerts:count:fillColor:borderWidth:borderColor:'>
<arg type64='^{CGPoint=dd}' name='verts' index='0' declared_type='CGPoint*' type='^{CGPoint=ff}'/>
<arg type64='Q' name='count' index='1' declared_type='NSUInteger' type='I'/>
<arg name='fill' index='2' declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
<arg type64='d' name='width' index='3' declared_type='CGFloat' type='f'/>
<arg name='line' index='4' declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawSegmentFrom:to:radius:color:'>
<arg type64='{CGPoint=dd}' name='a' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='b' index='1' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='d' name='radius' index='2' declared_type='CGFloat' type='f'/>
<arg name='color' index='3' declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBlendFunc:'>
<arg name='blendFunc' index='0' declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCES2Renderer'>
<method selector='colorRenderbuffer'>
<retval declared_type='GLuint' type='I'/>
</method>
<method selector='context'>
<retval declared_type='EAGLContext*' type='@'/>
</method>
<method selector='defaultFramebuffer'>
<retval declared_type='GLuint' type='I'/>
</method>
<method selector='msaaColorbuffer'>
<retval declared_type='GLuint' type='I'/>
</method>
<method selector='msaaFramebuffer'>
<retval declared_type='GLuint' type='I'/>
</method>
<method selector='resizeFromLayer:'>
<arg name='layer' index='0' declared_type='CAEAGLLayer*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='CCEaseBackIn'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseBackInOut'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseBackOut'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseBounce'>
<method selector='bounceTime:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='ccTime' type='f'/>
</method>
</class>
<class name='CCEaseBounceIn'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseBounceInOut'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseBounceOut'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseElastic'>
<method class_method='true' selector='actionWithAction:period:'>
<arg name='action' index='0' declared_type='CCActionInterval*' type='@'/>
<arg name='period' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithAction:period:'>
<arg name='action' index='0' declared_type='CCActionInterval*' type='@'/>
<arg name='period' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='period'>
<retval declared_type='float' type='f'/>
</method>
<method selector='setPeriod:'>
<arg name='period' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseElasticIn'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseElasticInOut'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseElasticOut'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseExponentialIn'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseExponentialInOut'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseExponentialOut'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseIn'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseInOut'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseOut'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseRateAction'>
<method class_method='true' selector='actionWithAction:rate:'>
<arg name='action' index='0' declared_type='CCActionInterval*' type='@'/>
<arg name='rate' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithAction:rate:'>
<arg name='action' index='0' declared_type='CCActionInterval*' type='@'/>
<arg name='rate' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='rate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='setRate:'>
<arg name='rate' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseSineIn'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseSineInOut'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCEaseSineOut'>
<method selector='update:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCFadeIn'>
<method selector='update:'>
<arg name='dt' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCFadeOut'>
<method selector='update:'>
<arg name='dt' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCFadeTo'>
<method class_method='true' selector='actionWithDuration:opacity:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='opactiy' index='1' declared_type='GLubyte' type='C'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:opacity:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='opacity' index='1' declared_type='GLubyte' type='C'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCFileUtils'>
<method selector='bundle'>
<retval declared_type='NSBundle*' type='@'/>
</method>
<method selector='enableFallbackSuffixes'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='fileManager'>
<retval declared_type='NSFileManager*' type='@'/>
</method>
<method class_method='true' selector='fullPathFromRelativePath:'>
<arg name='relPath' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='fullPathFromRelativePath:'>
<arg name='relPath' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method class_method='true' selector='fullPathFromRelativePath:resolutionType:'>
<arg name='relPath' index='0' declared_type='NSString*' type='@'/>
<arg name='resolutionType' index='1' declared_type='ccResolutionType*' type='^i'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='fullPathFromRelativePath:resolutionType:'>
<arg name='relPath' index='0' declared_type='NSString*' type='@'/>
<arg name='resolutionType' index='1' declared_type='ccResolutionType*' type='^i'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method class_method='true' selector='iPadFileExistsAtPath:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='iPadFileExistsAtPath:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method class_method='true' selector='iPadRetinaDisplayFileExistsAtPath:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='iPadRetinaDisplayFileExistsAtPath:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='iPadRetinaDisplaySuffix'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='iPadSuffix'>
<retval declared_type='NSString*' type='@'/>
</method>
<method class_method='true' selector='iPhoneRetinaDisplayFileExistsAtPath:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='iPhoneRetinaDisplayFileExistsAtPath:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='iPhoneRetinaDisplaySuffix'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='purgeCachedEntries'>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='removeSuffixFromFile:'>
<arg name='path' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='removeSuffixFromFile:'>
<arg name='path' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='setBundle:'>
<arg name='bundle' index='0' declared_type='NSBundle*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEnableFallbackSuffixes:'>
<arg name='enableFallbackSuffixes' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFileManager:'>
<arg name='fileManager' index='0' declared_type='NSFileManager*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='setRetinaDisplaySuffix:'>
<arg name='suffix' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setiPadRetinaDisplaySuffix:'>
<arg name='iPadRetinaDisplaySuffix' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setiPadSuffix:'>
<arg name='iPadSuffix' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setiPhoneRetinaDisplaySuffix:'>
<arg name='iPhoneRetinaDisplaySuffix' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='sharedFileUtils'>
<retval declared_type='CCFileUtils*' type='@'/>
</method>
</class>
<class name='CCFiniteTimeAction'>
<method selector='duration'>
<retval declared_type='ccTime' type='f'/>
</method>
<method selector='reverse'>
<retval declared_type='CCFiniteTimeAction*' type='@'/>
</method>
<method selector='setDuration:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCFlipX'>
<method class_method='true' selector='actionWithFlipX:'>
<arg name='x' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFlipX:'>
<arg name='x' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCFlipX3D'>
<method class_method='true' selector='actionWithDuration:'>
<arg name='d' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:'>
<arg name='d' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCFlipY'>
<method class_method='true' selector='actionWithFlipY:'>
<arg name='y' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFlipY:'>
<arg name='y' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCFlipY3D'>
<method selector='update:'>
<arg name='time' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCFollow'>
<method class_method='true' selector='actionWithTarget:'>
<arg name='followedNode' index='0' declared_type='CCNode*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='actionWithTarget:worldBoundary:'>
<arg name='followedNode' index='0' declared_type='CCNode*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='boundarySet'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithTarget:'>
<arg name='followedNode' index='0' declared_type='CCNode*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTarget:worldBoundary:'>
<arg name='followedNode' index='0' declared_type='CCNode*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setBoundarySet:'>
<arg name='boundarySet' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCGLProgram'>
<method selector='addAttribute:index:'>
<arg name='attributeName' index='0' declared_type='NSString*' type='@'/>
<arg name='index' index='1' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fragmentShaderLog'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='initWithVertexShaderByteArray:fragmentShaderByteArray:'>
<arg name='vShaderByteArray' index='0' declared_type='GLchar*' type='*' const='true'/>
<arg name='fShaderByteArray' index='1' declared_type='GLchar*' type='*' const='true'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithVertexShaderFilename:fragmentShaderFilename:'>
<arg name='vShaderFilename' index='0' declared_type='NSString*' type='@'/>
<arg name='fShaderFilename' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='link'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='program'>
<retval declared_type='GLuint' type='I'/>
</method>
<method selector='programLog'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='setUniformForModelViewProjectionMatrix'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUniformLocation:with2fv:count:'>
<arg name='location' index='0' declared_type='GLint' type='i'/>
<arg name='floats' index='1' declared_type='GLfloat*' type='^f'/>
<arg type64='Q' name='numberOfArrays' index='2' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUniformLocation:with3fv:count:'>
<arg name='location' index='0' declared_type='GLint' type='i'/>
<arg name='floats' index='1' declared_type='GLfloat*' type='^f'/>
<arg type64='Q' name='numberOfArrays' index='2' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUniformLocation:with4fv:count:'>
<arg name='location' index='0' declared_type='GLint' type='i'/>
<arg name='floats' index='1' declared_type='GLvoid*' type='^v'/>
<arg type64='Q' name='numberOfArrays' index='2' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUniformLocation:withF1:'>
<arg name='location' index='0' declared_type='GLint' type='i'/>
<arg name='f1' index='1' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUniformLocation:withF1:f2:'>
<arg name='location' index='0' declared_type='GLint' type='i'/>
<arg name='f1' index='1' declared_type='GLfloat' type='f'/>
<arg name='f2' index='2' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUniformLocation:withF1:f2:f3:'>
<arg name='location' index='0' declared_type='GLint' type='i'/>
<arg name='f1' index='1' declared_type='GLfloat' type='f'/>
<arg name='f2' index='2' declared_type='GLfloat' type='f'/>
<arg name='f3' index='3' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUniformLocation:withF1:f2:f3:f4:'>
<arg name='location' index='0' declared_type='GLint' type='i'/>
<arg name='f1' index='1' declared_type='GLfloat' type='f'/>
<arg name='f2' index='2' declared_type='GLfloat' type='f'/>
<arg name='f3' index='3' declared_type='GLfloat' type='f'/>
<arg name='f4' index='4' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUniformLocation:withI1:'>
<arg name='location' index='0' declared_type='GLint' type='i'/>
<arg name='i1' index='1' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUniformLocation:withMatrix4fv:count:'>
<arg name='location' index='0' declared_type='GLint' type='i'/>
<arg name='matrix_array' index='1' declared_type='GLvoid*' type='^v'/>
<arg type64='Q' name='numberOfMatrix' index='2' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUniformsForBuiltins'>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateUniforms'>
<retval declared_type='void' type='v'/>
</method>
<method selector='use'>
<retval declared_type='void' type='v'/>
</method>
<method selector='vertexShaderLog'>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<class name='CCGLView'>
<method selector='context'>
<retval declared_type='EAGLContext*' type='@'/>
</method>
<method selector='convertPointFromViewToSurface:'>
<arg type64='{CGPoint=dd}' name='point' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='convertRectFromViewToSurface:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval type64='{CGRect={CGPoint=dd}{CGSize=dd}}' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</method>
<method selector='depthFormat'>
<retval declared_type='GLuint' type='I'/>
</method>
<method selector='initWithFrame:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='frame' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFrame:pixelFormat:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='frame' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='format' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFrame:pixelFormat:depthFormat:preserveBackbuffer:sharegroup:multiSampling:numberOfSamples:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='frame' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='format' index='1' declared_type='NSString*' type='@'/>
<arg name='depth' index='2' declared_type='GLuint' type='I'/>
<arg name='retained' index='3' declared_type='BOOL' type='B'/>
<arg name='sharegroup' index='4' declared_type='EAGLSharegroup*' type='@'/>
<arg name='sampling' index='5' declared_type='BOOL' type='B'/>
<arg name='nSamples' index='6' declared_type='unsigned int' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='lockOpenGLContext'>
<retval declared_type='void' type='v'/>
</method>
<method selector='multiSampling'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='pixelFormat'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='setMultiSampling:'>
<arg name='multiSampling' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTouchDelegate:'>
<arg name='touchDelegate' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='surfaceSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='swapBuffers'>
<retval declared_type='void' type='v'/>
</method>
<method selector='touchDelegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='unlockOpenGLContext'>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='viewWithFrame:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='frame' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='viewWithFrame:pixelFormat:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='frame' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='format' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='viewWithFrame:pixelFormat:depthFormat:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='frame' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='format' index='1' declared_type='NSString*' type='@'/>
<arg name='depth' index='2' declared_type='GLuint' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='viewWithFrame:pixelFormat:depthFormat:preserveBackbuffer:sharegroup:multiSampling:numberOfSamples:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='frame' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='format' index='1' declared_type='NSString*' type='@'/>
<arg name='depth' index='2' declared_type='GLuint' type='I'/>
<arg name='retained' index='3' declared_type='BOOL' type='B'/>
<arg name='sharegroup' index='4' declared_type='EAGLSharegroup*' type='@'/>
<arg name='multisampling' index='5' declared_type='BOOL' type='B'/>
<arg name='samples' index='6' declared_type='unsigned int' type='I'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCGrabber'>
<method selector='afterRender:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='beforeRender:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='grab:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCGrid3D'>
<method selector='originalVertex:'>
<arg type64='{_ccGridSize=qq}' name='pos' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='ccVertex3F' type='{_ccVertex3F=fff}'/>
</method>
<method selector='setVertex:vertex:'>
<arg type64='{_ccGridSize=qq}' name='pos' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='vertex' index='1' declared_type='ccVertex3F' type='{_ccVertex3F=fff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='vertex:'>
<arg type64='{_ccGridSize=qq}' name='pos' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='ccVertex3F' type='{_ccVertex3F=fff}'/>
</method>
</class>
<class name='CCGrid3DAction'>
<method selector='originalVertex:'>
<arg type64='{_ccGridSize=qq}' name='pos' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='ccVertex3F' type='{_ccVertex3F=fff}'/>
</method>
<method selector='setVertex:vertex:'>
<arg type64='{_ccGridSize=qq}' name='pos' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='vertex' index='1' declared_type='ccVertex3F' type='{_ccVertex3F=fff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='vertex:'>
<arg type64='{_ccGridSize=qq}' name='pos' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='ccVertex3F' type='{_ccVertex3F=fff}'/>
</method>
</class>
<class name='CCGridAction'>
<method class_method='true' selector='actionWithSize:duration:'>
<arg type64='{_ccGridSize=qq}' name='size' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='1' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='grid'>
<retval declared_type='CCGridBase*' type='@'/>
</method>
<method selector='gridSize'>
<retval type64='{_ccGridSize=qq}' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
</method>
<method selector='initWithSize:duration:'>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='1' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setGridSize:'>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCGridBase'>
<method selector='active'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='afterDraw:'>
<arg name='target' index='0' declared_type='CCNode*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='beforeDraw'>
<retval declared_type='void' type='v'/>
</method>
<method selector='blit'>
<retval declared_type='void' type='v'/>
</method>
<method selector='calculateVertexPoints'>
<retval declared_type='void' type='v'/>
</method>
<method selector='grabber'>
<retval declared_type='CCGrabber*' type='@'/>
</method>
<method selector='gridSize'>
<retval type64='{_ccGridSize=qq}' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
</method>
<method class_method='true' selector='gridWithSize:'>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='gridWithSize:texture:flippedTexture:'>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='texture' index='1' declared_type='CCTexture2D*' type='@'/>
<arg name='flipped' index='2' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithSize:'>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithSize:texture:flippedTexture:'>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='texture' index='1' declared_type='CCTexture2D*' type='@'/>
<arg name='flipped' index='2' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isTextureFlipped'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='reuse'>
<retval declared_type='void' type='v'/>
</method>
<method selector='reuseGrid'>
<retval declared_type='int' type='i'/>
</method>
<method selector='setActive:'>
<arg name='active' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGrabber:'>
<arg name='grabber' index='0' declared_type='CCGrabber*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIsTextureFlipped:'>
<arg name='isTextureFlipped' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setReuseGrid:'>
<arg name='reuseGrid' index='0' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShaderProgram:'>
<arg name='shaderProgram' index='0' declared_type='CCGLProgram*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStep:'>
<arg type64='{CGPoint=dd}' name='step' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTexture:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shaderProgram'>
<retval declared_type='CCGLProgram*' type='@'/>
</method>
<method selector='step'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='texture'>
<retval declared_type='CCTexture2D*' type='@'/>
</method>
</class>
<class name='CCHide'>
<method selector='update:'>
<arg name='time' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCJumpBy'>
<method class_method='true' selector='actionWithDuration:position:height:jumps:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg type64='{CGPoint=dd}' name='position' index='1' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='height' index='2' declared_type='ccTime' type='f'/>
<arg type64='Q' name='jumps' index='3' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:position:height:jumps:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg type64='{CGPoint=dd}' name='position' index='1' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='height' index='2' declared_type='ccTime' type='f'/>
<arg type64='Q' name='jumps' index='3' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCJumpTiles3D'>
<method class_method='true' selector='actionWithJumps:amplitude:grid:duration:'>
<arg name='j' index='0' declared_type='int' type='i'/>
<arg name='amp' index='1' declared_type='float' type='f'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='amplitude'>
<retval declared_type='float' type='f'/>
</method>
<method selector='amplitudeRate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='initWithJumps:amplitude:grid:duration:'>
<arg name='j' index='0' declared_type='int' type='i'/>
<arg name='amp' index='1' declared_type='float' type='f'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setAmplitude:'>
<arg name='amplitude' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAmplitudeRate:'>
<arg name='amplitudeRate' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCJumpTo'>
<method selector='startWithTarget:'>
<arg name='aTarget' index='0' declared_type='CCNode*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCLabelAtlas'>
<method selector='initWithString:charMapFile:itemWidth:itemHeight:startCharMap:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='charmapfile' index='1' declared_type='NSString*' type='@'/>
<arg type64='Q' name='w' index='2' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='h' index='3' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='firstElement' index='4' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:fntFile:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='fontFile' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:charMapFile:itemWidth:itemHeight:startCharMap:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='charmapfile' index='1' declared_type='NSString*' type='@'/>
<arg type64='Q' name='w' index='2' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='h' index='3' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='firstElement' index='4' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:fntFile:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='fontFile' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCLabelBMFont'>
<method selector='alignment'>
<retval declared_type='CCTextAlignment' type='i'/>
</method>
<method selector='color'>
<retval declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
</method>
<method selector='createFontChars'>
<retval declared_type='void' type='v'/>
</method>
<method selector='fntFile'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='initWithString:fntFile:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='fntFile' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:fntFile:width:alignment:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='fntFile' index='1' declared_type='NSString*' type='@'/>
<arg name='width' index='2' declared_type='float' type='f'/>
<arg name='alignment' index='3' declared_type='CCTextAlignment' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:fntFile:width:alignment:imageOffset:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='fntFile' index='1' declared_type='NSString*' type='@'/>
<arg name='width' index='2' declared_type='float' type='f'/>
<arg name='alignment' index='3' declared_type='CCTextAlignment' type='i'/>
<arg type64='{CGPoint=dd}' name='offset' index='4' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:fntFile:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='fntFile' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:fntFile:width:alignment:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='fntFile' index='1' declared_type='NSString*' type='@'/>
<arg name='width' index='2' declared_type='float' type='f'/>
<arg name='alignment' index='3' declared_type='CCTextAlignment' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:fntFile:width:alignment:imageOffset:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='fntFile' index='1' declared_type='NSString*' type='@'/>
<arg name='width' index='2' declared_type='float' type='f'/>
<arg name='alignment' index='3' declared_type='CCTextAlignment' type='i'/>
<arg type64='{CGPoint=dd}' name='offset' index='4' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='opacity'>
<retval declared_type='GLubyte' type='C'/>
</method>
<method class_method='true' selector='purgeCachedData'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlignment:'>
<arg name='alignment' index='0' declared_type='CCTextAlignment' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColor:'>
<arg name='color' index='0' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFntFile:'>
<arg name='fntFile' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOpacity:'>
<arg name='opacity' index='0' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWidth:'>
<arg name='width' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCLabelTTF'>
<method selector='dimensions'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='fontName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='fontSize'>
<retval declared_type='float' type='f'/>
</method>
<method selector='horizontalAlignment'>
<retval declared_type='CCTextAlignment' type='i'/>
</method>
<method selector='initWithString:dimensions:alignment:fontName:fontSize:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGSize=dd}' name='dimensions' index='1' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='2' declared_type='CCTextAlignment' type='i'/>
<arg name='name' index='3' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='4' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:dimensions:alignment:lineBreakMode:fontName:fontSize:'>
<arg name='str' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGSize=dd}' name='dimensions' index='1' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='2' declared_type='CCTextAlignment' type='i'/>
<arg name='lineBreakMode' index='3' declared_type='CCLineBreakMode' type='i'/>
<arg name='name' index='4' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='5' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:fontName:fontSize:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='name' index='1' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='2' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:fontName:fontSize:dimensions:hAlignment:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='name' index='1' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='2' declared_type='CGFloat' type='f'/>
<arg type64='{CGSize=dd}' name='dimensions' index='3' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='4' declared_type='CCTextAlignment' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:fontName:fontSize:dimensions:hAlignment:lineBreakMode:'>
<arg name='str' index='0' declared_type='NSString*' type='@'/>
<arg name='name' index='1' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='2' declared_type='CGFloat' type='f'/>
<arg type64='{CGSize=dd}' name='dimensions' index='3' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='4' declared_type='CCTextAlignment' type='i'/>
<arg name='lineBreakMode' index='5' declared_type='CCLineBreakMode' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:fontName:fontSize:dimensions:hAlignment:vAlignment:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='name' index='1' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='2' declared_type='CGFloat' type='f'/>
<arg type64='{CGSize=dd}' name='dimensions' index='3' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='4' declared_type='CCTextAlignment' type='i'/>
<arg name='vertAlignment' index='5' declared_type='CCVerticalTextAlignment' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:fontName:fontSize:dimensions:hAlignment:vAlignment:lineBreakMode:'>
<arg name='str' index='0' declared_type='NSString*' type='@'/>
<arg name='name' index='1' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='2' declared_type='CGFloat' type='f'/>
<arg type64='{CGSize=dd}' name='dimensions' index='3' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='4' declared_type='CCTextAlignment' type='i'/>
<arg name='vAlignment' index='5' declared_type='CCVerticalTextAlignment' type='i'/>
<arg name='lineBreakMode' index='6' declared_type='CCLineBreakMode' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:dimensions:alignment:fontName:fontSize:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGSize=dd}' name='dimensions' index='1' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='2' declared_type='CCTextAlignment' type='i'/>
<arg name='name' index='3' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='4' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:dimensions:alignment:lineBreakMode:fontName:fontSize:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGSize=dd}' name='dimensions' index='1' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='2' declared_type='CCTextAlignment' type='i'/>
<arg name='lineBreakMode' index='3' declared_type='CCLineBreakMode' type='i'/>
<arg name='name' index='4' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='5' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:dimensions:hAlignment:fontName:fontSize:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGSize=dd}' name='dimensions' index='1' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='2' declared_type='CCTextAlignment' type='i'/>
<arg name='name' index='3' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='4' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:dimensions:hAlignment:lineBreakMode:fontName:fontSize:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGSize=dd}' name='dimensions' index='1' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='2' declared_type='CCTextAlignment' type='i'/>
<arg name='lineBreakMode' index='3' declared_type='CCLineBreakMode' type='i'/>
<arg name='name' index='4' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='5' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:dimensions:hAlignment:vAlignment:fontName:fontSize:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGSize=dd}' name='dimensions' index='1' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='2' declared_type='CCTextAlignment' type='i'/>
<arg name='vertAlignment' index='3' declared_type='CCVerticalTextAlignment' type='i'/>
<arg name='name' index='4' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='5' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:dimensions:hAlignment:vAlignment:lineBreakMode:fontName:fontSize:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGSize=dd}' name='dimensions' index='1' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='2' declared_type='CCTextAlignment' type='i'/>
<arg name='vertAlignment' index='3' declared_type='CCVerticalTextAlignment' type='i'/>
<arg name='lineBreakMode' index='4' declared_type='CCLineBreakMode' type='i'/>
<arg name='name' index='5' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='6' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:fontName:fontSize:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='name' index='1' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='2' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:fontName:fontSize:dimensions:hAlignment:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='name' index='1' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='2' declared_type='CGFloat' type='f'/>
<arg type64='{CGSize=dd}' name='dimensions' index='3' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='4' declared_type='CCTextAlignment' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:fontName:fontSize:dimensions:hAlignment:lineBreakMode:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='name' index='1' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='2' declared_type='CGFloat' type='f'/>
<arg type64='{CGSize=dd}' name='dimensions' index='3' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='4' declared_type='CCTextAlignment' type='i'/>
<arg name='lineBreakMode' index='5' declared_type='CCLineBreakMode' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:fontName:fontSize:dimensions:hAlignment:vAlignment:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='name' index='1' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='2' declared_type='CGFloat' type='f'/>
<arg type64='{CGSize=dd}' name='dimensions' index='3' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='4' declared_type='CCTextAlignment' type='i'/>
<arg name='vertAlignment' index='5' declared_type='CCVerticalTextAlignment' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='labelWithString:fontName:fontSize:dimensions:hAlignment:vAlignment:lineBreakMode:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='name' index='1' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='2' declared_type='CGFloat' type='f'/>
<arg type64='{CGSize=dd}' name='dimensions' index='3' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='4' declared_type='CCTextAlignment' type='i'/>
<arg name='vertAlignment' index='5' declared_type='CCVerticalTextAlignment' type='i'/>
<arg name='lineBreakMode' index='6' declared_type='CCLineBreakMode' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setDimensions:'>
<arg type64='{CGSize=dd}' name='dimensions' index='0' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFontName:'>
<arg name='fontName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFontSize:'>
<arg name='fontSize' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHorizontalAlignment:'>
<arg name='horizontalAlignment' index='0' declared_type='CCTextAlignment' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setString:'>
<arg name='str' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVerticalAlignment:'>
<arg name='verticalAlignment' index='0' declared_type='CCVerticalTextAlignment' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='verticalAlignment'>
<retval declared_type='CCVerticalTextAlignment' type='i'/>
</method>
</class>
<class name='CCLayer'>
<method selector='isAccelerometerEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isTouchEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='registerWithTouchDispatcher'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIsAccelerometerEnabled:'>
<arg name='isAccelerometerEnabled' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIsTouchEnabled:'>
<arg name='isTouchEnabled' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCLayerColor'>
<method selector='blendFunc'>
<retval declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
</method>
<method selector='changeHeight:'>
<arg name='h' index='0' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='changeWidth:'>
<arg name='w' index='0' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='changeWidth:height:'>
<arg name='w' index='0' declared_type='GLfloat' type='f'/>
<arg name='h' index='1' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='color'>
<retval declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
</method>
<method selector='initWithColor:'>
<arg name='color' index='0' declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithColor:width:height:'>
<arg name='color' index='0' declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
<arg name='w' index='1' declared_type='GLfloat' type='f'/>
<arg name='h' index='2' declared_type='GLfloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='layerWithColor:'>
<arg name='color' index='0' declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='layerWithColor:width:height:'>
<arg name='color' index='0' declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
<arg name='w' index='1' declared_type='GLfloat' type='f'/>
<arg name='h' index='2' declared_type='GLfloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='opacity'>
<retval declared_type='GLubyte' type='C'/>
</method>
<method selector='setBlendFunc:'>
<arg name='blendFunc' index='0' declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCLayerGradient'>
<method selector='compressedInterpolation'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='endColor'>
<retval declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
</method>
<method selector='endOpacity'>
<retval declared_type='GLubyte' type='C'/>
</method>
<method selector='initWithColor:fadingTo:'>
<arg name='start' index='0' declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
<arg name='end' index='1' declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithColor:fadingTo:alongVector:'>
<arg name='start' index='0' declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
<arg name='end' index='1' declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
<arg type64='{CGPoint=dd}' name='v' index='2' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='layerWithColor:fadingTo:'>
<arg name='start' index='0' declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
<arg name='end' index='1' declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='layerWithColor:fadingTo:alongVector:'>
<arg name='start' index='0' declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
<arg name='end' index='1' declared_type='ccColor4B' type='{_ccColor4B=CCCC}'/>
<arg type64='{CGPoint=dd}' name='v' index='2' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setCompressedInterpolation:'>
<arg name='compressedInterpolation' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEndColor:'>
<arg name='endColor' index='0' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEndOpacity:'>
<arg name='endOpacity' index='0' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStartColor:'>
<arg name='startColor' index='0' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStartOpacity:'>
<arg name='startOpacity' index='0' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVector:'>
<arg type64='{CGPoint=dd}' name='vector' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='startColor'>
<retval declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
</method>
<method selector='startOpacity'>
<retval declared_type='GLubyte' type='C'/>
</method>
<method selector='vector'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
</class>
<class name='CCLayerMultiplex'>
<method selector='initWithLayers:vaList:'>
<arg name='layer' index='0' declared_type='CCLayer*' type='@'/>
<arg declared_type64='__va_list_tag*' type64='^{__va_list_tag=II^v^v}' name='params' index='1' declared_type='va_list' type='*'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' sentinel='0' selector='layerWithLayers:' variadic='true'>
<arg name='layer' index='0' declared_type='CCLayer*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='switchTo:'>
<arg name='n' index='0' declared_type='unsigned int' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='switchToAndReleaseMe:'>
<arg name='n' index='0' declared_type='unsigned int' type='I'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCLens3D'>
<method class_method='true' selector='actionWithPosition:radius:grid:duration:'>
<arg type64='{CGPoint=dd}' name='pos' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='r' index='1' declared_type='float' type='f'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithPosition:radius:grid:duration:'>
<arg type64='{CGPoint=dd}' name='pos' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='r' index='1' declared_type='float' type='f'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='lensEffect'>
<retval declared_type='float' type='f'/>
</method>
<method selector='position'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='setLensEffect:'>
<arg name='lensEffect' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPosition:'>
<arg type64='{CGPoint=dd}' name='position' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCLiquid'>
<method class_method='true' selector='actionWithWaves:amplitude:grid:duration:'>
<arg name='wav' index='0' declared_type='int' type='i'/>
<arg name='amp' index='1' declared_type='float' type='f'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='amplitude'>
<retval declared_type='float' type='f'/>
</method>
<method selector='amplitudeRate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='initWithWaves:amplitude:grid:duration:'>
<arg name='wav' index='0' declared_type='int' type='i'/>
<arg name='amp' index='1' declared_type='float' type='f'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setAmplitude:'>
<arg name='amplitude' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAmplitudeRate:'>
<arg name='amplitudeRate' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCMenu'>
<method selector='alignItemsHorizontally'>
<retval declared_type='void' type='v'/>
</method>
<method selector='alignItemsHorizontallyWithPadding:'>
<arg name='padding' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method sentinel='0' selector='alignItemsInColumns:' variadic='true'>
<arg name='columns' index='0' declared_type='NSNumber*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='alignItemsInColumns:vaList:'>
<arg name='columns' index='0' declared_type='NSNumber*' type='@'/>
<arg declared_type64='__va_list_tag*' type64='^{__va_list_tag=II^v^v}' name='args' index='1' declared_type='va_list' type='*'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='alignItemsInColumnsWithArray:'>
<arg name='arrayOfNumbers' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method sentinel='0' selector='alignItemsInRows:' variadic='true'>
<arg name='rows' index='0' declared_type='NSNumber*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='alignItemsInRows:vaList:'>
<arg name='rows' index='0' declared_type='NSNumber*' type='@'/>
<arg declared_type64='__va_list_tag*' type64='^{__va_list_tag=II^v^v}' name='args' index='1' declared_type='va_list' type='*'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='alignItemsInRowsWithArray:'>
<arg name='arrayOfNumbers' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='alignItemsVertically'>
<retval declared_type='void' type='v'/>
</method>
<method selector='alignItemsVerticallyWithPadding:'>
<arg name='padding' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='color'>
<retval declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
</method>
<method selector='enabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithArray:'>
<arg name='arrayOfItems' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='menuWithArray:'>
<arg name='arrayOfItems' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' sentinel='0' selector='menuWithItems:' variadic='true'>
<arg name='item' index='0' declared_type='CCMenuItem*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='menuWithItems:vaList:'>
<arg name='firstItem' index='0' declared_type='CCMenuItem*' type='@'/>
<arg declared_type64='__va_list_tag*' type64='^{__va_list_tag=II^v^v}' name='args' index='1' declared_type='va_list' type='*'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='opacity'>
<retval declared_type='GLubyte' type='C'/>
</method>
<method selector='setEnabled:'>
<arg name='enabled' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHandlerPriority:'>
<arg type64='q' name='newPriority' index='0' declared_type='NSInteger' type='i'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCMenuItem'>
<method selector='activate'>
<retval declared_type='void' type='v'/>
</method>
<method selector='cleanup'>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithBlock:'>
<arg name='block' index='0' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTarget:selector:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<arg name='selector' index='1' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSelected'>
<retval declared_type='BOOL' type='B'/>
</method>
<method class_method='true' selector='itemWithBlock:'>
<arg name='block' index='0' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithTarget:selector:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<arg name='selector' index='1' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='rect'>
<retval type64='{CGRect={CGPoint=dd}{CGSize=dd}}' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</method>
<method selector='selected'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBlock:'>
<arg name='block' index='0' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIsEnabled:'>
<arg name='enabled' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTarget:selector:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<arg name='selector' index='1' declared_type='SEL' type=':'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unselected'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCMenuItemAtlasFont'>
<method selector='initFromString:charMapFile:itemWidth:itemHeight:startCharMap:block:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='charMapFile' index='1' declared_type='NSString*' type='@'/>
<arg name='itemWidth' index='2' declared_type='int' type='i'/>
<arg name='itemHeight' index='3' declared_type='int' type='i'/>
<arg name='startCharMap' index='4' declared_type='char' type='c'/>
<arg name='block' index='5' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='initFromString:charMapFile:itemWidth:itemHeight:startCharMap:target:selector:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='charMapFile' index='1' declared_type='NSString*' type='@'/>
<arg name='itemWidth' index='2' declared_type='int' type='i'/>
<arg name='itemHeight' index='3' declared_type='int' type='i'/>
<arg name='startCharMap' index='4' declared_type='char' type='c'/>
<arg name='rec' index='5' declared_type='id' type='@'/>
<arg name='cb' index='6' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:charMapFile:itemWidth:itemHeight:startCharMap:block:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='charMapFile' index='1' declared_type='NSString*' type='@'/>
<arg name='itemWidth' index='2' declared_type='int' type='i'/>
<arg name='itemHeight' index='3' declared_type='int' type='i'/>
<arg name='startCharMap' index='4' declared_type='char' type='c'/>
<arg name='block' index='5' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:charMapFile:itemWidth:itemHeight:startCharMap:target:selector:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='charMapFile' index='1' declared_type='NSString*' type='@'/>
<arg name='itemWidth' index='2' declared_type='int' type='i'/>
<arg name='itemHeight' index='3' declared_type='int' type='i'/>
<arg name='startCharMap' index='4' declared_type='char' type='c'/>
<arg name='target' index='5' declared_type='id' type='@'/>
<arg name='selector' index='6' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromString:charMapFile:itemWidth:itemHeight:startCharMap:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='charMapFile' index='1' declared_type='NSString*' type='@'/>
<arg name='itemWidth' index='2' declared_type='int' type='i'/>
<arg name='itemHeight' index='3' declared_type='int' type='i'/>
<arg name='startCharMap' index='4' declared_type='char' type='c'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromString:charMapFile:itemWidth:itemHeight:startCharMap:block:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='charMapFile' index='1' declared_type='NSString*' type='@'/>
<arg name='itemWidth' index='2' declared_type='int' type='i'/>
<arg name='itemHeight' index='3' declared_type='int' type='i'/>
<arg name='startCharMap' index='4' declared_type='char' type='c'/>
<arg name='block' index='5' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromString:charMapFile:itemWidth:itemHeight:startCharMap:target:selector:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='charMapFile' index='1' declared_type='NSString*' type='@'/>
<arg name='itemWidth' index='2' declared_type='int' type='i'/>
<arg name='itemHeight' index='3' declared_type='int' type='i'/>
<arg name='startCharMap' index='4' declared_type='char' type='c'/>
<arg name='rec' index='5' declared_type='id' type='@'/>
<arg name='cb' index='6' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithString:charMapFile:itemWidth:itemHeight:startCharMap:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='charMapFile' index='1' declared_type='NSString*' type='@'/>
<arg name='itemWidth' index='2' declared_type='int' type='i'/>
<arg name='itemHeight' index='3' declared_type='int' type='i'/>
<arg name='startCharMap' index='4' declared_type='char' type='c'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithString:charMapFile:itemWidth:itemHeight:startCharMap:block:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='charMapFile' index='1' declared_type='NSString*' type='@'/>
<arg name='itemWidth' index='2' declared_type='int' type='i'/>
<arg name='itemHeight' index='3' declared_type='int' type='i'/>
<arg name='startCharMap' index='4' declared_type='char' type='c'/>
<arg name='block' index='5' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithString:charMapFile:itemWidth:itemHeight:startCharMap:target:selector:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='charMapFile' index='1' declared_type='NSString*' type='@'/>
<arg name='itemWidth' index='2' declared_type='int' type='i'/>
<arg name='itemHeight' index='3' declared_type='int' type='i'/>
<arg name='startCharMap' index='4' declared_type='char' type='c'/>
<arg name='target' index='5' declared_type='id' type='@'/>
<arg name='selector' index='6' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCMenuItemFont'>
<method class_method='true' selector='fontName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='fontName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method class_method='true' selector='fontSize'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='fontSize'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='initFromString:block:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='block' index='1' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='initFromString:target:selector:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='r' index='1' declared_type='id' type='@'/>
<arg name='s' index='2' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:block:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='block' index='1' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:target:selector:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='r' index='1' declared_type='id' type='@'/>
<arg name='s' index='2' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromString:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromString:block:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='block' index='1' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromString:target:selector:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='r' index='1' declared_type='id' type='@'/>
<arg name='s' index='2' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithString:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithString:block:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='block' index='1' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithString:target:selector:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='r' index='1' declared_type='id' type='@'/>
<arg name='s' index='2' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='setFontName:'>
<arg name='n' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFontName:'>
<arg name='n' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='setFontSize:'>
<arg type64='Q' name='s' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFontSize:'>
<arg type64='Q' name='s' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCMenuItemImage'>
<method selector='initFromNormalImage:selectedImage:disabledImage:block:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<arg name='value3' index='2' declared_type='NSString*' type='@'/>
<arg name='block' index='3' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='initFromNormalImage:selectedImage:disabledImage:target:selector:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<arg name='value3' index='2' declared_type='NSString*' type='@'/>
<arg name='r' index='3' declared_type='id' type='@'/>
<arg name='s' index='4' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithNormalImage:selectedImage:disabledImage:block:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<arg name='value3' index='2' declared_type='NSString*' type='@'/>
<arg name='block' index='3' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithNormalImage:selectedImage:disabledImage:target:selector:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<arg name='value3' index='2' declared_type='NSString*' type='@'/>
<arg name='r' index='3' declared_type='id' type='@'/>
<arg name='s' index='4' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromNormalImage:selectedImage:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromNormalImage:selectedImage:block:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<arg name='block' index='2' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromNormalImage:selectedImage:disabledImage:block:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<arg name='value3' index='2' declared_type='NSString*' type='@'/>
<arg name='block' index='3' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromNormalImage:selectedImage:disabledImage:target:selector:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<arg name='value3' index='2' declared_type='NSString*' type='@'/>
<arg name='r' index='3' declared_type='id' type='@'/>
<arg name='s' index='4' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromNormalImage:selectedImage:target:selector:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<arg name='r' index='2' declared_type='id' type='@'/>
<arg name='s' index='3' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithNormalImage:selectedImage:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithNormalImage:selectedImage:block:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<arg name='block' index='2' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithNormalImage:selectedImage:disabledImage:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<arg name='value3' index='2' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithNormalImage:selectedImage:disabledImage:block:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<arg name='value3' index='2' declared_type='NSString*' type='@'/>
<arg name='block' index='3' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithNormalImage:selectedImage:disabledImage:target:selector:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<arg name='value3' index='2' declared_type='NSString*' type='@'/>
<arg name='r' index='3' declared_type='id' type='@'/>
<arg name='s' index='4' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithNormalImage:selectedImage:target:selector:'>
<arg name='value' index='0' declared_type='NSString*' type='@'/>
<arg name='value2' index='1' declared_type='NSString*' type='@'/>
<arg name='r' index='2' declared_type='id' type='@'/>
<arg name='s' index='3' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setDisabledSpriteFrame:'>
<arg name='frame' index='0' declared_type='CCSpriteFrame*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNormalSpriteFrame:'>
<arg name='frame' index='0' declared_type='CCSpriteFrame*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedSpriteFrame:'>
<arg name='frame' index='0' declared_type='CCSpriteFrame*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCMenuItemLabel'>
<method selector='disabledColor'>
<retval declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
</method>
<method selector='initWithLabel:block:'>
<arg name='label' index='0' declared_type='CCNode*' type='@'/>
<arg name='block' index='1' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithLabel:target:selector:'>
<arg name='label' index='0' declared_type='CCNode*' type='@'/>
<arg name='target' index='1' declared_type='id' type='@'/>
<arg name='selector' index='2' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithLabel:'>
<arg name='label' index='0' declared_type='CCNode*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithLabel:block:'>
<arg name='label' index='0' declared_type='CCNode*' type='@'/>
<arg name='block' index='1' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithLabel:target:selector:'>
<arg name='label' index='0' declared_type='CCNode*' type='@'/>
<arg name='target' index='1' declared_type='id' type='@'/>
<arg name='selector' index='2' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='label'>
<retval declared_type='CCNode*' type='@'/>
</method>
<method selector='setDisabledColor:'>
<arg name='disabledColor' index='0' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIsEnabled:'>
<arg name='enabled' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabel:'>
<arg name='label' index='0' declared_type='CCNode*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setString:'>
<arg name='label' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCMenuItemSprite'>
<method selector='disabledImage'>
<retval declared_type='CCNode*' type='@'/>
</method>
<method selector='initFromNormalSprite:selectedSprite:disabledSprite:block:'>
<arg name='normalSprite' index='0' declared_type='CCNode*' type='@'/>
<arg name='selectedSprite' index='1' declared_type='CCNode*' type='@'/>
<arg name='disabledSprite' index='2' declared_type='CCNode*' type='@'/>
<arg name='block' index='3' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='initFromNormalSprite:selectedSprite:disabledSprite:target:selector:'>
<arg name='normalSprite' index='0' declared_type='CCNode*' type='@'/>
<arg name='selectedSprite' index='1' declared_type='CCNode*' type='@'/>
<arg name='disabledSprite' index='2' declared_type='CCNode*' type='@'/>
<arg name='target' index='3' declared_type='id' type='@'/>
<arg name='selector' index='4' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithNormalSprite:selectedSprite:disabledSprite:block:'>
<arg name='normalSprite' index='0' declared_type='CCNode*' type='@'/>
<arg name='selectedSprite' index='1' declared_type='CCNode*' type='@'/>
<arg name='disabledSprite' index='2' declared_type='CCNode*' type='@'/>
<arg name='block' index='3' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithNormalSprite:selectedSprite:disabledSprite:target:selector:'>
<arg name='normalSprite' index='0' declared_type='CCNode*' type='@'/>
<arg name='selectedSprite' index='1' declared_type='CCNode*' type='@'/>
<arg name='disabledSprite' index='2' declared_type='CCNode*' type='@'/>
<arg name='target' index='3' declared_type='id' type='@'/>
<arg name='selector' index='4' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromNormalSprite:selectedSprite:'>
<arg name='normalSprite' index='0' declared_type='CCNode*' type='@'/>
<arg name='selectedSprite' index='1' declared_type='CCNode*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromNormalSprite:selectedSprite:block:'>
<arg name='normalSprite' index='0' declared_type='CCNode*' type='@'/>
<arg name='selectedSprite' index='1' declared_type='CCNode*' type='@'/>
<arg name='block' index='2' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromNormalSprite:selectedSprite:disabledSprite:block:'>
<arg name='normalSprite' index='0' declared_type='CCNode*' type='@'/>
<arg name='selectedSprite' index='1' declared_type='CCNode*' type='@'/>
<arg name='disabledSprite' index='2' declared_type='CCNode*' type='@'/>
<arg name='block' index='3' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromNormalSprite:selectedSprite:disabledSprite:target:selector:'>
<arg name='normalSprite' index='0' declared_type='CCNode*' type='@'/>
<arg name='selectedSprite' index='1' declared_type='CCNode*' type='@'/>
<arg name='disabledSprite' index='2' declared_type='CCNode*' type='@'/>
<arg name='target' index='3' declared_type='id' type='@'/>
<arg name='selector' index='4' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemFromNormalSprite:selectedSprite:target:selector:'>
<arg name='normalSprite' index='0' declared_type='CCNode*' type='@'/>
<arg name='selectedSprite' index='1' declared_type='CCNode*' type='@'/>
<arg name='target' index='2' declared_type='id' type='@'/>
<arg name='selector' index='3' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithNormalSprite:selectedSprite:'>
<arg name='normalSprite' index='0' declared_type='CCNode*' type='@'/>
<arg name='selectedSprite' index='1' declared_type='CCNode*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithNormalSprite:selectedSprite:block:'>
<arg name='normalSprite' index='0' declared_type='CCNode*' type='@'/>
<arg name='selectedSprite' index='1' declared_type='CCNode*' type='@'/>
<arg name='block' index='2' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithNormalSprite:selectedSprite:disabledSprite:block:'>
<arg name='normalSprite' index='0' declared_type='CCNode*' type='@'/>
<arg name='selectedSprite' index='1' declared_type='CCNode*' type='@'/>
<arg name='disabledSprite' index='2' declared_type='CCNode*' type='@'/>
<arg name='block' index='3' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithNormalSprite:selectedSprite:disabledSprite:target:selector:'>
<arg name='normalSprite' index='0' declared_type='CCNode*' type='@'/>
<arg name='selectedSprite' index='1' declared_type='CCNode*' type='@'/>
<arg name='disabledSprite' index='2' declared_type='CCNode*' type='@'/>
<arg name='target' index='3' declared_type='id' type='@'/>
<arg name='selector' index='4' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithNormalSprite:selectedSprite:target:selector:'>
<arg name='normalSprite' index='0' declared_type='CCNode*' type='@'/>
<arg name='selectedSprite' index='1' declared_type='CCNode*' type='@'/>
<arg name='target' index='2' declared_type='id' type='@'/>
<arg name='selector' index='3' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='normalImage'>
<retval declared_type='CCNode*' type='@'/>
</method>
<method selector='selectedImage'>
<retval declared_type='CCNode*' type='@'/>
</method>
<method selector='setDisabledImage:'>
<arg name='disabledImage' index='0' declared_type='CCNode*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNormalImage:'>
<arg name='normalImage' index='0' declared_type='CCNode*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedImage:'>
<arg name='selectedImage' index='0' declared_type='CCNode*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCMenuItemToggle'>
<method selector='color'>
<retval declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
</method>
<method selector='initWithItems:block:'>
<arg name='arrayOfItems' index='0' declared_type='NSArray*' type='@'/>
<arg name='block' index='1' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithItems:'>
<arg name='arrayOfItems' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithItems:block:'>
<arg name='arrayOfItems' index='0' declared_type='NSArray*' type='@'/>
<arg name='block' index='1' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' sentinel='0' selector='itemWithTarget:selector:items:' variadic='true'>
<arg name='target' index='0' declared_type='id' type='@'/>
<arg name='selector' index='1' declared_type='SEL' type=':'/>
<arg name='item' index='2' declared_type='CCMenuItem*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='itemWithTarget:selector:items:vaList:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<arg name='selector' index='1' declared_type='SEL' type=':'/>
<arg name='item' index='2' declared_type='CCMenuItem*' type='@'/>
<arg declared_type64='__va_list_tag*' type64='^{__va_list_tag=II^v^v}' name='args' index='3' declared_type='va_list' type='*'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='opacity'>
<retval declared_type='GLubyte' type='C'/>
</method>
<method selector='selectedIndex'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='selectedItem'>
<retval declared_type='CCMenuItem*' type='@'/>
</method>
<method selector='setSelectedIndex:'>
<arg type64='Q' name='selectedIndex' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSubItems:'>
<arg name='subItems' index='0' declared_type='NSMutableArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='subItems'>
<retval declared_type='NSMutableArray*' type='@'/>
</method>
</class>
<class name='CCMotionStreak'>
<method selector='blendFunc'>
<retval declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
</method>
<method selector='initWithFade:minSeg:width:color:texture:'>
<arg name='fade' index='0' declared_type='float' type='f'/>
<arg name='minSeg' index='1' declared_type='float' type='f'/>
<arg name='stroke' index='2' declared_type='float' type='f'/>
<arg name='color' index='3' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<arg name='texture' index='4' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFade:minSeg:width:color:textureFilename:'>
<arg name='fade' index='0' declared_type='float' type='f'/>
<arg name='minSeg' index='1' declared_type='float' type='f'/>
<arg name='stroke' index='2' declared_type='float' type='f'/>
<arg name='color' index='3' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<arg name='path' index='4' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isFastMode'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='reset'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBlendFunc:'>
<arg name='blendFunc' index='0' declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFastMode:'>
<arg name='fastMode' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTexture:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='streakWithFade:minSeg:width:color:texture:'>
<arg name='fade' index='0' declared_type='float' type='f'/>
<arg name='minSeg' index='1' declared_type='float' type='f'/>
<arg name='stroke' index='2' declared_type='float' type='f'/>
<arg name='color' index='3' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<arg name='texture' index='4' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='streakWithFade:minSeg:width:color:textureFilename:'>
<arg name='fade' index='0' declared_type='float' type='f'/>
<arg name='minSeg' index='1' declared_type='float' type='f'/>
<arg name='stroke' index='2' declared_type='float' type='f'/>
<arg name='color' index='3' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<arg name='path' index='4' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='texture'>
<retval declared_type='CCTexture2D*' type='@'/>
</method>
<method selector='tintWithColor:'>
<arg name='colors' index='0' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCMoveBy'>
<method class_method='true' selector='actionWithDuration:position:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg type64='{CGPoint=dd}' name='deltaPosition' index='1' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:position:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg type64='{CGPoint=dd}' name='deltaPosition' index='1' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCMoveTo'>
<method class_method='true' selector='actionWithDuration:position:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg type64='{CGPoint=dd}' name='position' index='1' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:position:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg type64='{CGPoint=dd}' name='position' index='1' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCNode'>
<method selector='actionManager'>
<retval declared_type='CCActionManager*' type='@'/>
</method>
<method selector='addChild:'>
<arg name='node' index='0' declared_type='CCNode*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addChild:z:'>
<arg name='node' index='0' declared_type='CCNode*' type='@'/>
<arg type64='q' name='z' index='1' declared_type='NSInteger' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addChild:z:tag:'>
<arg name='node' index='0' declared_type='CCNode*' type='@'/>
<arg type64='q' name='z' index='1' declared_type='NSInteger' type='i'/>
<arg type64='q' name='tag' index='2' declared_type='NSInteger' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='anchorPoint'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='anchorPointInPoints'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='boundingBox'>
<retval type64='{CGRect={CGPoint=dd}{CGSize=dd}}' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</method>
<method selector='camera'>
<retval declared_type='CCCamera*' type='@'/>
</method>
<method selector='children'>
<retval declared_type='CCArray*' type='@'/>
</method>
<method selector='cleanup'>
<retval declared_type='void' type='v'/>
</method>
<method selector='contentSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='convertToNodeSpace:'>
<arg type64='{CGPoint=dd}' name='worldPoint' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='convertToNodeSpaceAR:'>
<arg type64='{CGPoint=dd}' name='worldPoint' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='convertToWorldSpace:'>
<arg type64='{CGPoint=dd}' name='nodePoint' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='convertToWorldSpaceAR:'>
<arg type64='{CGPoint=dd}' name='nodePoint' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='convertTouchToNodeSpace:'>
<arg name='touch' index='0' declared_type='UITouch*' type='@'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='convertTouchToNodeSpaceAR:'>
<arg name='touch' index='0' declared_type='UITouch*' type='@'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='draw'>
<retval declared_type='void' type='v'/>
</method>
<method selector='getActionByTag:'>
<arg type64='q' name='tag' index='0' declared_type='NSInteger' type='i'/>
<retval declared_type='CCAction*' type='@'/>
</method>
<method selector='getChildByTag:'>
<arg type64='q' name='tag' index='0' declared_type='NSInteger' type='i'/>
<retval declared_type='CCNode*' type='@'/>
</method>
<method selector='glServerState'>
<retval declared_type='ccGLServerState' type='i'/>
</method>
<method selector='grid'>
<retval declared_type='CCGridBase*' type='@'/>
</method>
<method selector='ignoreAnchorPointForPosition'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
<method selector='isRelativeAnchorPoint'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isRunning'>
<retval declared_type='BOOL' type='B'/>
</method>
<method class_method='true' selector='node'>
<retval declared_type='id' type='@'/>
</method>
<method selector='nodeToParentTransform'>
<retval type64='{CGAffineTransform=dddddd}' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
</method>
<method selector='nodeToWorldTransform'>
<retval type64='{CGAffineTransform=dddddd}' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
</method>
<method selector='numberOfRunningActions'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='onEnter'>
<retval declared_type='void' type='v'/>
</method>
<method selector='onEnterTransitionDidFinish'>
<retval declared_type='void' type='v'/>
</method>
<method selector='onExit'>
<retval declared_type='void' type='v'/>
</method>
<method selector='onExitTransitionDidStart'>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderOfArrival'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='parent'>
<retval declared_type='CCNode*' type='@'/>
</method>
<method selector='parentToNodeTransform'>
<retval type64='{CGAffineTransform=dddddd}' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
</method>
<method selector='pauseSchedulerAndActions'>
<retval declared_type='void' type='v'/>
</method>
<method selector='position'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='removeAllChildrenWithCleanup:'>
<arg name='cleanup' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeChild:cleanup:'>
<arg name='node' index='0' declared_type='CCNode*' type='@'/>
<arg name='cleanup' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeChildByTag:cleanup:'>
<arg type64='q' name='tag' index='0' declared_type='NSInteger' type='i'/>
<arg name='cleanup' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeFromParentAndCleanup:'>
<arg name='cleanup' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='reorderChild:z:'>
<arg name='child' index='0' declared_type='CCNode*' type='@'/>
<arg type64='q' name='zOrder' index='1' declared_type='NSInteger' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='resumeSchedulerAndActions'>
<retval declared_type='void' type='v'/>
</method>
<method selector='rotation'>
<retval declared_type='float' type='f'/>
</method>
<method selector='rotationX'>
<retval declared_type='float' type='f'/>
</method>
<method selector='rotationY'>
<retval declared_type='float' type='f'/>
</method>
<method selector='runAction:'>
<arg name='action' index='0' declared_type='CCAction*' type='@'/>
<retval declared_type='CCAction*' type='@'/>
</method>
<method selector='scale'>
<retval declared_type='float' type='f'/>
</method>
<method selector='scaleX'>
<retval declared_type='float' type='f'/>
</method>
<method selector='scaleY'>
<retval declared_type='float' type='f'/>
</method>
<method selector='schedule:'>
<arg name='s' index='0' declared_type='SEL' type=':'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='schedule:interval:'>
<arg name='s' index='0' declared_type='SEL' type=':'/>
<arg name='seconds' index='1' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='schedule:interval:repeat:delay:'>
<arg name='selector' index='0' declared_type='SEL' type=':'/>
<arg name='interval' index='1' declared_type='ccTime' type='f'/>
<arg name='repeat' index='2' declared_type='uint' type='I'/>
<arg name='delay' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scheduleOnce:delay:'>
<arg name='selector' index='0' declared_type='SEL' type=':'/>
<arg name='delay' index='1' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scheduleUpdate'>
<retval declared_type='void' type='v'/>
</method>
<method selector='scheduleUpdateWithPriority:'>
<arg type64='q' name='priority' index='0' declared_type='NSInteger' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scheduler'>
<retval declared_type='CCScheduler*' type='@'/>
</method>
<method selector='setActionManager:'>
<arg name='actionManager' index='0' declared_type='CCActionManager*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAnchorPoint:'>
<arg type64='{CGPoint=dd}' name='anchorPoint' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentSize:'>
<arg type64='{CGSize=dd}' name='contentSize' index='0' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGlServerState:'>
<arg name='glServerState' index='0' declared_type='ccGLServerState' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGrid:'>
<arg name='grid' index='0' declared_type='CCGridBase*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIgnoreAnchorPointForPosition:'>
<arg name='ignoreAnchorPointForPosition' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIsRelativeAnchorPoint:'>
<arg name='value' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOrderOfArrival:'>
<arg type64='Q' name='orderOfArrival' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setParent:'>
<arg name='parent' index='0' declared_type='CCNode*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPosition:'>
<arg type64='{CGPoint=dd}' name='position' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRotation:'>
<arg name='rotation' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRotationX:'>
<arg name='rotationX' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRotationY:'>
<arg name='rotationY' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScale:'>
<arg name='scale' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScaleX:'>
<arg name='scaleX' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScaleY:'>
<arg name='scaleY' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScheduler:'>
<arg name='scheduler' index='0' declared_type='CCScheduler*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShaderProgram:'>
<arg name='shaderProgram' index='0' declared_type='CCGLProgram*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSkewX:'>
<arg name='skewX' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSkewY:'>
<arg name='skewY' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTag:'>
<arg type64='q' name='tag' index='0' declared_type='NSInteger' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUserData:'>
<arg name='userData' index='0' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUserObject:'>
<arg name='userObject' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVertexZ:'>
<arg name='vertexZ' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVisible:'>
<arg name='visible' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setZOrder:'>
<arg type64='Q' name='z' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shaderProgram'>
<retval declared_type='CCGLProgram*' type='@'/>
</method>
<method selector='skewX'>
<retval declared_type='float' type='f'/>
</method>
<method selector='skewY'>
<retval declared_type='float' type='f'/>
</method>
<method selector='sortAllChildren'>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopAction:'>
<arg name='action' index='0' declared_type='CCAction*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopActionByTag:'>
<arg type64='q' name='tag' index='0' declared_type='NSInteger' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopAllActions'>
<retval declared_type='void' type='v'/>
</method>
<method selector='tag'>
<retval type64='q' declared_type='NSInteger' type='i'/>
</method>
<method selector='transform'>
<retval declared_type='void' type='v'/>
</method>
<method selector='transformAncestors'>
<retval declared_type='void' type='v'/>
</method>
<method selector='unschedule:'>
<arg name='s' index='0' declared_type='SEL' type=':'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unscheduleAllSelectors'>
<retval declared_type='void' type='v'/>
</method>
<method selector='unscheduleUpdate'>
<retval declared_type='void' type='v'/>
</method>
<method selector='update:'>
<arg name='delta' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='userData'>
<retval declared_type='void*' type='^v'/>
</method>
<method selector='userObject'>
<retval declared_type='id' type='@'/>
</method>
<method selector='vertexZ'>
<retval declared_type='float' type='f'/>
</method>
<method selector='visible'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='visit'>
<retval declared_type='void' type='v'/>
</method>
<method selector='worldToNodeTransform'>
<retval type64='{CGAffineTransform=dddddd}' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
</method>
<method selector='zOrder'>
<retval type64='q' declared_type='NSInteger' type='i'/>
</method>
</class>
<class name='CCOrbitCamera'>
<method class_method='true' selector='actionWithDuration:radius:deltaRadius:angleZ:deltaAngleZ:angleX:deltaAngleX:'>
<arg name='t' index='0' declared_type='float' type='f'/>
<arg name='r' index='1' declared_type='float' type='f'/>
<arg name='dr' index='2' declared_type='float' type='f'/>
<arg name='z' index='3' declared_type='float' type='f'/>
<arg name='dz' index='4' declared_type='float' type='f'/>
<arg name='x' index='5' declared_type='float' type='f'/>
<arg name='dx' index='6' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:radius:deltaRadius:angleZ:deltaAngleZ:angleX:deltaAngleX:'>
<arg name='t' index='0' declared_type='float' type='f'/>
<arg name='r' index='1' declared_type='float' type='f'/>
<arg name='dr' index='2' declared_type='float' type='f'/>
<arg name='z' index='3' declared_type='float' type='f'/>
<arg name='dz' index='4' declared_type='float' type='f'/>
<arg name='x' index='5' declared_type='float' type='f'/>
<arg name='dx' index='6' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='sphericalRadius:zenith:azimuth:'>
<arg name='r' index='0' declared_type='float*' type='^f'/>
<arg name='zenith' index='1' declared_type='float*' type='^f'/>
<arg name='azimuth' index='2' declared_type='float*' type='^f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCParallaxNode'>
<method selector='addChild:z:parallaxRatio:positionOffset:'>
<arg name='node' index='0' declared_type='CCNode*' type='@'/>
<arg type64='q' name='z' index='1' declared_type='NSInteger' type='i'/>
<arg type64='{CGPoint=dd}' name='c' index='2' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGPoint=dd}' name='positionOffset' index='3' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='parallaxArray'>
<retval type64='^{ccArray=QQ^@}' declared_type='ccArray*' type='^{ccArray=II^@}'/>
</method>
<method selector='setParallaxArray:'>
<arg type64='^{ccArray=QQ^@}' name='parallaxArray' index='0' declared_type='ccArray*' type='^{ccArray=II^@}'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCParticleBatchNode'>
<method selector='addChild:z:tag:'>
<arg name='child' index='0' declared_type='CCParticleSystem*' type='@'/>
<arg type64='q' name='z' index='1' declared_type='NSInteger' type='i'/>
<arg type64='q' name='aTag' index='2' declared_type='NSInteger' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='batchNodeWithFile:'>
<arg name='imageFile' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='batchNodeWithFile:capacity:'>
<arg name='fileImage' index='0' declared_type='NSString*' type='@'/>
<arg type64='Q' name='capacity' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='batchNodeWithTexture:'>
<arg name='tex' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='batchNodeWithTexture:capacity:'>
<arg name='tex' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='Q' name='capacity' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='blendFunc'>
<retval declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
</method>
<method selector='disableParticle:'>
<arg type64='Q' name='particleIndex' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithFile:capacity:'>
<arg name='fileImage' index='0' declared_type='NSString*' type='@'/>
<arg type64='Q' name='capacity' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTexture:capacity:'>
<arg name='tex' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='Q' name='capacity' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertChild:inAtlasAtIndex:'>
<arg name='pSystem' index='0' declared_type='CCParticleSystem*' type='@'/>
<arg type64='Q' name='index' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeChild:cleanup:'>
<arg name='pSystem' index='0' declared_type='CCParticleSystem*' type='@'/>
<arg name='doCleanUp' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBlendFunc:'>
<arg name='blendFunc' index='0' declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextureAtlas:'>
<arg name='textureAtlas' index='0' declared_type='CCTextureAtlas*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textureAtlas'>
<retval declared_type='CCTextureAtlas*' type='@'/>
</method>
</class>
<class name='CCParticleExplosion'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCParticleFire'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCParticleFireworks'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCParticleFlower'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCParticleGalaxy'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCParticleMeteor'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCParticleRain'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCParticleSmoke'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCParticleSnow'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCParticleSpiral'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCParticleSun'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCParticleSystem'>
<method selector='active'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='angle'>
<retval declared_type='float' type='f'/>
</method>
<method selector='angleVar'>
<retval declared_type='float' type='f'/>
</method>
<method selector='atlasIndex'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='autoRemoveOnFinish'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='batchNode'>
<retval declared_type='CCParticleBatchNode*' type='@'/>
</method>
<method selector='blendAdditive'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='blendFunc'>
<retval declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
</method>
<method selector='doesOpacityModifyRGB'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='duration'>
<retval declared_type='float' type='f'/>
</method>
<method selector='emissionRate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='emitterMode'>
<retval type64='q' declared_type='NSInteger' type='i'/>
</method>
<method selector='endColor'>
<retval declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
</method>
<method selector='endColorVar'>
<retval declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
</method>
<method selector='endRadius'>
<retval declared_type='float' type='f'/>
</method>
<method selector='endRadiusVar'>
<retval declared_type='float' type='f'/>
</method>
<method selector='endSize'>
<retval declared_type='float' type='f'/>
</method>
<method selector='endSizeVar'>
<retval declared_type='float' type='f'/>
</method>
<method selector='endSpin'>
<retval declared_type='float' type='f'/>
</method>
<method selector='endSpinVar'>
<retval declared_type='float' type='f'/>
</method>
<method selector='gravity'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='initWithDictionary:'>
<arg name='dictionary' index='0' declared_type='NSDictionary*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFile:'>
<arg name='plistFile' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTotalParticles:'>
<arg type64='Q' name='numberOfParticles' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isFull'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='life'>
<retval declared_type='float' type='f'/>
</method>
<method selector='lifeVar'>
<retval declared_type='float' type='f'/>
</method>
<method selector='particleCount'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method class_method='true' selector='particleWithFile:'>
<arg name='plistFile' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='particleWithTotalParticles:'>
<arg type64='Q' name='numberOfParticles' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='posVar'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='positionType'>
<retval declared_type='tCCPositionType' type='i'/>
</method>
<method selector='postStep'>
<retval declared_type='void' type='v'/>
</method>
<method selector='radialAccel'>
<retval declared_type='float' type='f'/>
</method>
<method selector='radialAccelVar'>
<retval declared_type='float' type='f'/>
</method>
<method selector='resetSystem'>
<retval declared_type='void' type='v'/>
</method>
<method selector='rotatePerSecond'>
<retval declared_type='float' type='f'/>
</method>
<method selector='rotatePerSecondVar'>
<retval declared_type='float' type='f'/>
</method>
<method selector='setAngle:'>
<arg name='angle' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAngleVar:'>
<arg name='angleVar' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAtlasIndex:'>
<arg type64='Q' name='atlasIndex' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutoRemoveOnFinish:'>
<arg name='autoRemoveOnFinish' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBatchNode:'>
<arg name='batchNode' index='0' declared_type='CCParticleBatchNode*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBlendAdditive:'>
<arg name='blendAdditive' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBlendFunc:'>
<arg name='blendFunc' index='0' declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDuration:'>
<arg name='duration' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEmissionRate:'>
<arg name='emissionRate' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEmitterMode:'>
<arg type64='q' name='emitterMode' index='0' declared_type='NSInteger' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEndColor:'>
<arg name='endColor' index='0' declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEndColorVar:'>
<arg name='endColorVar' index='0' declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEndRadius:'>
<arg name='endRadius' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEndRadiusVar:'>
<arg name='endRadiusVar' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEndSize:'>
<arg name='endSize' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEndSizeVar:'>
<arg name='endSizeVar' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEndSpin:'>
<arg name='endSpin' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEndSpinVar:'>
<arg name='endSpinVar' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGravity:'>
<arg type64='{CGPoint=dd}' name='gravity' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLife:'>
<arg name='life' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLifeVar:'>
<arg name='lifeVar' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOpacityModifyRGB:'>
<arg name='opacityModifyRGB' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPosVar:'>
<arg type64='{CGPoint=dd}' name='posVar' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPositionType:'>
<arg name='positionType' index='0' declared_type='tCCPositionType' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRadialAccel:'>
<arg name='radialAccel' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRadialAccelVar:'>
<arg name='radialAccelVar' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRotatePerSecond:'>
<arg name='rotatePerSecond' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRotatePerSecondVar:'>
<arg name='rotatePerSecondVar' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSourcePosition:'>
<arg type64='{CGPoint=dd}' name='sourcePosition' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSpeed:'>
<arg name='speed' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSpeedVar:'>
<arg name='speedVar' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStartColor:'>
<arg name='startColor' index='0' declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStartColorVar:'>
<arg name='startColorVar' index='0' declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStartRadius:'>
<arg name='startRadius' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStartRadiusVar:'>
<arg name='startRadiusVar' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStartSize:'>
<arg name='startSize' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStartSizeVar:'>
<arg name='startSizeVar' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStartSpin:'>
<arg name='startSpin' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStartSpinVar:'>
<arg name='startSpinVar' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTangentialAccel:'>
<arg name='tangentialAccel' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTangentialAccelVar:'>
<arg name='tangentialAccelVar' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTexture:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTotalParticles:'>
<arg type64='Q' name='totalParticles' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sourcePosition'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='speed'>
<retval declared_type='float' type='f'/>
</method>
<method selector='speedVar'>
<retval declared_type='float' type='f'/>
</method>
<method selector='startColor'>
<retval declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
</method>
<method selector='startColorVar'>
<retval declared_type='ccColor4F' type='{_ccColor4F=ffff}'/>
</method>
<method selector='startRadius'>
<retval declared_type='float' type='f'/>
</method>
<method selector='startRadiusVar'>
<retval declared_type='float' type='f'/>
</method>
<method selector='startSize'>
<retval declared_type='float' type='f'/>
</method>
<method selector='startSizeVar'>
<retval declared_type='float' type='f'/>
</method>
<method selector='startSpin'>
<retval declared_type='float' type='f'/>
</method>
<method selector='startSpinVar'>
<retval declared_type='float' type='f'/>
</method>
<method selector='stopSystem'>
<retval declared_type='void' type='v'/>
</method>
<method selector='tangentialAccel'>
<retval declared_type='float' type='f'/>
</method>
<method selector='tangentialAccelVar'>
<retval declared_type='float' type='f'/>
</method>
<method selector='texture'>
<retval declared_type='CCTexture2D*' type='@'/>
</method>
<method selector='totalParticles'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='update:'>
<arg name='dt' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateQuadWithParticle:newPosition:'>
<arg type64='^{sCCParticle={CGPoint=dd}{CGPoint=dd}{_ccColor4F=ffff}{_ccColor4F=ffff}fffffQ(?={?={CGPoint=dd}ff}{?=ffff})}' name='particle' index='0' declared_type='tCCParticle*' type='^{sCCParticle={CGPoint=ff}{CGPoint=ff}{_ccColor4F=ffff}{_ccColor4F=ffff}fffffI(?={?={CGPoint=ff}ff}{?=ffff})}'/>
<arg type64='{CGPoint=dd}' name='pos' index='1' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateWithNoTime'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCParticleSystemQuad'>
<method selector='initIndices'>
<retval declared_type='void' type='v'/>
</method>
<method selector='initTexCoordsWithRect:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDisplayFrame:'>
<arg name='spriteFrame' index='0' declared_type='CCSpriteFrame*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTexture:withRect:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCPlace'>
<method class_method='true' selector='actionWithPosition:'>
<arg type64='{CGPoint=dd}' name='pos' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithPosition:'>
<arg type64='{CGPoint=dd}' name='pos' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCPointArray'>
<method selector='addControlPoint:'>
<arg type64='{CGPoint=dd}' name='controlPoint' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='arrayWithCapacity:'>
<arg type64='Q' name='capacity' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='controlPoints'>
<retval declared_type='NSMutableArray*' type='@'/>
</method>
<method selector='count'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='getControlPointAtIndex:'>
<arg type64='q' name='index' index='0' declared_type='NSInteger' type='i'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='initWithCapacity:'>
<arg type64='Q' name='capacity' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertControlPoint:atIndex:'>
<arg type64='{CGPoint=dd}' name='controlPoint' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='Q' name='index' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeControlPointAtIndex:'>
<arg type64='Q' name='index' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='replaceControlPoint:atIndex:'>
<arg type64='{CGPoint=dd}' name='controlPoint' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='Q' name='index' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='reverse'>
<retval declared_type='CCPointArray*' type='@'/>
</method>
<method selector='reverseInline'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setControlPoints:'>
<arg name='controlPoints' index='0' declared_type='NSMutableArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCProfiler'>
<method selector='createAndAddTimerWithName:'>
<arg name='timerName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='CCProfilingTimer*' type='@'/>
</method>
<method selector='displayTimers'>
<retval declared_type='void' type='v'/>
</method>
<method selector='releaseAllTimers'>
<retval declared_type='void' type='v'/>
</method>
<method selector='releaseTimer:'>
<arg name='timerName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='sharedProfiler'>
<retval declared_type='CCProfiler*' type='@'/>
</method>
</class>
<class name='CCProfilingTimer'>
<method selector='reset'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCProgressFromTo'>
<method class_method='true' selector='actionWithDuration:from:to:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='fromPercentage' index='1' declared_type='float' type='f'/>
<arg name='toPercentage' index='2' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:from:to:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='fromPercentage' index='1' declared_type='float' type='f'/>
<arg name='toPercentage' index='2' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCProgressTimer'>
<method selector='barChangeRate'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='color'>
<retval declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
</method>
<method selector='initWithSprite:'>
<arg name='sprite' index='0' declared_type='CCSprite*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='midpoint'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='opacity'>
<retval declared_type='GLubyte' type='C'/>
</method>
<method selector='percentage'>
<retval declared_type='float' type='f'/>
</method>
<method class_method='true' selector='progressWithSprite:'>
<arg name='sprite' index='0' declared_type='CCSprite*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='reverseDirection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setBarChangeRate:'>
<arg type64='{CGPoint=dd}' name='barChangeRate' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColor:'>
<arg name='color' index='0' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMidpoint:'>
<arg type64='{CGPoint=dd}' name='midpoint' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOpacity:'>
<arg name='opacity' index='0' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPercentage:'>
<arg name='percentage' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setReverseDirection:'>
<arg name='reverseDirection' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSprite:'>
<arg name='sprite' index='0' declared_type='CCSprite*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setType:'>
<arg name='type' index='0' declared_type='CCProgressTimerType' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sprite'>
<retval declared_type='CCSprite*' type='@'/>
</method>
<method selector='type'>
<retval declared_type='CCProgressTimerType' type='i'/>
</method>
<method selector='vertexData'>
<retval declared_type='ccV2F_C4B_T2F*' type='^{_ccV2F_C4B_T2F={_ccVertex2F=ff}{_ccColor4B=CCCC}{_ccTex2F=ff}}'/>
</method>
<method selector='vertexDataCount'>
<retval declared_type='int' type='i'/>
</method>
</class>
<class name='CCProgressTo'>
<method class_method='true' selector='actionWithDuration:percent:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='percent' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:percent:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='percent' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCRenderTexture'>
<method selector='begin'>
<retval declared_type='void' type='v'/>
</method>
<method selector='beginWithClear:g:b:a:'>
<arg name='r' index='0' declared_type='float' type='f'/>
<arg name='g' index='1' declared_type='float' type='f'/>
<arg name='b' index='2' declared_type='float' type='f'/>
<arg name='a' index='3' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='beginWithClear:g:b:a:depth:'>
<arg name='r' index='0' declared_type='float' type='f'/>
<arg name='g' index='1' declared_type='float' type='f'/>
<arg name='b' index='2' declared_type='float' type='f'/>
<arg name='a' index='3' declared_type='float' type='f'/>
<arg name='depthValue' index='4' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='beginWithClear:g:b:a:depth:stencil:'>
<arg name='r' index='0' declared_type='float' type='f'/>
<arg name='g' index='1' declared_type='float' type='f'/>
<arg name='b' index='2' declared_type='float' type='f'/>
<arg name='a' index='3' declared_type='float' type='f'/>
<arg name='depthValue' index='4' declared_type='float' type='f'/>
<arg name='stencilValue' index='5' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='clear:g:b:a:'>
<arg name='r' index='0' declared_type='float' type='f'/>
<arg name='g' index='1' declared_type='float' type='f'/>
<arg name='b' index='2' declared_type='float' type='f'/>
<arg name='a' index='3' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='clearDepth:'>
<arg name='depthValue' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='clearStencil:'>
<arg name='stencilValue' index='0' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='end'>
<retval declared_type='void' type='v'/>
</method>
<method selector='getUIImage'>
<retval declared_type='UIImage*' type='@'/>
</method>
<method selector='getUIImageFromBuffer'>
<retval declared_type='UIImage*' type='@'/>
</method>
<method selector='initWithWidth:height:pixelFormat:'>
<arg name='w' index='0' declared_type='int' type='i'/>
<arg name='h' index='1' declared_type='int' type='i'/>
<arg name='format' index='2' declared_type='CCTexture2DPixelFormat' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithWidth:height:pixelFormat:depthStencilFormat:'>
<arg name='w' index='0' declared_type='int' type='i'/>
<arg name='h' index='1' declared_type='int' type='i'/>
<arg name='format' index='2' declared_type='CCTexture2DPixelFormat' type='i'/>
<arg name='depthStencilFormat' index='3' declared_type='GLuint' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='newCGImage'>
<retval declared_type='CGImageRef' type='^{CGImage=}'/>
</method>
<method class_method='true' selector='renderTextureWithWidth:height:'>
<arg name='w' index='0' declared_type='int' type='i'/>
<arg name='h' index='1' declared_type='int' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='renderTextureWithWidth:height:pixelFormat:'>
<arg name='w' index='0' declared_type='int' type='i'/>
<arg name='h' index='1' declared_type='int' type='i'/>
<arg name='format' index='2' declared_type='CCTexture2DPixelFormat' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='renderTextureWithWidth:height:pixelFormat:depthStencilFormat:'>
<arg name='w' index='0' declared_type='int' type='i'/>
<arg name='h' index='1' declared_type='int' type='i'/>
<arg name='format' index='2' declared_type='CCTexture2DPixelFormat' type='i'/>
<arg name='depthStencilFormat' index='3' declared_type='GLuint' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='saveBuffer:'>
<arg name='name' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='saveBuffer:format:'>
<arg name='name' index='0' declared_type='NSString*' type='@'/>
<arg name='format' index='1' declared_type='int' type='i'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='saveToFile:'>
<arg name='name' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='saveToFile:format:'>
<arg name='name' index='0' declared_type='NSString*' type='@'/>
<arg name='format' index='1' declared_type='tCCImageFormat' type='i'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setSprite:'>
<arg name='sprite' index='0' declared_type='CCSprite*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sprite'>
<retval declared_type='CCSprite*' type='@'/>
</method>
</class>
<class name='CCRepeat'>
<method class_method='true' selector='actionWithAction:times:'>
<arg name='action' index='0' declared_type='CCFiniteTimeAction*' type='@'/>
<arg type64='Q' name='times' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithAction:times:'>
<arg name='action' index='0' declared_type='CCFiniteTimeAction*' type='@'/>
<arg type64='Q' name='times' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='innerAction'>
<retval declared_type='CCFiniteTimeAction*' type='@'/>
</method>
<method selector='setInnerAction:'>
<arg name='innerAction' index='0' declared_type='CCFiniteTimeAction*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCRepeatForever'>
<method class_method='true' selector='actionWithAction:'>
<arg name='action' index='0' declared_type='CCActionInterval*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithAction:'>
<arg name='action' index='0' declared_type='CCActionInterval*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='innerAction'>
<retval declared_type='CCActionInterval*' type='@'/>
</method>
<method selector='setInnerAction:'>
<arg name='innerAction' index='0' declared_type='CCActionInterval*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCReuseGrid'>
<method class_method='true' selector='actionWithTimes:'>
<arg name='times' index='0' declared_type='int' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTimes:'>
<arg name='times' index='0' declared_type='int' type='i'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCReverseTime'>
<method class_method='true' selector='actionWithAction:'>
<arg name='action' index='0' declared_type='CCFiniteTimeAction*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithAction:'>
<arg name='action' index='0' declared_type='CCFiniteTimeAction*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCRipple3D'>
<method class_method='true' selector='actionWithPosition:radius:waves:amplitude:grid:duration:'>
<arg type64='{CGPoint=dd}' name='pos' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='r' index='1' declared_type='float' type='f'/>
<arg name='wav' index='2' declared_type='int' type='i'/>
<arg name='amp' index='3' declared_type='float' type='f'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='4' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='5' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='amplitude'>
<retval declared_type='float' type='f'/>
</method>
<method selector='amplitudeRate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='initWithPosition:radius:waves:amplitude:grid:duration:'>
<arg type64='{CGPoint=dd}' name='pos' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='r' index='1' declared_type='float' type='f'/>
<arg name='wav' index='2' declared_type='int' type='i'/>
<arg name='amp' index='3' declared_type='float' type='f'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='4' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='5' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='position'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='setAmplitude:'>
<arg name='amplitude' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAmplitudeRate:'>
<arg name='amplitudeRate' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPosition:'>
<arg type64='{CGPoint=dd}' name='position' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCRotateBy'>
<method class_method='true' selector='actionWithDuration:angle:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='deltaAngle' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='actionWithDuration:angleX:angleY:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg name='aX' index='1' declared_type='float' type='f'/>
<arg name='aY' index='2' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:angle:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='deltaAngle' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:angleX:angleY:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg name='aX' index='1' declared_type='float' type='f'/>
<arg name='aY' index='2' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCRotateTo'>
<method class_method='true' selector='actionWithDuration:angle:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='angle' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='actionWithDuration:angleX:angleY:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg name='aX' index='1' declared_type='float' type='f'/>
<arg name='aY' index='2' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:angle:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='angle' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:angleX:angleY:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg name='aX' index='1' declared_type='float' type='f'/>
<arg name='aY' index='2' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCScaleBy'>
<method selector='startWithTarget:'>
<arg name='aTarget' index='0' declared_type='CCNode*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCScaleTo'>
<method class_method='true' selector='actionWithDuration:scale:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='s' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='actionWithDuration:scaleX:scaleY:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='sx' index='1' declared_type='float' type='f'/>
<arg name='sy' index='2' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:scale:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='s' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:scaleX:scaleY:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='sx' index='1' declared_type='float' type='f'/>
<arg name='sy' index='2' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCScene'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCScheduler'>
<method selector='isTargetPaused:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='pauseAllTargets'>
<retval declared_type='NSSet*' type='@'/>
</method>
<method selector='pauseAllTargetsWithMinPriority:'>
<arg type64='q' name='minPriority' index='0' declared_type='NSInteger' type='i'/>
<retval declared_type='NSSet*' type='@'/>
</method>
<method selector='pauseTarget:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='resumeTarget:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='resumeTargets:'>
<arg name='targetsToResume' index='0' declared_type='NSSet*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scheduleBlockForKey:target:interval:paused:repeat:delay:block:'>
<arg name='key' index='0' declared_type='NSString*' type='@'/>
<arg name='target' index='1' declared_type='id' type='@'/>
<arg name='interval' index='2' declared_type='ccTime' type='f'/>
<arg name='paused' index='3' declared_type='BOOL' type='B'/>
<arg name='repeat' index='4' declared_type='uint' type='I'/>
<arg name='delay' index='5' declared_type='ccTime' type='f'/>
<arg name='block' index='6' declared_type='void (^)(ccTime)' function_pointer='true' type='@?'>
<arg declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='scheduleSelector:forTarget:interval:paused:'>
<arg name='selector' index='0' declared_type='SEL' type=':'/>
<arg name='target' index='1' declared_type='id' type='@'/>
<arg name='interval' index='2' declared_type='ccTime' type='f'/>
<arg name='paused' index='3' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scheduleSelector:forTarget:interval:paused:repeat:delay:'>
<arg name='selector' index='0' declared_type='SEL' type=':'/>
<arg name='target' index='1' declared_type='id' type='@'/>
<arg name='interval' index='2' declared_type='ccTime' type='f'/>
<arg name='paused' index='3' declared_type='BOOL' type='B'/>
<arg name='repeat' index='4' declared_type='uint' type='I'/>
<arg name='delay' index='5' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scheduleUpdateForTarget:priority:paused:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<arg type64='q' name='priority' index='1' declared_type='NSInteger' type='i'/>
<arg name='paused' index='2' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTimeScale:'>
<arg name='timeScale' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='sharedScheduler'>
<retval declared_type='CCScheduler*' type='@'/>
</method>
<method selector='timeScale'>
<retval declared_type='ccTime' type='f'/>
</method>
<method selector='unscheduleAllSelectors'>
<retval declared_type='void' type='v'/>
</method>
<method selector='unscheduleAllSelectorsForTarget:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unscheduleAllSelectorsWithMinPriority:'>
<arg type64='q' name='minPriority' index='0' declared_type='NSInteger' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unscheduleBlockForKey:target:'>
<arg name='key' index='0' declared_type='NSString*' type='@'/>
<arg name='target' index='1' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unscheduleSelector:forTarget:'>
<arg name='selector' index='0' declared_type='SEL' type=':'/>
<arg name='target' index='1' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unscheduleUpdateForTarget:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='update:'>
<arg name='dt' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCSequence'>
<method class_method='true' selector='actionOne:two:'>
<arg name='actionOne' index='0' declared_type='CCFiniteTimeAction*' type='@'/>
<arg name='actionTwo' index='1' declared_type='CCFiniteTimeAction*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='actionWithArray:'>
<arg name='arrayOfActions' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' sentinel='0' selector='actions:' variadic='true'>
<arg name='action1' index='0' declared_type='CCFiniteTimeAction*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='actions:vaList:'>
<arg name='action1' index='0' declared_type='CCFiniteTimeAction*' type='@'/>
<arg declared_type64='__va_list_tag*' type64='^{__va_list_tag=II^v^v}' name='args' index='1' declared_type='va_list' type='*'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='actionsWithArray:'>
<arg name='actions' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initOne:two:'>
<arg name='actionOne' index='0' declared_type='CCFiniteTimeAction*' type='@'/>
<arg name='actionTwo' index='1' declared_type='CCFiniteTimeAction*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCShaderCache'>
<method selector='addProgram:forKey:'>
<arg name='program' index='0' declared_type='CCGLProgram*' type='@'/>
<arg name='key' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='loadDefaultShaders'>
<retval declared_type='void' type='v'/>
</method>
<method selector='programForKey:'>
<arg name='key' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='CCGLProgram*' type='@'/>
</method>
<method class_method='true' selector='purgeSharedShaderCache'>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='sharedShaderCache'>
<retval declared_type='CCShaderCache*' type='@'/>
</method>
</class>
<class name='CCShaky3D'>
<method class_method='true' selector='actionWithRange:shakeZ:grid:duration:'>
<arg name='range' index='0' declared_type='int' type='i'/>
<arg name='shakeZ' index='1' declared_type='BOOL' type='B'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithRange:shakeZ:grid:duration:'>
<arg name='range' index='0' declared_type='int' type='i'/>
<arg name='shakeZ' index='1' declared_type='BOOL' type='B'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCShakyTiles3D'>
<method class_method='true' selector='actionWithRange:shakeZ:grid:duration:'>
<arg name='range' index='0' declared_type='int' type='i'/>
<arg name='shakeZ' index='1' declared_type='BOOL' type='B'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithRange:shakeZ:grid:duration:'>
<arg name='range' index='0' declared_type='int' type='i'/>
<arg name='shakeZ' index='1' declared_type='BOOL' type='B'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCShatteredTiles3D'>
<method class_method='true' selector='actionWithRange:shatterZ:grid:duration:'>
<arg name='range' index='0' declared_type='int' type='i'/>
<arg name='shatterZ' index='1' declared_type='BOOL' type='B'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithRange:shatterZ:grid:duration:'>
<arg name='range' index='0' declared_type='int' type='i'/>
<arg name='shatterZ' index='1' declared_type='BOOL' type='B'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCShow'>
<method selector='update:'>
<arg name='time' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCShuffleTiles'>
<method class_method='true' selector='actionWithSeed:grid:duration:'>
<arg name='s' index='0' declared_type='int' type='i'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='1' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='2' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithSeed:grid:duration:'>
<arg name='s' index='0' declared_type='int' type='i'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='1' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='2' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCSkewBy'>
<method selector='initWithDuration:skewX:skewY:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg name='sx' index='1' declared_type='float' type='f'/>
<arg name='sy' index='2' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCSkewTo'>
<method class_method='true' selector='actionWithDuration:skewX:skewY:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg name='sx' index='1' declared_type='float' type='f'/>
<arg name='sy' index='2' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:skewX:skewY:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg name='sx' index='1' declared_type='float' type='f'/>
<arg name='sy' index='2' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCSpawn'>
<method class_method='true' selector='actionOne:two:'>
<arg name='one' index='0' declared_type='CCFiniteTimeAction*' type='@'/>
<arg name='two' index='1' declared_type='CCFiniteTimeAction*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='actionWithArray:'>
<arg name='arrayOfActions' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' sentinel='0' selector='actions:' variadic='true'>
<arg name='action1' index='0' declared_type='CCFiniteTimeAction*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='actions:vaList:'>
<arg name='action1' index='0' declared_type='CCFiniteTimeAction*' type='@'/>
<arg declared_type64='__va_list_tag*' type64='^{__va_list_tag=II^v^v}' name='args' index='1' declared_type='va_list' type='*'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='actionsWithArray:'>
<arg name='actions' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initOne:two:'>
<arg name='one' index='0' declared_type='CCFiniteTimeAction*' type='@'/>
<arg name='two' index='1' declared_type='CCFiniteTimeAction*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCSpeed'>
<method class_method='true' selector='actionWithAction:speed:'>
<arg name='action' index='0' declared_type='CCActionInterval*' type='@'/>
<arg name='value' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithAction:speed:'>
<arg name='action' index='0' declared_type='CCActionInterval*' type='@'/>
<arg name='value' index='1' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='innerAction'>
<retval declared_type='CCActionInterval*' type='@'/>
</method>
<method selector='setInnerAction:'>
<arg name='innerAction' index='0' declared_type='CCActionInterval*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSpeed:'>
<arg name='speed' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='speed'>
<retval declared_type='float' type='f'/>
</method>
</class>
<class name='CCSplitCols'>
<method class_method='true' selector='actionWithCols:duration:'>
<arg name='cols' index='0' declared_type='int' type='i'/>
<arg name='duration' index='1' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithCols:duration:'>
<arg name='cols' index='0' declared_type='int' type='i'/>
<arg name='duration' index='1' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCSplitRows'>
<method class_method='true' selector='actionWithRows:duration:'>
<arg name='rows' index='0' declared_type='int' type='i'/>
<arg name='duration' index='1' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithRows:duration:'>
<arg name='rows' index='0' declared_type='int' type='i'/>
<arg name='duration' index='1' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCSprite'>
<method selector='atlasIndex'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='batchNode'>
<retval declared_type='CCSpriteBatchNode*' type='@'/>
</method>
<method selector='blendFunc'>
<retval declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
</method>
<method selector='color'>
<retval declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
</method>
<method selector='dirty'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='displayFrame'>
<retval declared_type='CCSpriteFrame*' type='@'/>
</method>
<method selector='displayedFrame'>
<retval declared_type='CCSpriteFrame*' type='@'/>
</method>
<method selector='flipX'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='flipY'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithBatchNode:rect:'>
<arg name='node' index='0' declared_type='CCSpriteBatchNode*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithCGImage:key:'>
<arg name='image' index='0' declared_type='CGImageRef' type='^{CGImage=}'/>
<arg name='key' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFile:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFile:rect:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithSpriteFrame:'>
<arg name='spriteFrame' index='0' declared_type='CCSpriteFrame*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithSpriteFrameName:'>
<arg name='spriteFrameName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTexture:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTexture:rect:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTexture:rect:rotated:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='rotated' index='2' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isFrameDisplayed:'>
<arg name='frame' index='0' declared_type='CCSpriteFrame*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='offsetPosition'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='opacity'>
<retval declared_type='GLubyte' type='C'/>
</method>
<method selector='quad'>
<retval declared_type='ccV3F_C4B_T2F_Quad' type='{_ccV3F_C4B_T2F_Quad={_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}}'/>
</method>
<method selector='setAtlasIndex:'>
<arg type64='Q' name='atlasIndex' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBatchNode:'>
<arg name='batchNode' index='0' declared_type='CCSpriteBatchNode*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBlendFunc:'>
<arg name='blendFunc' index='0' declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColor:'>
<arg name='color' index='0' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDirty:'>
<arg name='dirty' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDisplayFrame:'>
<arg name='newFrame' index='0' declared_type='CCSpriteFrame*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDisplayFrameWithAnimationName:index:'>
<arg name='animationName' index='0' declared_type='NSString*' type='@'/>
<arg name='frameIndex' index='1' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFlipX:'>
<arg name='flipX' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFlipY:'>
<arg name='flipY' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOpacity:'>
<arg name='opacity' index='0' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextureAtlas:'>
<arg name='textureAtlas' index='0' declared_type='CCTextureAtlas*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextureRect:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextureRect:rotated:untrimmedSize:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='rotated' index='1' declared_type='BOOL' type='B'/>
<arg type64='{CGSize=dd}' name='size' index='2' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVertexRect:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='spriteWithBatchNode:rect:'>
<arg name='node' index='0' declared_type='CCSpriteBatchNode*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='spriteWithCGImage:key:'>
<arg name='image' index='0' declared_type='CGImageRef' type='^{CGImage=}'/>
<arg name='key' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='spriteWithFile:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='spriteWithFile:rect:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='spriteWithSpriteFrame:'>
<arg name='spriteFrame' index='0' declared_type='CCSpriteFrame*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='spriteWithSpriteFrameName:'>
<arg name='spriteFrameName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='spriteWithTexture:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='spriteWithTexture:rect:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='textureAtlas'>
<retval declared_type='CCTextureAtlas*' type='@'/>
</method>
<method selector='textureRect'>
<retval type64='{CGRect={CGPoint=dd}{CGSize=dd}}' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</method>
<method selector='textureRectRotated'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='updateTransform'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCSpriteBatchNode'>
<method selector='addQuadFromSprite:quadIndex:'>
<arg name='sprite' index='0' declared_type='CCSprite*' type='@'/>
<arg type64='Q' name='index' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addSpriteWithoutQuad:z:tag:'>
<arg name='child' index='0' declared_type='CCSprite*' type='@'/>
<arg type64='Q' name='z' index='1' declared_type='NSUInteger' type='I'/>
<arg type64='q' name='aTag' index='2' declared_type='NSInteger' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='appendChild:'>
<arg name='sprite' index='0' declared_type='CCSprite*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='atlasIndexForChild:atZ:'>
<arg name='sprite' index='0' declared_type='CCSprite*' type='@'/>
<arg type64='q' name='z' index='1' declared_type='NSInteger' type='i'/>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method class_method='true' selector='batchNodeWithFile:'>
<arg name='fileImage' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='batchNodeWithFile:capacity:'>
<arg name='fileImage' index='0' declared_type='NSString*' type='@'/>
<arg type64='Q' name='capacity' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='batchNodeWithTexture:'>
<arg name='tex' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='batchNodeWithTexture:capacity:'>
<arg name='tex' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='Q' name='capacity' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='blendFunc'>
<retval declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
</method>
<method selector='descendants'>
<retval declared_type='CCArray*' type='@'/>
</method>
<method selector='increaseAtlasCapacity'>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithFile:capacity:'>
<arg name='fileImage' index='0' declared_type='NSString*' type='@'/>
<arg type64='Q' name='capacity' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTexture:capacity:'>
<arg name='tex' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='Q' name='capacity' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertChild:inAtlasAtIndex:'>
<arg name='child' index='0' declared_type='CCSprite*' type='@'/>
<arg type64='Q' name='index' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rebuildIndexInOrder:atlasIndex:'>
<arg name='parent' index='0' declared_type='CCSprite*' type='@'/>
<arg type64='Q' name='index' index='1' declared_type='NSUInteger' type='I'/>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='removeChild:cleanup:'>
<arg name='sprite' index='0' declared_type='CCSprite*' type='@'/>
<arg name='doCleanup' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeChildAtIndex:cleanup:'>
<arg type64='Q' name='index' index='0' declared_type='NSUInteger' type='I'/>
<arg name='doCleanup' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeSpriteFromAtlas:'>
<arg name='sprite' index='0' declared_type='CCSprite*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='reorderBatch:'>
<arg name='reorder' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBlendFunc:'>
<arg name='blendFunc' index='0' declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextureAtlas:'>
<arg name='textureAtlas' index='0' declared_type='CCTextureAtlas*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textureAtlas'>
<retval declared_type='CCTextureAtlas*' type='@'/>
</method>
</class>
<class name='CCSpriteFrame'>
<method class_method='true' selector='frameWithTexture:rect:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='frameWithTexture:rectInPixels:rotated:offset:originalSize:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='rotated' index='2' declared_type='BOOL' type='B'/>
<arg type64='{CGPoint=dd}' name='offset' index='3' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGSize=dd}' name='originalSize' index='4' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='frameWithTextureFilename:rect:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='frameWithTextureFilename:rectInPixels:rotated:offset:originalSize:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='rotated' index='2' declared_type='BOOL' type='B'/>
<arg type64='{CGPoint=dd}' name='offset' index='3' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGSize=dd}' name='originalSize' index='4' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTexture:rect:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTexture:rectInPixels:rotated:offset:originalSize:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='rotated' index='2' declared_type='BOOL' type='B'/>
<arg type64='{CGPoint=dd}' name='offset' index='3' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGSize=dd}' name='originalSize' index='4' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTextureFilename:rect:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTextureFilename:rectInPixels:rotated:offset:originalSize:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='rotated' index='2' declared_type='BOOL' type='B'/>
<arg type64='{CGPoint=dd}' name='offset' index='3' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg type64='{CGSize=dd}' name='originalSize' index='4' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='offset'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='offsetInPixels'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='originalSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='originalSizeInPixels'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='rect'>
<retval type64='{CGRect={CGPoint=dd}{CGSize=dd}}' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</method>
<method selector='rectInPixels'>
<retval type64='{CGRect={CGPoint=dd}{CGSize=dd}}' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</method>
<method selector='rotated'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setOffset:'>
<arg type64='{CGPoint=dd}' name='offset' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOffsetInPixels:'>
<arg type64='{CGPoint=dd}' name='offsetInPixels' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOriginalSize:'>
<arg type64='{CGSize=dd}' name='originalSize' index='0' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOriginalSizeInPixels:'>
<arg type64='{CGSize=dd}' name='originalSizeInPixels' index='0' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRect:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRectInPixels:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rectInPixels' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRotated:'>
<arg name='rotated' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTexture:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='texture'>
<retval declared_type='CCTexture2D*' type='@'/>
</method>
<method selector='textureFilename'>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<class name='CCSpriteFrameCache'>
<method selector='addSpriteFrame:name:'>
<arg name='frame' index='0' declared_type='CCSpriteFrame*' type='@'/>
<arg name='frameName' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addSpriteFramesWithDictionary:textureFile:'>
<arg name='dictionary' index='0' declared_type='NSDictionary*' type='@'/>
<arg name='filename' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addSpriteFramesWithFile:'>
<arg name='plist' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addSpriteFramesWithFile:texture:'>
<arg name='plist' index='0' declared_type='NSString*' type='@'/>
<arg name='texture' index='1' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addSpriteFramesWithFile:textureFile:'>
<arg name='plist' index='0' declared_type='NSString*' type='@'/>
<arg name='filename' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addSpriteFramesWithFile:textureFilename:'>
<arg name='plist' index='0' declared_type='NSString*' type='@'/>
<arg name='filename' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='purgeSharedSpriteFrameCache'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeSpriteFrameByName:'>
<arg name='name' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeSpriteFrames'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeSpriteFramesFromFile:'>
<arg name='plist' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeSpriteFramesFromTexture:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeUnusedSpriteFrames'>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='sharedSpriteFrameCache'>
<retval declared_type='CCSpriteFrameCache*' type='@'/>
</method>
<method selector='spriteFrameByName:'>
<arg name='name' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='CCSpriteFrame*' type='@'/>
</method>
</class>
<class name='CCTMXLayer'>
<method selector='addChild:z:tag:'>
<arg name='node' index='0' declared_type='CCNode*' type='@'/>
<arg type64='q' name='z' index='1' declared_type='NSInteger' type='i'/>
<arg type64='q' name='tag' index='2' declared_type='NSInteger' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithTilesetInfo:layerInfo:mapInfo:'>
<arg name='tilesetInfo' index='0' declared_type='CCTMXTilesetInfo*' type='@'/>
<arg name='layerInfo' index='1' declared_type='CCTMXLayerInfo*' type='@'/>
<arg name='mapInfo' index='2' declared_type='CCTMXMapInfo*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='layerName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='layerOrientation'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='layerSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method class_method='true' selector='layerWithTilesetInfo:layerInfo:mapInfo:'>
<arg name='tilesetInfo' index='0' declared_type='CCTMXTilesetInfo*' type='@'/>
<arg name='layerInfo' index='1' declared_type='CCTMXLayerInfo*' type='@'/>
<arg name='mapInfo' index='2' declared_type='CCTMXMapInfo*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='mapTileSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='positionAt:'>
<arg type64='{CGPoint=dd}' name='tileCoordinate' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='properties'>
<retval declared_type='NSMutableArray*' type='@'/>
</method>
<method selector='propertyNamed:'>
<arg name='propertyName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='releaseMap'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeTileAt:'>
<arg type64='{CGPoint=dd}' name='tileCoordinate' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLayerName:'>
<arg name='layerName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLayerOrientation:'>
<arg type64='Q' name='layerOrientation' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLayerSize:'>
<arg type64='{CGSize=dd}' name='layerSize' index='0' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMapTileSize:'>
<arg type64='{CGSize=dd}' name='mapTileSize' index='0' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setProperties:'>
<arg name='properties' index='0' declared_type='NSMutableArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTileGID:at:'>
<arg name='gid' index='0' declared_type='uint32_t' type='I'/>
<arg type64='{CGPoint=dd}' name='tileCoordinate' index='1' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTileGID:at:withFlags:'>
<arg name='gid' index='0' declared_type='uint32_t' type='I'/>
<arg type64='{CGPoint=dd}' name='pos' index='1' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='flags' index='2' declared_type='ccTMXTileFlags' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTiles:'>
<arg name='tiles' index='0' declared_type='uint32_t*' type='^I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTileset:'>
<arg name='tileset' index='0' declared_type='CCTMXTilesetInfo*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setupTiles'>
<retval declared_type='void' type='v'/>
</method>
<method selector='tileAt:'>
<arg type64='{CGPoint=dd}' name='tileCoordinate' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='CCSprite*' type='@'/>
</method>
<method selector='tileGIDAt:'>
<arg type64='{CGPoint=dd}' name='tileCoordinate' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='uint32_t' type='I'/>
</method>
<method selector='tileGIDAt:withFlags:'>
<arg type64='{CGPoint=dd}' name='pos' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='flags' index='1' declared_type='ccTMXTileFlags*' type='^i'/>
<retval declared_type='uint32_t' type='I'/>
</method>
<method selector='tiles'>
<retval declared_type='uint32_t*' type='^I'/>
</method>
<method selector='tileset'>
<retval declared_type='CCTMXTilesetInfo*' type='@'/>
</method>
</class>
<class name='CCTMXLayerInfo'>
<method selector='layerSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='maxGID'>
<retval declared_type='unsigned int' type='I'/>
</method>
<method selector='minGID'>
<retval declared_type='unsigned int' type='I'/>
</method>
<method selector='name'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='offset'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='opacity'>
<retval declared_type='unsigned char' type='C'/>
</method>
<method selector='ownTiles'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='properties'>
<retval declared_type='NSMutableDictionary*' type='@'/>
</method>
<method selector='setLayerSize:'>
<arg type64='{CGSize=dd}' name='layerSize' index='0' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxGID:'>
<arg name='maxGID' index='0' declared_type='unsigned int' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinGID:'>
<arg name='minGID' index='0' declared_type='unsigned int' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setName:'>
<arg name='name' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOffset:'>
<arg type64='{CGPoint=dd}' name='offset' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOpacity:'>
<arg name='opacity' index='0' declared_type='unsigned char' type='C'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOwnTiles:'>
<arg name='ownTiles' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setProperties:'>
<arg name='properties' index='0' declared_type='NSMutableDictionary*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTiles:'>
<arg name='tiles' index='0' declared_type='unsigned int*' type='^I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVisible:'>
<arg name='visible' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tiles'>
<retval declared_type='unsigned int*' type='^I'/>
</method>
<method selector='visible'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='CCTMXMapInfo'>
<method selector='filename'>
<retval declared_type='NSString*' type='@'/>
</method>
<method class_method='true' selector='formatWithTMXFile:'>
<arg name='tmxFile' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='formatWithXML:resourcePath:'>
<arg name='tmxString' index='0' declared_type='NSString*' type='@'/>
<arg name='resourcePath' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTMXFile:'>
<arg name='tmxFile' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithXML:resourcePath:'>
<arg name='tmxString' index='0' declared_type='NSString*' type='@'/>
<arg name='resourcePath' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='layers'>
<retval declared_type='NSMutableArray*' type='@'/>
</method>
<method selector='mapSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='objectGroups'>
<retval declared_type='NSMutableArray*' type='@'/>
</method>
<method selector='orientation'>
<retval declared_type='int' type='i'/>
</method>
<method selector='properties'>
<retval declared_type='NSMutableDictionary*' type='@'/>
</method>
<method selector='resources'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='setFilename:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLayers:'>
<arg name='layers' index='0' declared_type='NSMutableArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMapSize:'>
<arg type64='{CGSize=dd}' name='mapSize' index='0' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setObjectGroups:'>
<arg name='objectGroups' index='0' declared_type='NSMutableArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOrientation:'>
<arg name='orientation' index='0' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setProperties:'>
<arg name='properties' index='0' declared_type='NSMutableDictionary*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setResources:'>
<arg name='resources' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTileProperties:'>
<arg name='tileProperties' index='0' declared_type='NSMutableDictionary*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTileSize:'>
<arg type64='{CGSize=dd}' name='tileSize' index='0' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTilesets:'>
<arg name='tilesets' index='0' declared_type='NSMutableArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tileProperties'>
<retval declared_type='NSMutableDictionary*' type='@'/>
</method>
<method selector='tileSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='tilesets'>
<retval declared_type='NSMutableArray*' type='@'/>
</method>
</class>
<class name='CCTMXObjectGroup'>
<method selector='groupName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='objectNamed:'>
<arg name='objectName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='NSMutableDictionary*' type='@'/>
</method>
<method selector='objects'>
<retval declared_type='NSMutableArray*' type='@'/>
</method>
<method selector='positionOffset'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='properties'>
<retval declared_type='NSMutableDictionary*' type='@'/>
</method>
<method selector='propertyNamed:'>
<arg name='propertyName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setGroupName:'>
<arg name='groupName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setObjects:'>
<arg name='objects' index='0' declared_type='NSMutableArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPositionOffset:'>
<arg type64='{CGPoint=dd}' name='positionOffset' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setProperties:'>
<arg name='properties' index='0' declared_type='NSMutableDictionary*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCTMXTiledMap'>
<method selector='initWithTMXFile:'>
<arg name='tmxFile' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithXML:resourcePath:'>
<arg name='tmxString' index='0' declared_type='NSString*' type='@'/>
<arg name='resourcePath' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='layerNamed:'>
<arg name='layerName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='CCTMXLayer*' type='@'/>
</method>
<method selector='mapOrientation'>
<retval declared_type='int' type='i'/>
</method>
<method selector='mapSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='objectGroupNamed:'>
<arg name='groupName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='CCTMXObjectGroup*' type='@'/>
</method>
<method selector='objectGroups'>
<retval declared_type='NSMutableArray*' type='@'/>
</method>
<method selector='properties'>
<retval declared_type='NSMutableDictionary*' type='@'/>
</method>
<method selector='propertiesForGID:'>
<arg name='GID' index='0' declared_type='unsigned int' type='I'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='propertyNamed:'>
<arg name='propertyName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setObjectGroups:'>
<arg name='objectGroups' index='0' declared_type='NSMutableArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setProperties:'>
<arg name='properties' index='0' declared_type='NSMutableDictionary*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tileSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method class_method='true' selector='tiledMapWithTMXFile:'>
<arg name='tmxFile' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='tiledMapWithXML:resourcePath:'>
<arg name='tmxString' index='0' declared_type='NSString*' type='@'/>
<arg name='resourcePath' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTMXTilesetInfo'>
<method selector='firstGid'>
<retval declared_type='unsigned int' type='I'/>
</method>
<method selector='imageSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='margin'>
<retval declared_type='unsigned int' type='I'/>
</method>
<method selector='name'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='rectForGID:'>
<arg name='gid' index='0' declared_type='unsigned int' type='I'/>
<retval type64='{CGRect={CGPoint=dd}{CGSize=dd}}' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</method>
<method selector='setFirstGid:'>
<arg name='firstGid' index='0' declared_type='unsigned int' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageSize:'>
<arg type64='{CGSize=dd}' name='imageSize' index='0' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMargin:'>
<arg name='margin' index='0' declared_type='unsigned int' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setName:'>
<arg name='name' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSourceImage:'>
<arg name='sourceImage' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSpacing:'>
<arg name='spacing' index='0' declared_type='unsigned int' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTileSize:'>
<arg type64='{CGSize=dd}' name='tileSize' index='0' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sourceImage'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='spacing'>
<retval declared_type='unsigned int' type='I'/>
</method>
<method selector='tileSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
</class>
<class name='CCTargetedAction'>
<method class_method='true' selector='actionWithTarget:action:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<arg name='action' index='1' declared_type='CCFiniteTimeAction*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='forcedTarget'>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTarget:action:'>
<arg name='target' index='0' declared_type='id' type='@'/>
<arg name='action' index='1' declared_type='CCFiniteTimeAction*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setForcedTarget:'>
<arg name='forcedTarget' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCTargetedTouchHandler'>
<method selector='claimedTouches'>
<retval declared_type='NSMutableSet*' type='@'/>
</method>
<method class_method='true' selector='handlerWithDelegate:priority:swallowsTouches:'>
<arg name='aDelegate' index='0' declared_type='id' type='@'/>
<arg name='priority' index='1' declared_type='int' type='i'/>
<arg name='swallowsTouches' index='2' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDelegate:priority:swallowsTouches:'>
<arg name='aDelegate' index='0' declared_type='id' type='@'/>
<arg name='priority' index='1' declared_type='int' type='i'/>
<arg name='swallowsTouches' index='2' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setSwallowsTouches:'>
<arg name='swallowsTouches' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='swallowsTouches'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='CCTexture2D'>
<method class_method='true' selector='PVRImagesHavePremultipliedAlpha:'>
<arg name='haveAlphaPremultiplied' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='bitsPerPixelForFormat'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method class_method='true' selector='bitsPerPixelForFormat:'>
<arg name='format' index='0' declared_type='CCTexture2DPixelFormat' type='i'/>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='contentSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='contentSizeInPixels'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method class_method='true' selector='defaultAlphaPixelFormat'>
<retval declared_type='CCTexture2DPixelFormat' type='i'/>
</method>
<method selector='drawAtPoint:'>
<arg type64='{CGPoint=dd}' name='point' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawInRect:'>
<arg type64='{CGRect={CGPoint=dd}{CGSize=dd}}' name='rect' index='0' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='generateMipmap'>
<retval declared_type='void' type='v'/>
</method>
<method selector='hasPremultipliedAlpha'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithCGImage:resolutionType:'>
<arg name='cgImage' index='0' declared_type='CGImageRef' type='^{CGImage=}'/>
<arg name='resolution' index='1' declared_type='ccResolutionType' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithData:pixelFormat:pixelsWide:pixelsHigh:contentSize:'>
<arg name='data' index='0' declared_type='void*' type='^v' const='true'/>
<arg name='pixelFormat' index='1' declared_type='CCTexture2DPixelFormat' type='i'/>
<arg type64='Q' name='width' index='2' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='height' index='3' declared_type='NSUInteger' type='I'/>
<arg type64='{CGSize=dd}' name='size' index='4' declared_type='CGSize' type='{CGSize=ff}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithPVRFile:'>
<arg name='file' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:dimensions:alignment:fontName:fontSize:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGSize=dd}' name='dimensions' index='1' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='2' declared_type='CCTextAlignment' type='i'/>
<arg name='name' index='3' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='4' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:dimensions:alignment:lineBreakMode:fontName:fontSize:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg type64='{CGSize=dd}' name='dimensions' index='1' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='2' declared_type='CCTextAlignment' type='i'/>
<arg name='lineBreakMode' index='3' declared_type='CCLineBreakMode' type='i'/>
<arg name='name' index='4' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='5' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:fontName:fontSize:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='name' index='1' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='2' declared_type='CGFloat' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:fontName:fontSize:dimensions:hAlignment:vAlignment:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='name' index='1' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='2' declared_type='CGFloat' type='f'/>
<arg type64='{CGSize=dd}' name='dimensions' index='3' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='4' declared_type='CCTextAlignment' type='i'/>
<arg name='vertAlignment' index='5' declared_type='CCVerticalTextAlignment' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithString:fontName:fontSize:dimensions:hAlignment:vAlignment:lineBreakMode:'>
<arg name='string' index='0' declared_type='NSString*' type='@'/>
<arg name='name' index='1' declared_type='NSString*' type='@'/>
<arg type64='d' name='size' index='2' declared_type='CGFloat' type='f'/>
<arg type64='{CGSize=dd}' name='dimensions' index='3' declared_type='CGSize' type='{CGSize=ff}'/>
<arg name='alignment' index='4' declared_type='CCTextAlignment' type='i'/>
<arg name='vertAlignment' index='5' declared_type='CCVerticalTextAlignment' type='i'/>
<arg name='lineBreakMode' index='6' declared_type='CCLineBreakMode' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='keepData:length:'>
<arg name='data' index='0' declared_type='void*' type='^v'/>
<arg type64='Q' name='length' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void*' type='^v'/>
</method>
<method selector='maxS'>
<retval declared_type='GLfloat' type='f'/>
</method>
<method selector='maxT'>
<retval declared_type='GLfloat' type='f'/>
</method>
<method selector='name'>
<retval declared_type='GLuint' type='I'/>
</method>
<method selector='pixelFormat'>
<retval declared_type='CCTexture2DPixelFormat' type='i'/>
</method>
<method selector='pixelsHigh'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='pixelsWide'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='releaseData:'>
<arg name='data' index='0' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='resolutionType'>
<retval declared_type='ccResolutionType' type='i'/>
</method>
<method selector='setAliasTexParameters'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAntiAliasTexParameters'>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='setDefaultAlphaPixelFormat:'>
<arg name='format' index='0' declared_type='CCTexture2DPixelFormat' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxS:'>
<arg name='maxS' index='0' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxT:'>
<arg name='maxT' index='0' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setResolutionType:'>
<arg name='resolutionType' index='0' declared_type='ccResolutionType' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShaderProgram:'>
<arg name='shaderProgram' index='0' declared_type='CCGLProgram*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTexParameters:'>
<arg name='texParams' index='0' declared_type='ccTexParams*' type='^{_ccTexParams=IIII}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shaderProgram'>
<retval declared_type='CCGLProgram*' type='@'/>
</method>
<method selector='stringForFormat'>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<class name='CCTextureAtlas'>
<method selector='capacity'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='drawNumberOfQuads:'>
<arg type64='Q' name='n' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawNumberOfQuads:fromIndex:'>
<arg type64='Q' name='n' index='0' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='start' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawQuads'>
<retval declared_type='void' type='v'/>
</method>
<method selector='fillWithEmptyQuadsFromIndex:amount:'>
<arg type64='Q' name='index' index='0' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='amount' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='increaseTotalQuadsWith:'>
<arg type64='Q' name='amount' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithFile:capacity:'>
<arg name='file' index='0' declared_type='NSString*' type='@'/>
<arg type64='Q' name='capacity' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTexture:capacity:'>
<arg name='tex' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='Q' name='capacity' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertQuad:atIndex:'>
<arg name='quad' index='0' declared_type='ccV3F_C4B_T2F_Quad*' type='^{_ccV3F_C4B_T2F_Quad={_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}}'/>
<arg type64='Q' name='index' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertQuadFromIndex:atIndex:'>
<arg type64='Q' name='fromIndex' index='0' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='newIndex' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertQuads:atIndex:amount:'>
<arg name='quads' index='0' declared_type='ccV3F_C4B_T2F_Quad*' type='^{_ccV3F_C4B_T2F_Quad={_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}}'/>
<arg type64='Q' name='index' index='1' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='amount' index='2' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveQuadsFromIndex:amount:atIndex:'>
<arg type64='Q' name='oldIndex' index='0' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='amount' index='1' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='newIndex' index='2' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveQuadsFromIndex:to:'>
<arg type64='Q' name='index' index='0' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='newIndex' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='quads'>
<retval declared_type='ccV3F_C4B_T2F_Quad*' type='^{_ccV3F_C4B_T2F_Quad={_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}}'/>
</method>
<method selector='removeAllQuads'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeQuadAtIndex:'>
<arg type64='Q' name='index' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeQuadsAtIndex:amount:'>
<arg type64='Q' name='index' index='0' declared_type='NSUInteger' type='I'/>
<arg type64='Q' name='amount' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='resizeCapacity:'>
<arg type64='Q' name='n' index='0' declared_type='NSUInteger' type='I'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setQuads:'>
<arg name='quads' index='0' declared_type='ccV3F_C4B_T2F_Quad*' type='^{_ccV3F_C4B_T2F_Quad={_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTexture:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='texture'>
<retval declared_type='CCTexture2D*' type='@'/>
</method>
<method class_method='true' selector='textureAtlasWithFile:capacity:'>
<arg name='file' index='0' declared_type='NSString*' type='@'/>
<arg type64='Q' name='capacity' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='textureAtlasWithTexture:capacity:'>
<arg name='tex' index='0' declared_type='CCTexture2D*' type='@'/>
<arg type64='Q' name='capacity' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='totalQuads'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='updateQuad:atIndex:'>
<arg name='quad' index='0' declared_type='ccV3F_C4B_T2F_Quad*' type='^{_ccV3F_C4B_T2F_Quad={_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}{_ccV3F_C4B_T2F={_ccVertex3F=fff}{_ccColor4B=CCCC}{_ccTex2F=ff}}}'/>
<arg type64='Q' name='index' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCTextureCache'>
<method selector='addCGImage:forKey:'>
<arg name='image' index='0' declared_type='CGImageRef' type='^{CGImage=}'/>
<arg name='key' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='CCTexture2D*' type='@'/>
</method>
<method selector='addImage:'>
<arg name='fileimage' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='CCTexture2D*' type='@'/>
</method>
<method selector='addImageAsync:target:selector:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<arg name='target' index='1' declared_type='id' type='@'/>
<arg name='selector' index='2' declared_type='SEL' type=':'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addImageAsync:withBlock:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<arg name='block' index='1' declared_type='void (^)(CCTexture2D *)' function_pointer='true' type='@?'>
<arg declared_type='CCTexture2D*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='addPVRImage:'>
<arg name='filename' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='CCTexture2D*' type='@'/>
</method>
<method selector='dumpCachedTextureInfo'>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='purgeSharedTextureCache'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAllTextures'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeTexture:'>
<arg name='tex' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeTextureForKey:'>
<arg name='textureKeyName' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeUnusedTextures'>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='sharedTextureCache'>
<retval declared_type='CCTextureCache*' type='@'/>
</method>
<method selector='textureForKey:'>
<arg name='key' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='CCTexture2D*' type='@'/>
</method>
</class>
<class name='CCTexturePVR'>
<method selector='format'>
<retval declared_type='CCTexture2DPixelFormat' type='i'/>
</method>
<method selector='hasAlpha'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='height'>
<retval declared_type='uint32_t' type='I'/>
</method>
<method selector='initWithContentsOfFile:'>
<arg name='path' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithContentsOfURL:'>
<arg name='url' index='0' declared_type='NSURL*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='name'>
<retval declared_type='GLuint' type='I'/>
</method>
<method selector='numberOfMipmaps'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method class_method='true' selector='pvrTextureWithContentsOfFile:'>
<arg name='path' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='pvrTextureWithContentsOfURL:'>
<arg name='url' index='0' declared_type='NSURL*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='retainName'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setRetainName:'>
<arg name='retainName' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='width'>
<retval declared_type='uint32_t' type='I'/>
</method>
</class>
<class name='CCTileMapAtlas'>
<method selector='initWithTileFile:mapFile:tileWidth:tileHeight:'>
<arg name='tile' index='0' declared_type='NSString*' type='@'/>
<arg name='map' index='1' declared_type='NSString*' type='@'/>
<arg name='w' index='2' declared_type='int' type='i'/>
<arg name='h' index='3' declared_type='int' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='releaseMap'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTile:at:'>
<arg name='tile' index='0' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<arg type64='{_ccGridSize=qq}' name='position' index='1' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tgaInfo'>
<retval declared_type='tImageTGA*' type='^{sImageTGA=iCCss*i}'/>
</method>
<method selector='tileAt:'>
<arg type64='{_ccGridSize=qq}' name='position' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
</method>
<method class_method='true' selector='tileMapAtlasWithTileFile:mapFile:tileWidth:tileHeight:'>
<arg name='tile' index='0' declared_type='NSString*' type='@'/>
<arg name='map' index='1' declared_type='NSString*' type='@'/>
<arg name='w' index='2' declared_type='int' type='i'/>
<arg name='h' index='3' declared_type='int' type='i'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTiledGrid3D'>
<method selector='originalTile:'>
<arg type64='{_ccGridSize=qq}' name='pos' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='ccQuad3' type='{_ccQuad3={_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}}'/>
</method>
<method selector='setTile:coords:'>
<arg type64='{_ccGridSize=qq}' name='pos' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='coords' index='1' declared_type='ccQuad3' type='{_ccQuad3={_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tile:'>
<arg type64='{_ccGridSize=qq}' name='pos' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='ccQuad3' type='{_ccQuad3={_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}}'/>
</method>
</class>
<class name='CCTiledGrid3DAction'>
<method selector='originalTile:'>
<arg type64='{_ccGridSize=qq}' name='pos' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='ccQuad3' type='{_ccQuad3={_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}}'/>
</method>
<method selector='setTile:coords:'>
<arg type64='{_ccGridSize=qq}' name='pos' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='coords' index='1' declared_type='ccQuad3' type='{_ccQuad3={_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tile:'>
<arg type64='{_ccGridSize=qq}' name='pos' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='ccQuad3' type='{_ccQuad3={_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}{_ccVertex3F=fff}}'/>
</method>
</class>
<class name='CCTimer'>
<method selector='interval'>
<retval declared_type='ccTime' type='f'/>
</method>
<method selector='setInterval:'>
<arg name='interval' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='update:'>
<arg name='dt' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCTimerBlock'>
<method selector='initWithInterval:repeat:delay:key:block:'>
<arg name='seconds' index='0' declared_type='ccTime' type='f'/>
<arg name='r' index='1' declared_type='uint' type='I'/>
<arg name='d' index='2' declared_type='ccTime' type='f'/>
<arg name='key' index='3' declared_type='NSString*' type='@'/>
<arg name='block' index='4' declared_type='void (^)(ccTime)' function_pointer='true' type='@?'>
<arg declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='key'>
<retval declared_type='NSString*' type='@'/>
</method>
<method class_method='true' selector='timerWithInterval:key:block:'>
<arg name='seconds' index='0' declared_type='ccTime' type='f'/>
<arg name='key' index='1' declared_type='NSString*' type='@'/>
<arg name='block' index='2' declared_type='void (^)(ccTime)' function_pointer='true' type='@?'>
<arg declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTimerTargetSelector'>
<method selector='initWithTarget:selector:'>
<arg name='t' index='0' declared_type='id' type='@'/>
<arg name='s' index='1' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTarget:selector:interval:repeat:delay:'>
<arg name='t' index='0' declared_type='id' type='@'/>
<arg name='s' index='1' declared_type='SEL' type=':'/>
<arg name='seconds' index='2' declared_type='ccTime' type='f'/>
<arg name='r' index='3' declared_type='uint' type='I'/>
<arg name='d' index='4' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='selector'>
<retval declared_type='SEL' type=':'/>
</method>
<method class_method='true' selector='timerWithTarget:selector:'>
<arg name='t' index='0' declared_type='id' type='@'/>
<arg name='s' index='1' declared_type='SEL' type=':'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='timerWithTarget:selector:interval:'>
<arg name='t' index='0' declared_type='id' type='@'/>
<arg name='s' index='1' declared_type='SEL' type=':'/>
<arg name='seconds' index='2' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTintBy'>
<method class_method='true' selector='actionWithDuration:red:green:blue:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='deltaRed' index='1' declared_type='GLshort' type='s'/>
<arg name='deltaGreen' index='2' declared_type='GLshort' type='s'/>
<arg name='deltaBlue' index='3' declared_type='GLshort' type='s'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:red:green:blue:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='deltaRed' index='1' declared_type='GLshort' type='s'/>
<arg name='deltaGreen' index='2' declared_type='GLshort' type='s'/>
<arg name='deltaBlue' index='3' declared_type='GLshort' type='s'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTintTo'>
<method class_method='true' selector='actionWithDuration:red:green:blue:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='red' index='1' declared_type='GLubyte' type='C'/>
<arg name='green' index='2' declared_type='GLubyte' type='C'/>
<arg name='blue' index='3' declared_type='GLubyte' type='C'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDuration:red:green:blue:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='red' index='1' declared_type='GLubyte' type='C'/>
<arg name='green' index='2' declared_type='GLubyte' type='C'/>
<arg name='blue' index='3' declared_type='GLubyte' type='C'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCToggleVisibility'>
<method selector='update:'>
<arg name='time' index='0' declared_type='ccTime' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCTouchDispatcher'>
<method selector='addStandardDelegate:priority:'>
<arg name='delegate' index='0' declared_type='id' type='@'/>
<arg name='priority' index='1' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addTargetedDelegate:priority:swallowsTouches:'>
<arg name='delegate' index='0' declared_type='id' type='@'/>
<arg name='priority' index='1' declared_type='int' type='i'/>
<arg name='swallowsTouches' index='2' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='dispatchEvents'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='removeAllDelegates'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeDelegate:'>
<arg name='delegate' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDispatchEvents:'>
<arg name='dispatchEvents' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPriority:forDelegate:'>
<arg name='priority' index='0' declared_type='int' type='i'/>
<arg name='delegate' index='1' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='sharedDispatcher'>
<retval declared_type='CCTouchDispatcher*' type='@'/>
</method>
</class>
<class name='CCTouchHandler'>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='enabledSelectors'>
<retval declared_type='ccTouchSelectorFlag' type='i'/>
</method>
<method class_method='true' selector='handlerWithDelegate:priority:'>
<arg name='aDelegate' index='0' declared_type='id' type='@'/>
<arg name='priority' index='1' declared_type='int' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDelegate:priority:'>
<arg name='aDelegate' index='0' declared_type='id' type='@'/>
<arg name='priority' index='1' declared_type='int' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='priority'>
<retval declared_type='int' type='i'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEnabledSelectors:'>
<arg name='enabledSelectors' index='0' declared_type='ccTouchSelectorFlag' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPriority:'>
<arg name='priority' index='0' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCTransitionCrossFade'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTransitionFade'>
<method selector='initWithDuration:scene:withColor:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='scene' index='1' declared_type='CCScene*' type='@'/>
<arg name='color' index='2' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='transitionWithDuration:scene:withColor:'>
<arg name='duration' index='0' declared_type='ccTime' type='f'/>
<arg name='scene' index='1' declared_type='CCScene*' type='@'/>
<arg name='color' index='2' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTransitionFadeBL'>
<method selector='actionWithSize:'>
<arg type64='{_ccGridSize=qq}' name='vector' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='CCActionInterval*' type='@'/>
</method>
</class>
<class name='CCTransitionFadeDown'>
<method selector='actionWithSize:'>
<arg type64='{_ccGridSize=qq}' name='v' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='CCActionInterval*' type='@'/>
</method>
</class>
<class name='CCTransitionFadeTR'>
<method selector='actionWithSize:'>
<arg type64='{_ccGridSize=qq}' name='vector' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='CCActionInterval*' type='@'/>
</method>
</class>
<class name='CCTransitionFadeUp'>
<method selector='actionWithSize:'>
<arg type64='{_ccGridSize=qq}' name='v' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='CCActionInterval*' type='@'/>
</method>
</class>
<class name='CCTransitionFlipAngular'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTransitionFlipX'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTransitionFlipY'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTransitionJumpZoom'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTransitionMoveInB'>
<method selector='initScenes'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCTransitionMoveInL'>
<method selector='action'>
<retval declared_type='CCActionInterval*' type='@'/>
</method>
<method selector='initScenes'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCTransitionMoveInR'>
<method selector='initScenes'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCTransitionMoveInT'>
<method selector='initScenes'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCTransitionPageTurn'>
<method selector='actionWithSize:'>
<arg type64='{_ccGridSize=qq}' name='vector' index='0' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<retval declared_type='CCActionInterval*' type='@'/>
</method>
<method selector='initWithDuration:scene:backwards:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg name='s' index='1' declared_type='CCScene*' type='@'/>
<arg name='back' index='2' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='transitionWithDuration:scene:backwards:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg name='s' index='1' declared_type='CCScene*' type='@'/>
<arg name='back' index='2' declared_type='BOOL' type='B'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTransitionProgress'>
<method selector='progressTimerNodeWithRenderTexture:'>
<arg name='texture' index='0' declared_type='CCRenderTexture*' type='@'/>
<retval declared_type='CCProgressTimer*' type='@'/>
</method>
</class>
<class name='CCTransitionProgressHorizontal'>
<method selector='progressTimerNodeWithRenderTexture:'>
<arg name='texture' index='0' declared_type='CCRenderTexture*' type='@'/>
<retval declared_type='CCProgressTimer*' type='@'/>
</method>
</class>
<class name='CCTransitionProgressInOut'>
<method selector='progressTimerNodeWithRenderTexture:'>
<arg name='texture' index='0' declared_type='CCRenderTexture*' type='@'/>
<retval declared_type='CCProgressTimer*' type='@'/>
</method>
</class>
<class name='CCTransitionProgressOutIn'>
<method selector='progressTimerNodeWithRenderTexture:'>
<arg name='texture' index='0' declared_type='CCRenderTexture*' type='@'/>
<retval declared_type='CCProgressTimer*' type='@'/>
</method>
</class>
<class name='CCTransitionProgressRadialCCW'>
<method selector='progressTimerNodeWithRenderTexture:'>
<arg name='texture' index='0' declared_type='CCRenderTexture*' type='@'/>
<retval declared_type='CCProgressTimer*' type='@'/>
</method>
</class>
<class name='CCTransitionProgressRadialCW'>
<method selector='progressTimerNodeWithRenderTexture:'>
<arg name='texture' index='0' declared_type='CCRenderTexture*' type='@'/>
<retval declared_type='CCProgressTimer*' type='@'/>
</method>
</class>
<class name='CCTransitionProgressVertical'>
<method selector='progressTimerNodeWithRenderTexture:'>
<arg name='texture' index='0' declared_type='CCRenderTexture*' type='@'/>
<retval declared_type='CCProgressTimer*' type='@'/>
</method>
</class>
<class name='CCTransitionRotoZoom'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTransitionScene'>
<method selector='finish'>
<retval declared_type='void' type='v'/>
</method>
<method selector='hideOutShowIn'>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithDuration:scene:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg name='s' index='1' declared_type='CCScene*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='transitionWithDuration:scene:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg name='s' index='1' declared_type='CCScene*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTransitionSceneOriented'>
<method selector='initWithDuration:scene:orientation:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg name='s' index='1' declared_type='CCScene*' type='@'/>
<arg name='o' index='2' declared_type='tOrientation' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='transitionWithDuration:scene:orientation:'>
<arg name='t' index='0' declared_type='ccTime' type='f'/>
<arg name='s' index='1' declared_type='CCScene*' type='@'/>
<arg name='o' index='2' declared_type='tOrientation' type='i'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTransitionShrinkGrow'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTransitionSlideInB'>
<method selector='initScenes'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCTransitionSlideInL'>
<method selector='action'>
<retval declared_type='CCActionInterval*' type='@'/>
</method>
<method selector='initScenes'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCTransitionSlideInR'>
<method selector='initScenes'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCTransitionSlideInT'>
<method selector='initScenes'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCTransitionSplitCols'>
<method selector='action'>
<retval declared_type='CCActionInterval*' type='@'/>
</method>
</class>
<class name='CCTransitionSplitRows'>
<method selector='action'>
<retval declared_type='CCActionInterval*' type='@'/>
</method>
</class>
<class name='CCTransitionTurnOffTiles'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTransitionZoomFlipAngular'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTransitionZoomFlipX'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTransitionZoomFlipY'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTurnOffTiles'>
<method class_method='true' selector='actionWithSeed:grid:duration:'>
<arg name='s' index='0' declared_type='int' type='i'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='1' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='2' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithSeed:grid:duration:'>
<arg name='s' index='0' declared_type='int' type='i'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='1' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='2' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CCTwirl'>
<method class_method='true' selector='actionWithPosition:twirls:amplitude:grid:duration:'>
<arg type64='{CGPoint=dd}' name='pos' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='t' index='1' declared_type='int' type='i'/>
<arg name='amp' index='2' declared_type='float' type='f'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='3' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='4' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='amplitude'>
<retval declared_type='float' type='f'/>
</method>
<method selector='amplitudeRate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='initWithPosition:twirls:amplitude:grid:duration:'>
<arg type64='{CGPoint=dd}' name='pos' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<arg name='t' index='1' declared_type='int' type='i'/>
<arg name='amp' index='2' declared_type='float' type='f'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='3' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='4' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='position'>
<retval type64='{CGPoint=dd}' declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='setAmplitude:'>
<arg name='amplitude' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAmplitudeRate:'>
<arg name='amplitudeRate' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPosition:'>
<arg type64='{CGPoint=dd}' name='position' index='0' declared_type='CGPoint' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCWaves'>
<method class_method='true' selector='actionWithWaves:amplitude:horizontal:vertical:grid:duration:'>
<arg name='wav' index='0' declared_type='int' type='i'/>
<arg name='amp' index='1' declared_type='float' type='f'/>
<arg name='h' index='2' declared_type='BOOL' type='B'/>
<arg name='v' index='3' declared_type='BOOL' type='B'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='4' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='5' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='amplitude'>
<retval declared_type='float' type='f'/>
</method>
<method selector='amplitudeRate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='initWithWaves:amplitude:horizontal:vertical:grid:duration:'>
<arg name='wav' index='0' declared_type='int' type='i'/>
<arg name='amp' index='1' declared_type='float' type='f'/>
<arg name='h' index='2' declared_type='BOOL' type='B'/>
<arg name='v' index='3' declared_type='BOOL' type='B'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='4' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='5' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setAmplitude:'>
<arg name='amplitude' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAmplitudeRate:'>
<arg name='amplitudeRate' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCWaves3D'>
<method class_method='true' selector='actionWithWaves:amplitude:grid:duration:'>
<arg name='wav' index='0' declared_type='int' type='i'/>
<arg name='amp' index='1' declared_type='float' type='f'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='amplitude'>
<retval declared_type='float' type='f'/>
</method>
<method selector='amplitudeRate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='initWithWaves:amplitude:grid:duration:'>
<arg name='wav' index='0' declared_type='int' type='i'/>
<arg name='amp' index='1' declared_type='float' type='f'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setAmplitude:'>
<arg name='amplitude' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAmplitudeRate:'>
<arg name='amplitudeRate' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CCWavesTiles3D'>
<method class_method='true' selector='actionWithWaves:amplitude:grid:duration:'>
<arg name='wav' index='0' declared_type='int' type='i'/>
<arg name='amp' index='1' declared_type='float' type='f'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='amplitude'>
<retval declared_type='float' type='f'/>
</method>
<method selector='amplitudeRate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='initWithWaves:amplitude:grid:duration:'>
<arg name='wav' index='0' declared_type='int' type='i'/>
<arg name='amp' index='1' declared_type='float' type='f'/>
<arg type64='{_ccGridSize=qq}' name='gridSize' index='2' declared_type='ccGridSize' type='{_ccGridSize=ii}'/>
<arg name='d' index='3' declared_type='ccTime' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setAmplitude:'>
<arg name='amplitude' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAmplitudeRate:'>
<arg name='amplitudeRate' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CDAsynchBufferLoader'>
<method selector='init:soundEngine:'>
<arg name='loadRequests' index='0' declared_type='NSArray*' type='@'/>
<arg name='theSoundEngine' index='1' declared_type='CDSoundEngine*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CDAudioInterruptTargetGroup'>
<method selector='addAudioInterruptTarget:'>
<arg name='interruptibleTarget' index='0' declared_type='NSObject*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CDAudioManager'>
<method selector='applicationDidBecomeActive'>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationWillResignActive'>
<retval declared_type='void' type='v'/>
</method>
<method selector='audioSessionInterrupted'>
<retval declared_type='void' type='v'/>
</method>
<method selector='audioSessionResumed'>
<retval declared_type='void' type='v'/>
</method>
<method selector='audioSourceForChannel:'>
<arg name='channel' index='0' declared_type='tAudioSourceChannel' type='i'/>
<retval declared_type='CDLongAudioSource*' type='@'/>
</method>
<method selector='audioSourceLoad:channel:'>
<arg name='filePath' index='0' declared_type='NSString*' type='@'/>
<arg name='channel' index='1' declared_type='tAudioSourceChannel' type='i'/>
<retval declared_type='CDLongAudioSource*' type='@'/>
</method>
<method selector='backgroundMusic'>
<retval declared_type='CDLongAudioSource*' type='@'/>
</method>
<method class_method='true' selector='configure:'>
<arg name='mode' index='0' declared_type='tAudioManagerMode' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='end'>
<retval declared_type='void' type='v'/>
</method>
<method selector='init:'>
<arg name='mode' index='0' declared_type='tAudioManagerMode' type='i'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='initAsynchronously:'>
<arg name='mode' index='0' declared_type='tAudioManagerMode' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isBackgroundMusicPlaying'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isDeviceMuted'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isOtherAudioPlaying'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='pauseBackgroundMusic'>
<retval declared_type='void' type='v'/>
</method>
<method selector='playBackgroundMusic:loop:'>
<arg name='filePath' index='0' declared_type='NSString*' type='@'/>
<arg name='loop' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='preloadBackgroundMusic:'>
<arg name='filePath' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='resumeBackgroundMusic'>
<retval declared_type='void' type='v'/>
</method>
<method selector='rewindBackgroundMusic'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundMusicCompletionListener:selector:'>
<arg name='listener' index='0' declared_type='id' type='@'/>
<arg name='selector' index='1' declared_type='SEL' type=':'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMode:'>
<arg name='mode' index='0' declared_type='tAudioManagerMode' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setResignBehavior:autoHandle:'>
<arg name='resignBehavior' index='0' declared_type='tAudioManagerResignBehavior' type='i'/>
<arg name='autoHandle' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='sharedManager'>
<retval declared_type='CDAudioManager*' type='@'/>
</method>
<method class_method='true' selector='sharedManagerState'>
<retval declared_type='tAudioManagerState' type='i'/>
</method>
<method selector='soundEngine'>
<retval declared_type='CDSoundEngine*' type='@'/>
</method>
<method selector='stopBackgroundMusic'>
<retval declared_type='void' type='v'/>
</method>
<method selector='willPlayBackgroundMusic'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='CDBufferLoadRequest'>
<method selector='filePath'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='init:filePath:'>
<arg name='theSoundId' index='0' declared_type='int' type='i'/>
<arg name='theFilePath' index='1' declared_type='NSString*' type='@' const='true'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='soundId'>
<retval declared_type='int' type='i'/>
</method>
</class>
<class name='CDBufferManager'>
<method selector='bufferForFile:create:'>
<arg name='filePath' index='0' declared_type='NSString*' type='@'/>
<arg name='create' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='int' type='i'/>
</method>
<method selector='initWithEngine:'>
<arg name='theSoundEngine' index='0' declared_type='CDSoundEngine*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='releaseBufferForFile:'>
<arg name='filePath' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CDFloatInterpolator'>
<method selector='end'>
<retval declared_type='float' type='f'/>
</method>
<method selector='init:startVal:endVal:'>
<arg name='type' index='0' declared_type='tCDInterpolationType' type='i'/>
<arg name='startVal' index='1' declared_type='float' type='f'/>
<arg name='endVal' index='2' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='interpolate:'>
<arg name='t' index='0' declared_type='float' type='f'/>
<retval declared_type='float' type='f'/>
</method>
<method selector='interpolationType'>
<retval declared_type='tCDInterpolationType' type='i'/>
</method>
<method selector='setEnd:'>
<arg name='end' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInterpolationType:'>
<arg name='interpolationType' index='0' declared_type='tCDInterpolationType' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStart:'>
<arg name='start' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='start'>
<retval declared_type='float' type='f'/>
</method>
</class>
<class name='CDLongAudioSource'>
<method selector='audioSourceFilePath'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='audioSourcePlayer'>
<retval declared_type='AVAudioPlayer*' type='@'/>
</method>
<method selector='backgroundMusic'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='isPlaying'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='load:'>
<arg name='filePath' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='numberOfLoops'>
<retval type64='q' declared_type='NSInteger' type='i'/>
</method>
<method selector='pause'>
<retval declared_type='void' type='v'/>
</method>
<method selector='play'>
<retval declared_type='void' type='v'/>
</method>
<method selector='resume'>
<retval declared_type='void' type='v'/>
</method>
<method selector='rewind'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundMusic:'>
<arg name='backgroundMusic' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' index='0' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfLoops:'>
<arg type64='q' name='numberOfLoops' index='0' declared_type='NSInteger' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVolume:'>
<arg name='volume' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stop'>
<retval declared_type='void' type='v'/>
</method>
<method selector='volume'>
<retval declared_type='float' type='f'/>
</method>
</class>
<class name='CDPropertyModifier'>
<method selector='_allowableType'>
<retval declared_type='Class' type='#'/>
</method>
<method selector='_getTargetProperty'>
<retval declared_type='float' type='f'/>
</method>
<method selector='_setTargetProperty:'>
<arg name='newVal' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='_stopTarget'>
<retval declared_type='void' type='v'/>
</method>
<method selector='endValue'>
<retval declared_type='float' type='f'/>
</method>
<method selector='init:interpolationType:startVal:endVal:'>
<arg name='theTarget' index='0' declared_type='id' type='@'/>
<arg name='type' index='1' declared_type='tCDInterpolationType' type='i'/>
<arg name='startVal' index='2' declared_type='float' type='f'/>
<arg name='endVal' index='3' declared_type='float' type='f'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='interpolationType'>
<retval declared_type='tCDInterpolationType' type='i'/>
</method>
<method selector='modify:'>
<arg name='t' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEndValue:'>
<arg name='endValue' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInterpolationType:'>
<arg name='interpolationType' index='0' declared_type='tCDInterpolationType' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStartValue:'>
<arg name='startValue' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStopTargetWhenComplete:'>
<arg name='stopTargetWhenComplete' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='startValue'>
<retval declared_type='float' type='f'/>
</method>
<method selector='stopTargetWhenComplete'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='CDSoundEngine'>
<method selector='_soundSourcePreRelease:'>
<arg name='soundSource' index='0' declared_type='CDSoundSource*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='asynchLoadProgress'>
<retval declared_type='float' type='f'/>
</method>
<method selector='bufferDurationInSeconds:'>
<arg name='soundId' index='0' declared_type='int' type='i'/>
<retval declared_type='float' type='f'/>
</method>
<method selector='bufferFrequencyInHertz:'>
<arg name='soundId' index='0' declared_type='int' type='i'/>
<retval declared_type='ALsizei' type='i'/>
</method>
<method selector='bufferSizeInBytes:'>
<arg name='soundId' index='0' declared_type='int' type='i'/>
<retval declared_type='ALsizei' type='i'/>
</method>
<method selector='defineSourceGroups:'>
<arg name='sourceGroupDefinitions' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='defineSourceGroups:total:'>
<arg name='sourceGroupDefinitions' index='0' declared_type='int*' type='^i'/>
<arg type64='Q' name='total' index='1' declared_type='NSUInteger' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='functioning'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='getGainWorks'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
<method selector='lastErrorCode'>
<retval declared_type='ALenum' type='i'/>
</method>
<method selector='loadBuffer:filePath:'>
<arg name='soundId' index='0' declared_type='int' type='i'/>
<arg name='filePath' index='1' declared_type='NSString*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='loadBufferFromData:soundData:format:size:freq:'>
<arg name='soundId' index='0' declared_type='int' type='i'/>
<arg name='soundData' index='1' declared_type='ALvoid*' type='^v'/>
<arg name='format' index='2' declared_type='ALenum' type='i'/>
<arg name='size' index='3' declared_type='ALsizei' type='i'/>
<arg name='freq' index='4' declared_type='ALsizei' type='i'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='loadBuffersAsynchronously:'>
<arg name='loadRequests' index='0' declared_type='NSArray*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='masterGain'>
<retval declared_type='ALfloat' type='f'/>
</method>
<method selector='openALContext'>
<retval declared_type='ALCcontext*' type='^{ALCcontext_struct=}'/>
</method>
<method selector='playSound:sourceGroupId:pitch:pan:gain:loop:'>
<arg name='soundId' index='0' declared_type='int' type='i'/>
<arg name='sourceGroupId' index='1' declared_type='int' type='i'/>
<arg name='pitch' index='2' declared_type='float' type='f'/>
<arg name='pan' index='3' declared_type='float' type='f'/>
<arg name='gain' index='4' declared_type='float' type='f'/>
<arg name='loop' index='5' declared_type='BOOL' type='B'/>
<retval declared_type='ALuint' type='I'/>
</method>
<method selector='setAsynchLoadProgress:'>
<arg name='asynchLoadProgress' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMasterGain:'>
<arg name='masterGain' index='0' declared_type='ALfloat' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='setMixerSampleRate:'>
<arg name='sampleRate' index='0' declared_type='Float32' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSourceGroupEnabled:enabled:'>
<arg name='sourceGroupId' index='0' declared_type='int' type='i'/>
<arg name='enabled' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSourceGroupNonInterruptible:isNonInterruptible:'>
<arg name='sourceGroupId' index='0' declared_type='int' type='i'/>
<arg name='isNonInterruptible' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='soundSourceForSound:sourceGroupId:'>
<arg name='soundId' index='0' declared_type='int' type='i'/>
<arg name='sourceGroupId' index='1' declared_type='int' type='i'/>
<retval declared_type='CDSoundSource*' type='@'/>
</method>
<method selector='sourceGroupEnabled:'>
<arg name='sourceGroupId' index='0' declared_type='int' type='i'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='sourceGroupTotal'>
<retval type64='Q' declared_type='NSUInteger' type='I'/>
</method>
<method selector='sourceTotal'>
<retval declared_type='int' type='i'/>
</method>
<method selector='stopAllSounds'>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopSound:'>
<arg name='sourceId' index='0' declared_type='ALuint' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopSourceGroup:'>
<arg name='sourceGroupId' index='0' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unloadBuffer:'>
<arg name='soundId' index='0' declared_type='int' type='i'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='CDSoundSource'>
<method selector='durationInSeconds'>
<retval declared_type='float' type='f'/>
</method>
<method selector='gain'>
<retval declared_type='float' type='f'/>
</method>
<method selector='init:sourceIndex:soundEngine:'>
<arg name='theSourceId' index='0' declared_type='ALuint' type='I'/>
<arg name='index' index='1' declared_type='int' type='i'/>
<arg name='engine' index='2' declared_type='CDSoundEngine*' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isPlaying'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='lastError'>
<retval declared_type='ALenum' type='i'/>
</method>
<method selector='looping'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='pan'>
<retval declared_type='float' type='f'/>
</method>
<method selector='pitch'>
<retval declared_type='float' type='f'/>
</method>
<method selector='setGain:'>
<arg name='gain' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLooping:'>
<arg name='looping' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPan:'>
<arg name='pan' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPitch:'>
<arg name='pitch' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSoundId:'>
<arg name='soundId' index='0' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='soundId'>
<retval declared_type='int' type='i'/>
</method>
</class>
<class name='CDUtilities'>
<method class_method='true' selector='fullPathFromRelativePath:'>
<arg name='relPath' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<class name='NSObject'>
<method selector='backingSize'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='blendFunc'>
<retval declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
</method>
<method selector='ccTouchBegan:withEvent:'>
<arg name='touch' index='0' declared_type='UITouch*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='ccTouchCancelled:withEvent:'>
<arg name='touch' index='0' declared_type='UITouch*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='ccTouchEnded:withEvent:'>
<arg name='touch' index='0' declared_type='UITouch*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='ccTouchMoved:withEvent:'>
<arg name='touch' index='0' declared_type='UITouch*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='ccTouchesBegan:withEvent:'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='ccTouchesCancelled:withEvent:'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='ccTouchesEnded:withEvent:'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='ccTouchesMoved:withEvent:'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='cdAudioSourceDidFinishPlaying:'>
<arg name='audioSource' index='0' declared_type='CDLongAudioSource*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='cdAudioSourceFileDidChange:'>
<arg name='audioSource' index='0' declared_type='CDLongAudioSource*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='color'>
<retval declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
</method>
<method selector='colorRenderBuffer'>
<retval declared_type='unsigned int' type='I'/>
</method>
<method selector='context'>
<retval declared_type='EAGLContext*' type='@'/>
</method>
<method selector='defaultFrameBuffer'>
<retval declared_type='unsigned int' type='I'/>
</method>
<method selector='directorDidReshapeProjection:'>
<arg name='director' index='0' declared_type='CCDirector*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='doesOpacityModifyRGB'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='easeActionWithAction:'>
<arg name='action' index='0' declared_type='CCActionInterval*' type='@'/>
<retval declared_type='CCActionInterval*' type='@'/>
</method>
<method selector='enabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithDepthFormat:withPixelFormat:withSharegroup:withMultiSampling:withNumberOfSamples:'>
<arg name='depthFormat' index='0' declared_type='unsigned int' type='I'/>
<arg name='pixelFormat' index='1' declared_type='unsigned int' type='I'/>
<arg name='sharegroup' index='2' declared_type='EAGLSharegroup*' type='@'/>
<arg name='multiSampling' index='3' declared_type='BOOL' type='B'/>
<arg name='requestedSamples' index='4' declared_type='unsigned int' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='msaaColorBuffer'>
<retval declared_type='unsigned int' type='I'/>
</method>
<method selector='msaaFrameBuffer'>
<retval declared_type='unsigned int' type='I'/>
</method>
<method selector='mute'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='opacity'>
<retval declared_type='GLubyte' type='C'/>
</method>
<method selector='pause'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='play'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='resizeFromLayer:'>
<arg name='layer' index='0' declared_type='CAEAGLLayer*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='rewind'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setBlendFunc:'>
<arg name='blendFunc' index='0' declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCString:'>
<arg name='label' index='0' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColor:'>
<arg name='color' index='0' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEnabled:'>
<arg name='enabledValue' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMute:'>
<arg name='muteValue' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOpacity:'>
<arg name='opacity' index='0' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOpacityModifyRGB:'>
<arg name='boolean' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setString:'>
<arg name='label' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTexture:'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldAutorotateToInterfaceOrientation:'>
<arg name='interfaceOrientation' index='0' declared_type='UIInterfaceOrientation' type='i'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='stop'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='string'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='texture'>
<retval declared_type='CCTexture2D*' type='@'/>
</method>
<method selector='touchesBegan:withEvent:'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='touchesCancelled:withEvent:'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='touchesEnded:withEvent:'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='touchesMoved:withEvent:'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateProjection'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSThread'>
<method selector='performBlock:'>
<arg name='block' index='0' declared_type='void (^)(void)' function_pointer='true' type='@?'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='performBlock:waitUntilDone:'>
<arg name='block' index='0' declared_type='void (^)(void)' function_pointer='true' type='@?'>
<retval declared_type='void' type='v'/>
</arg>
<arg name='wait' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='performBlock:withObject:waitUntilDone:'>
<arg name='block' index='0' declared_type='void (^)(id)' function_pointer='true' type='@?'>
<arg declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='object' index='1' declared_type='id' type='@'/>
<arg name='wait' index='2' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='SimpleAudioEngine'>
<method selector='backgroundMusicVolume'>
<retval declared_type='float' type='f'/>
</method>
<method selector='effectsVolume'>
<retval declared_type='float' type='f'/>
</method>
<method class_method='true' selector='end'>
<retval declared_type='void' type='v'/>
</method>
<method selector='isBackgroundMusicPlaying'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='pauseBackgroundMusic'>
<retval declared_type='void' type='v'/>
</method>
<method selector='playBackgroundMusic:'>
<arg name='filePath' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='playBackgroundMusic:loop:'>
<arg name='filePath' index='0' declared_type='NSString*' type='@'/>
<arg name='loop' index='1' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='playEffect:'>
<arg name='filePath' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='ALuint' type='I'/>
</method>
<method selector='playEffect:pitch:pan:gain:'>
<arg name='filePath' index='0' declared_type='NSString*' type='@'/>
<arg name='pitch' index='1' declared_type='Float32' type='f'/>
<arg name='pan' index='2' declared_type='Float32' type='f'/>
<arg name='gain' index='3' declared_type='Float32' type='f'/>
<retval declared_type='ALuint' type='I'/>
</method>
<method selector='preloadBackgroundMusic:'>
<arg name='filePath' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='preloadEffect:'>
<arg name='filePath' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='resumeBackgroundMusic'>
<retval declared_type='void' type='v'/>
</method>
<method selector='rewindBackgroundMusic'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundMusicVolume:'>
<arg name='backgroundMusicVolume' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEffectsVolume:'>
<arg name='effectsVolume' index='0' declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='sharedEngine'>
<retval declared_type='SimpleAudioEngine*' type='@'/>
</method>
<method selector='soundSourceForFile:'>
<arg name='filePath' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='CDSoundSource*' type='@'/>
</method>
<method selector='stopBackgroundMusic'>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopEffect:'>
<arg name='soundId' index='0' declared_type='ALuint' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unloadEffect:'>
<arg name='filePath' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='willPlayBackgroundMusic'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<informal_protocol name='CCBlendProtocol'>
<method type64='{_ccBlendFunc=II}16@0:8' selector='blendFunc' type='{_ccBlendFunc=II}8@0:4'>
<retval declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
</method>
<method type64='v24@0:8{_ccBlendFunc=II}16' selector='setBlendFunc:' type='v16@0:4{_ccBlendFunc=II}8'>
<arg name='blendFunc' index='0' declared_type='ccBlendFunc' type='{_ccBlendFunc=II}'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='CCDirectorDelegate'>
<method type64='v24@0:8@16' selector='directorDidReshapeProjection:' type='v12@0:4@8'>
<arg name='director' index='0' declared_type='CCDirector*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B20@0:8i16' selector='shouldAutorotateToInterfaceOrientation:' type='B12@0:4i8'>
<arg name='interfaceOrientation' index='0' declared_type='UIInterfaceOrientation' type='i'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v16@0:8' selector='updateProjection' type='v8@0:4'>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='CCESRenderer'>
<method type64='{CGSize=dd}16@0:8' selector='backingSize' type='{CGSize=ff}8@0:4'>
<retval type64='{CGSize=dd}' declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method type64='I16@0:8' selector='colorRenderBuffer' type='I8@0:4'>
<retval declared_type='unsigned int' type='I'/>
</method>
<method type64='@16@0:8' selector='context' type='@8@0:4'>
<retval declared_type='EAGLContext*' type='@'/>
</method>
<method type64='I16@0:8' selector='defaultFrameBuffer' type='I8@0:4'>
<retval declared_type='unsigned int' type='I'/>
</method>
<method type64='@40@0:8I16I20@24B32I36' selector='initWithDepthFormat:withPixelFormat:withSharegroup:withMultiSampling:withNumberOfSamples:' type='@28@0:4I8I12@16B20I24'>
<arg name='depthFormat' index='0' declared_type='unsigned int' type='I'/>
<arg name='pixelFormat' index='1' declared_type='unsigned int' type='I'/>
<arg name='sharegroup' index='2' declared_type='EAGLSharegroup*' type='@'/>
<arg name='multiSampling' index='3' declared_type='BOOL' type='B'/>
<arg name='requestedSamples' index='4' declared_type='unsigned int' type='I'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='I16@0:8' selector='msaaColorBuffer' type='I8@0:4'>
<retval declared_type='unsigned int' type='I'/>
</method>
<method type64='I16@0:8' selector='msaaFrameBuffer' type='I8@0:4'>
<retval declared_type='unsigned int' type='I'/>
</method>
<method type64='B24@0:8@16' selector='resizeFromLayer:' type='B12@0:4@8'>
<arg name='layer' index='0' declared_type='CAEAGLLayer*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='CCLabelProtocol'>
<method type64='v24@0:8*16' selector='setCString:' type='v12@0:4*8'>
<arg name='label' index='0' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' selector='setString:' type='v12@0:4@8'>
<arg name='label' index='0' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@16@0:8' selector='string' type='@8@0:4'>
<retval declared_type='NSString*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='CCRGBAProtocol'>
<method type64='{_ccColor3B=CCC}16@0:8' selector='color' type='{_ccColor3B=CCC}8@0:4'>
<retval declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
</method>
<method type64='B16@0:8' selector='doesOpacityModifyRGB' type='B8@0:4'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='C16@0:8' selector='opacity' type='C8@0:4'>
<retval declared_type='GLubyte' type='C'/>
</method>
<method type64='v19@0:8{_ccColor3B=CCC}16' selector='setColor:' type='v11@0:4{_ccColor3B=CCC}8'>
<arg name='color' index='0' declared_type='ccColor3B' type='{_ccColor3B=CCC}'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v20@0:8C16' selector='setOpacity:' type='v12@0:4C8'>
<arg name='opacity' index='0' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v20@0:8B16' selector='setOpacityModifyRGB:' type='v12@0:4B8'>
<arg name='boolean' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='CCStandardTouchDelegate'>
<method type64='v32@0:8@16@24' selector='ccTouchesBegan:withEvent:' type='v16@0:4@8@12'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' selector='ccTouchesCancelled:withEvent:' type='v16@0:4@8@12'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' selector='ccTouchesEnded:withEvent:' type='v16@0:4@8@12'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' selector='ccTouchesMoved:withEvent:' type='v16@0:4@8@12'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='CCTargetedTouchDelegate'>
<method type64='B32@0:8@16@24' selector='ccTouchBegan:withEvent:' type='B16@0:4@8@12'>
<arg name='touch' index='0' declared_type='UITouch*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v32@0:8@16@24' selector='ccTouchCancelled:withEvent:' type='v16@0:4@8@12'>
<arg name='touch' index='0' declared_type='UITouch*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' selector='ccTouchEnded:withEvent:' type='v16@0:4@8@12'>
<arg name='touch' index='0' declared_type='UITouch*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' selector='ccTouchMoved:withEvent:' type='v16@0:4@8@12'>
<arg name='touch' index='0' declared_type='UITouch*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='CCTextureProtocol'>
<method type64='v24@0:8@16' selector='setTexture:' type='v12@0:4@8'>
<arg name='texture' index='0' declared_type='CCTexture2D*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@16@0:8' selector='texture' type='@8@0:4'>
<retval declared_type='CCTexture2D*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='CCTouchDelegate'>
<method type64='v32@0:8@16@24' selector='touchesBegan:withEvent:' type='v16@0:4@8@12'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' selector='touchesCancelled:withEvent:' type='v16@0:4@8@12'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' selector='touchesEnded:withEvent:' type='v16@0:4@8@12'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' selector='touchesMoved:withEvent:' type='v16@0:4@8@12'>
<arg name='touches' index='0' declared_type='NSSet*' type='@'/>
<arg name='event' index='1' declared_type='UIEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='CCTransitionEaseScene'>
<method type64='@24@0:8@16' selector='easeActionWithAction:' type='@12@0:4@8'>
<arg name='action' index='0' declared_type='CCActionInterval*' type='@'/>
<retval declared_type='CCActionInterval*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='CDAudioInterruptProtocol'>
<method type64='B16@0:8' selector='enabled' type='B8@0:4'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B16@0:8' selector='mute' type='B8@0:4'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v20@0:8B16' selector='setEnabled:' type='v12@0:4B8'>
<arg name='enabledValue' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v20@0:8B16' selector='setMute:' type='v12@0:4B8'>
<arg name='muteValue' index='0' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='CDAudioTransportProtocol'>
<method type64='B16@0:8' selector='pause' type='B8@0:4'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B16@0:8' selector='play' type='B8@0:4'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B16@0:8' selector='rewind' type='B8@0:4'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B16@0:8' selector='stop' type='B8@0:4'>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='CDLongAudioSourceDelegate'>
<method type64='v24@0:8@16' selector='cdAudioSourceDidFinishPlaying:' type='v12@0:4@8'>
<arg name='audioSource' index='0' declared_type='CDLongAudioSource*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' selector='cdAudioSourceFileDidChange:' type='v12@0:4@8'>
<arg name='audioSource' index='0' declared_type='CDLongAudioSource*' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
</signatures>
